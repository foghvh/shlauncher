//-==================== START OF FILE: .eslintrc.json ====================-//

{
    "extends": "next/core-web-vitals",
    "rules": {
        "@typescript-eslint/no-unsafe-assignment": "off",
        "@typescript-eslint/no-unnecessary-condition": "off"
    }
}

//-==================== END OF FILE: .eslintrc.json ====================-//

//-==================== START OF FILE: biome.json ====================-//

{
  "$schema": "https://biomejs.dev/schemas/1.9.4/schema.json",
  "vcs": {
    "enabled": false,
    "clientKind": "git",
    "useIgnoreFile": false
  },
  "files": {
    "ignoreUnknown": false,
    "ignore": []
  },
  "formatter": {
    "enabled": true,
    "indentStyle": "space",
    "indentWidth": 2
  },
  "organizeImports": {
    "enabled": true
  },
  "linter": {
    "enabled": true,
    "rules": {
      "recommended": true,
      "correctness": {
        "useHookAtTopLevel": "error"
      },
      "nursery": {
        "useGoogleFontDisplay": "error",
        "noDocumentImportInPage": "error",
        "noHeadElement": "error",
        "noHeadImportInDocument": "error",
        "noImgElement": "off",
        "useComponentExportOnlyModules": {
          "level": "error",
          "options": {
            "allowExportNames": ["metadata"]
          }
        }
      }
    }
  },
  "css": {
    "formatter": {
      "quoteStyle": "double"
    }
  },
  "javascript": {
    "formatter": {
      "quoteStyle": "double"
    },
    "globals": []
  }
}


//-==================== END OF FILE: biome.json ====================-//

//-==================== START OF FILE: components.json ====================-//

{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/styles/globals.css",
    "baseColor": "gray",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

//-==================== END OF FILE: components.json ====================-//

//-==================== START OF FILE: index.html ====================-//

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Osskins</title>
  </head>

  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
sw


//-==================== END OF FILE: index.html ====================-//

//-==================== START OF FILE: next-env.d.ts ====================-//

/// <reference types="next" />
/// <reference types="next/image-types/global" />
/// <reference path="./dist/types/routes.d.ts" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.


//-==================== END OF FILE: next-env.d.ts ====================-//

//-==================== START OF FILE: next.config.ts ====================-//

import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  reactStrictMode: true,
  images: {
    unoptimized: true,
  },
  distDir: "dist",
  output: "export",
  trailingSlash: true,
  eslint: {
    ignoreDuringBuilds: true,
  },
  typescript: {
    ignoreBuildErrors: true,
  },
};

export default nextConfig;


//-==================== END OF FILE: next.config.ts ====================-//

//-==================== START OF FILE: package.json ====================-//

{
  "name": "osskins",
  "private": true,
  "version": "1.1.1",
  "type": "module",
  "scripts": {
    "dev": "next dev",
    "dev:admin": "powershell -Command \"Start-Process -FilePath pnpm -ArgumentList 'tauri dev' -Verb RunAs\"",
    "build": "next build",
    "start": "next start",
    "lint": "biome check src/ && next lint",
    "tauri": "tauri"
  },
  "dependencies": {
    "@radix-ui/react-alert-dialog": "^1.1.11",
    "@radix-ui/react-dialog": "^1.1.7",
    "@radix-ui/react-dropdown-menu": "^2.1.12",
    "@radix-ui/react-label": "^2.1.4",
    "@radix-ui/react-progress": "^1.1.3",
    "@radix-ui/react-scroll-area": "^1.2.6",
    "@radix-ui/react-select": "^2.2.2",
    "@radix-ui/react-separator": "^1.1.3",
    "@radix-ui/react-slot": "^1.2.0",
    "@radix-ui/react-switch": "^1.2.2",
    "@radix-ui/react-tabs": "^1.1.9",
    "@radix-ui/react-tooltip": "^1.2.3",
    "@tauri-apps/api": "^2.5.0",
    "@tauri-apps/plugin-fs": "^2.2.1",
    "@tauri-apps/plugin-opener": "^2.2.6",
    "@types/pako": "^2.0.3",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "lucide-react": "^0.487.0",
    "next": "^15.3.4",
    "next-themes": "^0.4.6",
    "pako": "^2.1.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "sonner": "^2.0.3",
    "tailwind-merge": "^3.2.0",
    "tw-animate-css": "^1.2.5",
    "zustand": "^5.0.3"
  },
  "devDependencies": {
    "@biomejs/biome": "^1.9.4",
    "@eslint/eslintrc": "^3.3.1",
    "@eslint/js": "^9.24.0",
    "@next/eslint-plugin-next": "^15.3.0",
    "@tailwindcss/postcss": "^4.1.4",
    "@tauri-apps/cli": "^2.5.0",
    "@types/node": "^22.14.1",
    "@types/react": "^19.1.2",
    "@types/react-dom": "^19.1.2",
    "@typescript-eslint/eslint-plugin": "^8.30.1",
    "@typescript-eslint/parser": "^8.30.1",
    "@vitejs/plugin-react": "^4.4.0",
    "eslint": "^9.24.0",
    "eslint-config-next": "^15.3.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "tailwindcss": "^4.1.4",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.30.1"
  }
}

//-==================== END OF FILE: package.json ====================-//

//-==================== START OF FILE: README.md ====================-//

# Osskins

![App Screenshot](public/osskins-screenshot.png)

A cross‑platform desktop application built with Next.js, Tauri and TypeScript. Osskinns lets you browse, search and manage custom skins for League of Legends on Windows.

## Key Features

- **Tauri + Next.js**  
  Combines Tauri’s lightweight Rust backend and secure webview with Next.js App Router (v15) and Static Site Generation.
- **TypeScript & React**  
  Fully typed frontend with React 19, Zustand for state, and next-themes for dark/light mode.
- **TailwindCSS v4**  
  Utility‑first styling, customizable via Tailwind config.
- **Headless UI & Radix**  
  Accessible dialogs, menus, tooltips and more from @radix‑ui/react.
- **Modular Architecture**
  - `src/components` contains UI primitives and domain components.
  - `src/hooks` and `src/lib` for data fetching, local persistence and utilities.
  - `src-tauri/src` houses all Rust logic and Tauri commands.
- **Notifications & Feedback**  
  In-app toasts via Sonner, progress bars, status indicators and logs dialog.

## Prerequisites

- Node.js ≥18 & pnpm
- Rust toolchain (`rustup`, `cargo`)
- Windows 10+ (for Tauri’s native window)


//-==================== END OF FILE: README.md ====================-//

//-==================== START OF FILE: src\app\actions.ts ====================-//

"use server";

import { revalidatePath } from "next/cache";
import { invoke } from "@tauri-apps/api/core";
import { CustomSkin, Champion } from "@/lib/types";

interface UploadResult {
  success: boolean;
  skin?: CustomSkin;
  error?: string;
}

interface DeleteResult {
  success: boolean;
  error?: string;
}

interface ChampionsResult {
  success: boolean;
  champions?: Champion[];
  error?: string;
}

interface ChampionUpdateResult {
  success: boolean;
  hasData?: boolean;
  error?: string;
}

export async function uploadSkin(
  championId: number,
  skinName: string
): Promise<UploadResult> {
  try {
    // The Tauri command will handle file selection on the native side
    const newSkin = await invoke<CustomSkin>("upload_custom_skin", {
      championId,
      skinName,
    });
    revalidatePath("/");
    return { success: true, skin: newSkin };
  } catch (error) {
    console.error("Failed to upload custom skin:", error);
    return { success: false, error: String(error) };
  }
}

export async function deleteSkin(skinId: string): Promise<DeleteResult> {
  try {
    await invoke("delete_custom_skin", { skinId });
    revalidatePath("/");
    return { success: true };
  } catch (error) {
    return { success: false, error: String(error) };
  }
}

export async function getChampions(): Promise<ChampionsResult> {
  try {
    // First check if we have champion data
    const hasData = await invoke<boolean>("check_champions_data");

    if (!hasData) {
      return {
        success: false,
        error: "No champion data found. Please run the data update first.",
      };
    }

    const data = await invoke<string>("get_champion_data", {
      championId: 0,
    });

    if (!data) {
      return {
        success: false,
        error: "No champion data available",
      };
    }

    const championsData = JSON.parse(data) as Champion[];
    if (!Array.isArray(championsData) || championsData.length === 0) {
      return {
        success: false,
        error: "No champions found in data",
      };
    }

    return { success: true, champions: championsData };
  } catch (error) {
    // If the error is related to Tauri not being available (in SSR/non-Tauri context)
    if (error instanceof Error && error.message.includes("not available")) {
      return {
        success: false,
        error: "This API is only available in the Tauri app context",
      };
    }

    console.error("Failed to load champions:", error);
    return {
      success: false,
      error: "Failed to load champions",
    };
  }
}

export async function updateChampions(): Promise<ChampionUpdateResult> {
  try {
    await invoke("delete_champions_cache");
    const result = await invoke<boolean>("check_champions_data");
    return { success: true, hasData: result };
  } catch (error) {
    console.error("Failed to update champions:", error);
    return {
      success: false,
      error: "Failed to update champions",
    };
  }
}

export async function getCustomSkins(): Promise<{
  success: boolean;
  skins?: CustomSkin[];
  error?: string;
}> {
  try {
    const skins = await invoke<CustomSkin[]>("get_custom_skins");
    return { success: true, skins };
  } catch (error) {
    console.error("Failed to load custom skins:", error);
    return {
      success: false,
      error: "Failed to load custom skins",
    };
  }
}


//-==================== END OF FILE: src\app\actions.ts ====================-//

//-==================== START OF FILE: src\app\error.tsx ====================-//

"use client";

import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { useEffect } from "react";
// import { useRouter } from "next/navigation";
// import Link from "next/link";

export default function AppError({
  error,
  reset,
}: {
  error: Error & { digest?: string };
  reset: () => void;
}) {
  useEffect(() => {
    console.error("Application error:", error);
  }, [error]);

  // const router = useRouter();

  return (
    <Card className="flex min-h-full flex-col items-center justify-center p-24">
      <CardContent className="flex flex-col items-center justify-center h-full gap-4">
        <div className="text-destructive font-medium">
          Something went wrong!
        </div>
        <div className="text-sm text-muted-foreground">{error.message}</div>
        <div className="flex gap-2 mt-4">
          <Button variant="outline" onClick={reset}>
            Try again
          </Button>
          {/* <Button variant="secondary" onClick={() => router.back()}>
            Back
          </Button> */}
          {/* <Link passHref href="/">
            <Button>Back</Button>
          </Link> */}
        </div>
      </CardContent>
    </Card>
  );
}


//-==================== END OF FILE: src\app\error.tsx ====================-//

//-==================== START OF FILE: src\app\globals.css ====================-//

@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

@theme {
  --font-sans: var(--font-poppins);
  --font-mono: var(--font-geist-mono);
}

@theme inline {
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
}

:root {
  --radius: 0.5rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.141 0.005 285.823);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.141 0.005 285.823);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.141 0.005 285.823);
  --primary: oklch(0.21 0.006 285.885);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.967 0.001 286.375);
  --secondary-foreground: oklch(0.21 0.006 285.885);
  --muted: oklch(0.967 0.001 286.375);
  --muted-foreground: oklch(0.552 0.016 285.938);
  --accent: oklch(0.967 0.001 286.375);
  --accent-foreground: oklch(0.21 0.006 285.885);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.92 0.004 286.32);
  --input: oklch(0.92 0.004 286.32);
  --ring: oklch(0.705 0.015 286.067);
  --theme-transition-duration: 200ms;
}

:root:not(.transitioning-theme) * {
  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: var(--theme-transition-duration);
}

.dark {
  --background: oklch(0.141 0.005 285.823);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.21 0.006 285.885);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.21 0.006 285.885);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.92 0.004 286.32);
  --primary-foreground: oklch(0.21 0.006 285.885);
  --secondary: oklch(0.274 0.006 286.033);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.274 0.006 286.033);
  --muted-foreground: oklch(0.705 0.015 286.067);
  --accent: oklch(0.274 0.006 286.033);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.552 0.016 285.938);
}

::-webkit-scrollbar {
  @apply w-2.5 h-2.5;
}

::-webkit-scrollbar-track {
  @apply bg-transparent
}

::-webkit-scrollbar-thumb {
  @apply rounded-full bg-border border-[1px] border-transparent border-solid bg-clip-padding;
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }

  body {
    @apply bg-background text-foreground;
  }
}

/* Hide scrollbar for Chrome, Safari and Opera */
.scrollbar-hide::-webkit-scrollbar {
  display: none;
}

/* Hide scrollbar for IE, Edge and Firefox */
.scrollbar-hide {
  -ms-overflow-style: none;
  /* IE and Edge */
  scrollbar-width: none;
  /* Firefox */
}

//-==================== END OF FILE: src\app\globals.css ====================-//

//-==================== START OF FILE: src\app\layout.tsx ====================-//

import { Poppins } from "next/font/google";
import "@/app/globals.css";
import { Toaster } from "@/components/ui/sonner";
import { ThemeProvider } from "next-themes";
import { TerminalLogListener } from "@/components/providers/TerminalLogListener";
import { ThemeToneProvider } from "@/components/providers/ThemeToneProvider";

const poppins = Poppins({
  weight: ["400", "500", "600", "700"],
  subsets: ["latin"],
  variable: "--font-poppins",
});

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        <title>League Skin Manager</title>
        <meta
          name="description"
          content="A powerful League of Legends skin manager"
        />
      </head>
      <body
        className={`${poppins.variable} antialiased flex flex-col h-screen`}
      >
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          <ThemeToneProvider>
            {children}
            <Toaster />
            <TerminalLogListener />
          </ThemeToneProvider>
        </ThemeProvider>
      </body>
    </html>
  );
}


//-==================== END OF FILE: src\app\layout.tsx ====================-//

//-==================== START OF FILE: src\app\loading.tsx ====================-//

"use client";

import { Loader2 } from "lucide-react";

export default function Loading() {
  return (
    <div className="flex items-center justify-center h-screen w-full flex-col gap-4 animate-in fade-in-50 duration-500">
      <Loader2 className="h-12 w-12 animate-spin" />
    </div>
  );
}


//-==================== END OF FILE: src\app\loading.tsx ====================-//

//-==================== START OF FILE: src\app\page.tsx ====================-//

"use client";

import { useState, useEffect, Suspense } from "react";
import { useDataUpdate } from "@/lib/hooks/use-data-update";
import { useChampions } from "@/lib/hooks/use-champions";
import { GameDirectorySelector } from "@/components/game-directory/GameDirectorySelector";
import { useGameStore } from "@/lib/store";
import { Loader2 } from "lucide-react";
import { useInitialization } from "@/lib/hooks/use-initialization";
import { useChampionPersistence } from "@/lib/hooks/use-champion-persistence";
import { filterAndSortChampions } from "@/lib/utils/champion-utils";
import ChampionGrid from "@/components/ChampionGrid";
import { SkinGrid } from "@/components/SkinGrid";
import { CustomSkinList } from "@/components/CustomSkinList";
import { TopBar } from "@/components/layout/TopBar";
import { invoke } from "@tauri-apps/api/core";
import { toast } from "sonner";
import { DownloadingModal } from "@/components/DownloadingModal";
import { Button } from "@/components/ui/button";

interface UpdateInfo {
  has_update: boolean;
}

function PageLoading() {
  return (
    <div className="flex items-center justify-center h-screen w-full flex-col gap-4">
      <Loader2 className="h-12 w-12 animate-spin" />
      <p className="text-muted-foreground text-lg">Loading champions data...</p>
    </div>
  );
}

export default function Home() {
  const { champions, loading, error, hasData } = useChampions();
  const { updateData, isUpdating, progress } = useDataUpdate();
  const { leaguePath, activeTab, favorites, toggleFavorite } = useGameStore();
  const [isUpdateModalOpen, setIsUpdateModalOpen] = useState(false);
  const autoUpdateData = useGameStore((s) => s.autoUpdateData);

  // Initialize app
  useInitialization();
  useChampionPersistence();

  const [searchQuery, setSearchQuery] = useState("");
  const [selectedChampion, setSelectedChampion] = useState<number | null>(null);

  const filteredChampions = filterAndSortChampions(
    champions,
    searchQuery,
    favorites
  );
  const selectedChampionData = champions.find(
    (champ) => champ.id === selectedChampion
  );

  const handleUpdateData = async () => {
    try {
      await invoke("delete_champions_cache");
      await updateData();
    } catch (error) {
      console.error("Failed to update data:", error);
      toast.error("Failed to update data");
    }
  };

  const handleCheckForUpdates = () => {
    setIsUpdateModalOpen(true);
  };

  useEffect(() => {
    if (autoUpdateData) {
      // Only run on mount
      void (async () => {
        try {
          const updateResult: UpdateInfo = await invoke("check_github_updates");
          if (updateResult.has_update) {
            await invoke("update_champion_data_from_github");
            toast.success("Champion data auto-updated!");
          }
        } catch (err) {
          // Optionally show a toast for errors
        }
      })();
    }
  }, [autoUpdateData]);

  // Initial setup states
  if (!leaguePath) {
    return <GameDirectorySelector />;
  }

  if (hasData === false) {
    return (
      <main className="flex min-h-full flex-col items-center justify-center p-24">
        <div className="flex flex-col items-center gap-8">
          <h1 className="text-2xl font-bold">Welcome to League Skin Manager</h1>
          <p className="text-muted-foreground">
            We need to download champion data before you can use the app
          </p>
          <Button onClick={() => void handleUpdateData()}>
            Download Champion Data
          </Button>
        </div>
      </main>
    );
  }

  return (
    <div className="flex flex-col h-full w-full">
      <TopBar
        champions={champions}
        selectedChampionId={selectedChampion}
        searchQuery={searchQuery}
        onSearchChange={setSearchQuery}
        onChampionSelect={setSelectedChampion}
        onUpdateData={handleCheckForUpdates}
      />

      {/* Update Modal - visible when updating or when manually opened */}
      <DownloadingModal
        isOpen={isUpdating || isUpdateModalOpen}
        progress={progress}
        onClose={() => {
          setIsUpdateModalOpen(false);
        }}
      />

      <Suspense fallback={<PageLoading />}>
        <div className="flex flex-1 overflow-hidden w-full mx-auto">
          <div className="w-1/4 xl:w-1/5 overflow-y-auto scrollbar-hide bg-primary/10 border-r p-2">
            <ChampionGrid
              champions={filteredChampions}
              selectedChampion={selectedChampion}
              favorites={favorites}
              onSelectChampion={setSelectedChampion}
              onToggleFavorite={toggleFavorite}
            />
          </div>

          <div className="w-3/4 xl:w-4/5 flex justify-center overflow-y-auto p-2 size-full">
            {activeTab === "official" ? (
              <SkinGrid champion={selectedChampionData ?? null} />
            ) : (
              <CustomSkinList championId={selectedChampion} />
            )}
          </div>
        </div>
      </Suspense>
    </div>
  );
}


//-==================== END OF FILE: src\app\page.tsx ====================-//

//-==================== START OF FILE: src\components\ChampionCard.tsx ====================-//

import React from "react";
import { Champion } from "@/lib/types";
import { cn } from "@/lib/utils";
import { Card } from "./ui/card";
import Image from "next/image";
import { Heart } from "lucide-react";

interface ChampionCardProps {
  champion: Champion;
  isSelected: boolean;
  isFavorite: boolean;
  onToggleFavorite: () => void;
  onClick: () => void;
}

export function ChampionCard({
  champion,
  isSelected,
  isFavorite,
  onToggleFavorite,
  onClick,
}: ChampionCardProps) {
  const handleFavoriteClick = (e: React.MouseEvent) => {
    e.stopPropagation();
    onToggleFavorite();
  };

  return (
    <Card
      className={cn(
        "relative aspect-square cursor-pointer overflow-hidden transition-all p-0 rounded-none",
        isSelected && "ring ring-primary"
      )}
      onClick={onClick}
    >
      <button
        className="absolute top-1 right-1 p-1 hover:bg-background/80 rounded-full"
        onClick={handleFavoriteClick}
      >
        <Heart
          size={16}
          className={cn(
            "transition-colors",
            isFavorite ? "fill-primary text-primary" : "text-muted-foreground"
          )}
        />
      </button>

      <Image
        src={champion.iconSrc}
        alt={champion.name}
        className="size-full object-cover"
        loading="lazy"
        width={64}
        height={64}
        unoptimized
      />
    </Card>
  );
}


//-==================== END OF FILE: src\components\ChampionCard.tsx ====================-//

//-==================== START OF FILE: src\components\ChampionGrid.tsx ====================-//

"use client";

import React from "react";
import { Champion } from "@/lib/types";
import { Card, CardContent } from "./ui/card";
import { Skeleton } from "./ui/skeleton";
import { ChampionCard } from "@/components/ChampionCard";

interface ChampionGridProps {
  champions: Champion[];
  selectedChampion: number | null;
  favorites: Set<number>;
  onSelectChampion: (id: number) => void;
  onToggleFavorite: (id: number) => void;
}

function ChampionGridLoading() {
  return (
    <div className="w-full h-fit mx-auto grid grid-cols-3 md:grid-cols-4 xl:grid-cols-5 gap-2">
      {Array.from({ length: 45 }).map((_, i) => (
        <Skeleton key={i} className="aspect-square size-[64px]" />
      ))}
    </div>
  );
}

export default function ChampionGrid({
  champions,
  selectedChampion,
  favorites,
  onSelectChampion,
  onToggleFavorite,
}: ChampionGridProps) {
  if (champions.length === 0) {
    return <ChampionGridLoading />;
  }

  // Sort champions so favorites are on top
  const sortedChampions = [...champions].sort((a, b) => {
    const aFav = favorites.has(a.id) ? 1 : 0;
    const bFav = favorites.has(b.id) ? 1 : 0;
    return bFav - aFav;
  });

  return (
    <div className="w-fit mx-auto grid grid-cols-3 md:grid-cols-4 xl:grid-cols-5 gap-2">
      {sortedChampions.map((champion: Champion) => (
        <ChampionCard
          key={champion.id}
          champion={champion}
          isSelected={selectedChampion === champion.id}
          isFavorite={favorites.has(champion.id)}
          onToggleFavorite={() => {
            onToggleFavorite(champion.id);
          }}
          onClick={() => {
            onSelectChampion(champion.id);
          }}
        />
      ))}
    </div>
  );
}


//-==================== END OF FILE: src\components\ChampionGrid.tsx ====================-//

//-==================== START OF FILE: src\components\ChampionSearch.tsx ====================-//

import { useState, useEffect, useRef } from "react";
import { Search } from "lucide-react";
import { Input } from "./ui/input";
import { Champion } from "@/lib/types";

interface ChampionSearchProps {
  champions: Champion[];
  onSelect: (championId: number) => void;
  selectedChampionId: number | null;
  searchQuery: string;
  onSearchChange: (query: string) => void;
}

function getMatchScore(championName: string, query: string): number {
  const normalizedName = championName.toLowerCase();
  const normalizedQuery = query.toLowerCase();

  // Exact match gets highest score
  if (normalizedName === normalizedQuery) return 100;

  // Starts with query gets high score
  if (normalizedName.startsWith(normalizedQuery)) return 80;

  // Contains query as a word gets medium score
  if (normalizedName.includes(` ${normalizedQuery}`)) return 60;

  // Contains query gets low score
  if (normalizedName.includes(normalizedQuery)) return 40;

  // No match
  return 0;
}

export function ChampionSearch({
  champions,
  onSelect,
  selectedChampionId,
  searchQuery,
  onSearchChange,
}: ChampionSearchProps) {
  const inputRef = useRef<HTMLInputElement>(null);
  const [hasFocus, setHasFocus] = useState(false);

  // Handle keyboard input when not focused on input
  useEffect(() => {
    const down = (e: KeyboardEvent) => {
      // Skip if input or any other text input has focus
      if (
        hasFocus ||
        e.target instanceof HTMLInputElement ||
        e.target instanceof HTMLTextAreaElement
      ) {
        return;
      }

      // Handle direct text input when not focused on input elements
      if (e.key.length === 1 && !e.metaKey && !e.ctrlKey && !e.altKey) {
        e.preventDefault(); // Prevent default to avoid double input
        onSearchChange(e.key);
        inputRef.current?.focus();
      }

      // Handle backspace
      if (e.key === "Backspace") {
        e.preventDefault();
        onSearchChange(searchQuery.slice(0, -1));
        inputRef.current?.focus();
      }

      // Handle escape to clear search
      if (e.key === "Escape") {
        e.preventDefault();
        onSearchChange("");
        inputRef.current?.blur();
      }
    };

    document.addEventListener("keydown", down);
    return () => {
      document.removeEventListener("keydown", down);
    };
  }, [searchQuery, onSearchChange, hasFocus]);

  return (
    <Input
      ref={inputRef}
      type="search"
      icon={<Search size={16} />}
      placeholder="Search champions..."
      value={searchQuery}
      onFocus={() => {
        setHasFocus(true);
      }}
      onBlur={() => {
        setHasFocus(false);
      }}
      onChange={(e) => {
        onSearchChange(e.target.value);
      }}
    />
  );
}


//-==================== END OF FILE: src\components\ChampionSearch.tsx ====================-//

//-==================== START OF FILE: src\components\ChromaSelector.tsx ====================-//

import { ChromaInSummary } from "@/lib/types";
import { cn } from "@/lib/utils";

interface ChromaSelectorProps {
  chromas: ChromaInSummary[];
  onSelect: (chroma: ChromaInSummary | null) => void;
  selectedChromaId?: number;
}

export function ChromaSelector({
  chromas,
  onSelect,
  selectedChromaId,
}: ChromaSelectorProps) {
  // Create a multi-color gradient for the dot
  const gradient = `conic-gradient(${chromas
    .map(
      (c, i) =>
        `${c.colors[0] ?? "#fff"} ${(i * 100) / chromas.length}% ${
          ((i + 1) * 100) / chromas.length
        }%`
    )
    .join(", ")})`;

  return (
    <div className="relative flex flex-col items-center group">
      {/* Main dot with gradient */}
      <div
        className={cn(
          "size-7 rounded-full border border-primary shadow cursor-pointer"
        )}
        style={{ background: gradient }}
      />
      {/* Animated vertical chroma popup */}
      <div
        className={cn(
          "absolute left-1/2 -translate-x-1/2 flex flex-col gap-1 z-30 opacity-0 translate-y-4 pointer-events-none group-hover:opacity-100 group-hover:-translate-y-0 pb-8 group-hover:pointer-events-auto transition-all duration-300 origin-bottom"
        )}
        style={{
          bottom: 0,
          filter: "drop-shadow(0 4px 12px rgba(0,0,0,0.18))",
        }}
      >
        {chromas.map((chroma) => (
          <button
            key={chroma.id}
            type="button"
            className={cn(
              "w-6 h-6 rounded-full border flex items-center justify-center transition-all duration-200 bg-white/10 cursor-pointer relative",
              selectedChromaId === chroma.id && "border-2 border-primary"
            )}
            style={{
              background: `linear-gradient(135deg, ${chroma.colors.join(
                ", "
              )})`,
              boxShadow: "0 1px 4px 0 rgba(0,0,0,0.10)",
            }}
            onClick={(e) => {
              e.stopPropagation();
              onSelect(chroma);
            }}
          />
        ))}
      </div>
    </div>
  );
}


//-==================== END OF FILE: src\components\ChromaSelector.tsx ====================-//

//-==================== START OF FILE: src\components\CustomSkinCard.tsx ====================-//

"use client";

import React, { useState } from "react";
import { cn } from "@/lib/utils";
import { Card, CardContent, CardFooter } from "./ui/card";
import { Button } from "./ui/button";
import { CustomSkin } from "@/lib/types";
import { Skeleton } from "./ui/skeleton";
import Image from "next/image";
import { TrashIcon, Play, Check } from "lucide-react";
import { useGameStore } from "@/lib/store";
import { toast } from "sonner";
import { shallow } from "zustand/shallow";

interface CustomSkinCardProps {
  skin: CustomSkin;
  onDelete: (skinId: string) => Promise<boolean>;
}

export const CustomSkinCard = React.memo(function CustomSkinCard({
  skin,
  onDelete,
}: CustomSkinCardProps) {
  const [isHovering, setIsHovering] = useState(false);
  const [imgLoaded, setImgLoaded] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  // Only subscribe to the specific state/actions needed
  const selectedSkins = useGameStore((s) => s.selectedSkins);
  const selectSkin = useGameStore((s) => s.selectSkin);
  const clearSelection = useGameStore((s) => s.clearSelection);

  // Check if this skin is selected
  const isSelected =
    selectedSkins.get(skin.champion_id)?.fantome === skin.file_path;

  // Generate a fake skin ID for custom skins (used for selection tracking)
  const fakeSkinId = parseInt(skin.id.replace(/\D/g, "").slice(0, 8)) || 999999;

  const handleMouseEnter = () => {
    setIsHovering(true);
  };

  const handleMouseLeave = () => {
    setIsHovering(false);
  };

  // Handle delete button click
  const confirmDelete = () => {
    toast.warning(`Delete "${skin.name}"?`, {
      description: "This action cannot be undone.",
      duration: 5000,
      action: {
        label: "Delete",
        onClick: () => {
          setIsDeleting(true);

          toast.promise(
            (async () => {
              const success = await onDelete(skin.id);
              if (!success) {
                throw new Error("Failed to delete skin");
              }
              return success;
            })(),
            {
              loading: "Deleting skin...",
              success: `"${skin.name}" was deleted successfully`,
              error: "Failed to delete skin",
            }
          );
        },
      },
    });
  };

  // Select or deselect this skin
  const handleClick = () => {
    if (isSelected) {
      clearSelection(skin.champion_id);
    } else {
      // For custom skins we use the file path directly
      selectSkin(skin.champion_id, fakeSkinId, undefined, skin.file_path);
    }
  };

  return (
    <Button
      className={cn(
        "w-full py-6 px-0 bg-primary/20 gap-0 rounded-lg overflow-hidden transition-all duration-300",
        isSelected ? "ring-2 ring-primary" : ""
      )}
      onClick={handleClick}
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
    >
      <div className="p-2">
        {!isSelected && <Play className="size-8" />}
        {isSelected && <Check className="size-8 text-primary" />}
      </div>

      <div className="flex justify-between gap-2 px-2 items-center w-full">
        <h3 className="text-lg font-semibold text-white drop-shadow-md">
          {skin.name}
        </h3>
        <Button
          variant="destructive"
          size="icon"
          className="h-8 w-8 rounded-full opacity-80 hover:opacity-100"
          onClick={(e) => {
            e.stopPropagation();
            confirmDelete();
          }}
          disabled={isDeleting}
        >
          <TrashIcon className="h-4 w-4" />
        </Button>
      </div>
    </Button>
  );
});


//-==================== END OF FILE: src\components\CustomSkinCard.tsx ====================-//

//-==================== START OF FILE: src\components\CustomSkinItem.tsx ====================-//

"use client";

import React, { useState } from "react";
import { cn } from "@/lib/utils";
import { Button } from "./ui/button";
import { CustomSkin } from "@/lib/types";
import { shallow } from "zustand/shallow";

import { Trash2, Play, Check } from "lucide-react";
import { useGameStore } from "@/lib/store";
import { toast } from "sonner";

interface CustomSkinCardProps {
  skin: CustomSkin;
  onDelete: (skinId: string) => Promise<boolean>;
}

export function CustomSkinItem({ skin, onDelete }: CustomSkinCardProps) {
  const [isHovering, setIsHovering] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  // Only subscribe to the specific state/actions needed
  const selectedSkins = useGameStore((s) => s.selectedSkins);
  const selectSkin = useGameStore((s) => s.selectSkin);
  const clearSelection = useGameStore((s) => s.clearSelection);

  // Check if this skin is selected
  const isSelected =
    selectedSkins.get(skin.champion_id)?.fantome === skin.file_path;

  // Generate a fake skin ID for custom skins (used for selection tracking)
  const fakeSkinId = parseInt(skin.id.replace(/\D/g, "").slice(0, 8)) || 999999;

  const handleMouseEnter = () => {
    setIsHovering(true);
  };

  const handleMouseLeave = () => {
    setIsHovering(false);
  };

  // Handle delete button click
  const confirmDelete = () => {
    toast.warning(`Delete "${skin.name}"?`, {
      description: "This action cannot be undone.",
      duration: 5000,
      action: {
        label: "Delete",
        onClick: () => {
          setIsDeleting(true);

          toast.promise(
            async () => {
              const success = await onDelete(skin.id);
              if (!success) {
                throw new Error("Failed to delete skin");
              }
              return success;
            },
            {
              loading: "Deleting skin...",
              success: `"${skin.name}" was deleted successfully`,
              error: "Failed to delete skin",
            }
          );
        },
      },
    });
  };

  // Select or deselect this skin
  const handleClick = () => {
    if (isSelected) {
      clearSelection(skin.champion_id);
    } else {
      // For custom skins we use the file path directly
      selectSkin(skin.champion_id, fakeSkinId, undefined, skin.file_path);
    }
  };

  return (
    <Button
      className={cn(
        "w-full py-6 px-1 bg-primary dark:bg-primary/20 gap-0 rounded-lg overflow-hidden transition-all duration-300",
        isSelected ? "ring-2 ring-primary" : ""
      )}
      onClick={handleClick}
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
    >
      <div className="p-2">
        {!isSelected && <Play className="size-8" />}
        {isSelected && <Check className="size-8 text-primary" />}
      </div>

      <div className="flex justify-between gap-2 px-2 items-center w-full">
        <h3 className="text-lg font-semibold text-white drop-shadow-md">
          {skin.name}
        </h3>
        <div
          role="button"
          tabIndex={0}
          aria-label={`Delete ${skin.name}`}
          className="h-8 w-8 rounded-full opacity-80 hover:opacity-100 flex items-center justify-center bg-destructive text-destructive-foreground cursor-pointer focus:outline-none focus:ring-2 focus:ring-destructive"
          onClick={(e) => {
            e.stopPropagation();
            confirmDelete();
          }}
          onKeyDown={(e) => {
            if (e.key === "Enter" || e.key === " ") {
              e.preventDefault();
              confirmDelete();
            }
          }}
          style={{
            pointerEvents: isDeleting ? "none" : undefined,
            opacity: isDeleting ? 0.5 : undefined,
          }}
        >
          <Trash2 className="h-4 w-4" />
        </div>
      </div>
    </Button>
  );
}


//-==================== END OF FILE: src\components\CustomSkinItem.tsx ====================-//

//-==================== START OF FILE: src\components\CustomSkinList.tsx ====================-//

"use client";

import React, { useState, Suspense } from "react";
import { useChampions } from "@/lib/hooks/use-champions";
import { CustomSkinItem } from "./CustomSkinItem";
import { Button } from "./ui/button";
import { Plus } from "lucide-react";
import { toast } from "sonner";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "./ui/dialog";
import { Label } from "./ui/label";
import { Input } from "./ui/input";
import { Skeleton } from "./ui/skeleton";
import { useCustomSkins } from "@/lib/hooks/use-custom-skins";

interface CustomSkinListProps {
  championId: number | null;
}

function CustomSkinLoading() {
  return (
    <div className="size-full space-y-3 px-20 py-10">
      {Array.from({ length: 3 }).map((_, i) => (
        <div
          key={i}
          className="w-full py-6 px-1 bg-primary/20 gap-0 rounded-lg overflow-hidden animate-pulse"
        >
          <div className="p-2">
            <Skeleton className="size-8" />
          </div>
          <div className="flex justify-between gap-2 px-2 items-center w-full">
            <Skeleton className="h-6 w-32" />
            <Skeleton className="size-8 rounded-full" />
          </div>
        </div>
      ))}
    </div>
  );
}

export function CustomSkinList({ championId }: CustomSkinListProps) {
  const { champions } = useChampions();
  const { customSkins, uploadCustomSkin, deleteCustomSkin } = useCustomSkins();
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [skinName, setSkinName] = useState("");
  const [isUploading, setIsUploading] = useState(false);

  const champion = championId
    ? champions.find((c) => c.id === championId)
    : null;
  const championCustomSkins =
    championId !== null ? customSkins.get(championId) ?? [] : [];

  const handleAddNewSkin = () => {
    if (!championId) {
      toast.error("Please select a champion first");
      return;
    }
    setIsDialogOpen(true);
  };

  const handleUploadSkin = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!championId) return;

    setIsUploading(true);
    try {
      const newSkin = await uploadCustomSkin(championId, skinName);
      if (newSkin) {
        setIsDialogOpen(false);
        setSkinName("");
        toast.success("Custom skin uploaded successfully");
      }
    } catch (error) {
      toast.error("Failed to upload custom skin");
      console.error(error);
    } finally {
      setIsUploading(false);
    }
  };

  const handleDeleteSkin = async (skinId: string): Promise<boolean> => {
    try {
      const success = await deleteCustomSkin(skinId);
      if (success) {
        toast.success("Skin deleted successfully");
        return true;
      } else {
        toast.error("Failed to delete skin");
        return false;
      }
    } catch (error) {
      toast.error("An error occurred while deleting the skin");
      return false;
    }
  };

  if (!championId) {
    return (
      <div className="flex flex-col items-center justify-center h-full w-full p-4">
        <p className="text-muted-foreground">
          Please select a champion to view their custom skins.
        </p>
      </div>
    );
  }

  return (
    <Suspense fallback={<CustomSkinLoading />}>
      <div className="size-full space-y-3 px-20 py-10">
        {championCustomSkins.map((skin) => (
          <CustomSkinItem
            key={skin.id}
            skin={skin}
            onDelete={handleDeleteSkin}
          />
        ))}

        {championCustomSkins.length === 0 && (
          <div className="flex flex-col items-center mt-8">
            <p className="text-muted-foreground mb-4">
              No custom skins found for {champion?.name ?? "this champion"}.
            </p>
          </div>
        )}

        <Button
          size={"lg"}
          variant="outline"
          className="w-full border-dashed py-6 mt-1 justify-start"
          onClick={handleAddNewSkin}
        >
          <Plus className="size-8 opacity-50" />
          <span className="text-lg font-medium">Add Custom Skin</span>
        </Button>

        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
          <DialogContent className="sm:max-w-md">
            <DialogHeader>
              <DialogTitle>Add Custom Skin</DialogTitle>
              <DialogDescription>
                Upload a custom skin file (.fantome) for{" "}
                {champion?.name ?? "your champion"}
              </DialogDescription>
            </DialogHeader>

            <form onSubmit={handleUploadSkin}>
              <div className="grid gap-4 py-4">
                <div className="flex flex-col gap-2">
                  <Label htmlFor="skinName">Skin Name</Label>
                  <Input
                    id="skinName"
                    name="skinName"
                    value={skinName}
                    onChange={(e) => {
                      setSkinName(e.target.value);
                    }}
                    placeholder="Enter a name for this skin"
                  />
                </div>
              </div>

              <DialogFooter>
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => {
                    setIsDialogOpen(false);
                    setSkinName("");
                  }}
                  disabled={isUploading}
                >
                  Cancel
                </Button>
                <Button
                  type="submit"
                  disabled={isUploading || !skinName.trim()}
                >
                  {isUploading ? "Uploading..." : "Upload Skin"}
                </Button>
              </DialogFooter>
            </form>
          </DialogContent>
        </Dialog>
      </div>
    </Suspense>
  );
}


//-==================== END OF FILE: src\components\CustomSkinList.tsx ====================-//

//-==================== START OF FILE: src\components\DownloadingModal.tsx ====================-//

"use client";

import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { DataUpdateProgress, DataUpdateResult } from "@/lib/types";
import { useEffect, useState, useTransition } from "react";
import { toast } from "sonner";
import { invoke } from "@tauri-apps/api/core";

interface DownloadingModalProps {
  isOpen: boolean;
  onClose: () => void;
  progress: DataUpdateProgress | null;
}

export function DownloadingModal({
  isOpen,
  onClose,
  progress,
}: DownloadingModalProps) {
  const [isPending, startTransition] = useTransition();
  const [updateResult, setUpdateResult] = useState<DataUpdateResult | null>(
    null
  );
  const [checkingForUpdates, setCheckingForUpdates] = useState(false);
  const [updatingData, setUpdatingData] = useState(false);

  // Check for GitHub updates when the modal is opened
  useEffect(() => {
    if (isOpen) {
      checkForUpdates();
    }
  }, [isOpen]);

  // Function to check for updates from GitHub
  const checkForUpdates = () => {
    setCheckingForUpdates(true);

    startTransition(async () => {
      try {
        const result = await invoke<DataUpdateResult>("check_github_updates");
        setUpdateResult(result);
        console.log("Update check result:", result);
      } catch (error) {
        console.error("Failed to check for updates:", error);
        toast.error("Failed to check for updates");
      } finally {
        setCheckingForUpdates(false);
      }
    });
  };

  // Function to pull updates from GitHub
  const pullUpdates = () => {
    setUpdatingData(true);

    startTransition(async () => {
      try {
        const updateToast = toast.loading("Updating data from GitHub...");
        const result = await invoke<DataUpdateResult>(
          "update_champion_data_from_github"
        );

        toast.dismiss(updateToast);

        if (result.success) {
          toast.success(
            `Update completed successfully! ${
              result.updatedChampions?.length ?? 0
            } champions updated.`
          );
          setUpdateResult(result);
        } else {
          toast.error(`Update failed: ${result.error ?? "Unknown error"}`);
        }
      } catch (error) {
        console.error("Failed to update data:", error);
        toast.error(`Failed to update data: ${error}`);
      } finally {
        setUpdatingData(false);
      }
    });
  };

  const getStatusMessage = () => {
    if (checkingForUpdates) return "Checking for updates...";
    if (updatingData) return "Updating data...";
    if (!progress) return "Initializing...";

    switch (progress.status) {
      case "checking":
        return "Checking for updates...";
      case "downloading":
        return "Downloading updates...";
      case "processing":
        return `Processing ${progress.currentChampion}...`;
      default:
        return "Processing updates...";
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>
      <DialogContent className="sm:max-w-md">
        <div className="flex flex-col space-y-4">
          <DialogHeader>
            <DialogTitle>Data Updates</DialogTitle>
            <p className="text-sm text-muted-foreground animate-in fade-in-50 duration-300">
              {getStatusMessage()}
            </p>
          </DialogHeader>

          {/* Regular progress indicator for initial data download */}
          {progress && !updateResult && (
            <div className="space-y-2 animate-in fade-in-50 duration-300">
              <Progress
                value={progress.progress}
                className={`transition-all duration-300 ${
                  isPending ? "opacity-50" : "opacity-100"
                }`}
              />
              <div className="flex justify-between text-xs text-muted-foreground">
                <span>{Math.round(progress.progress)}%</span>
                <span>
                  {progress.processedChampions} of {progress.totalChampions}{" "}
                  champions
                </span>
              </div>
              <p className="text-xs text-muted-foreground text-right animate-in slide-in-from-right-5">
                {progress.currentChampion &&
                  `Currently processing: ${progress.currentChampion}`}
              </p>
            </div>
          )}

          {/* GitHub update UI */}
          {updateResult && !progress && (
            <div className="space-y-3 animate-in fade-in-50 duration-300">
              <div className="grid grid-cols-2 gap-2 text-sm">
                <span className="text-muted-foreground">Current Version:</span>
                <span className="font-mono">
                  {updateResult.current_version ?? "Not installed"}
                </span>

                <span className="text-muted-foreground">Latest Version:</span>
                <span className="font-mono">
                  {updateResult.available_version ?? "Unknown"}
                </span>
              </div>

              {updateResult.has_update ? (
                <div className="rounded-md bg-muted/50 p-3 border border-border">
                  <p className="text-sm font-medium mb-1">Update Available</p>
                  <p className="text-xs text-muted-foreground mb-3">
                    {updateResult.update_message ??
                      "New data updates are available for download."}
                  </p>
                  <Button
                    size="sm"
                    className="w-full"
                    disabled={updatingData}
                    onClick={pullUpdates}
                  >
                    {updatingData ? "Updating..." : "Update Now"}
                  </Button>
                </div>
              ) : (
                <div className="rounded-md bg-muted/50 p-3 border border-border">
                  <p className="text-sm font-medium flex items-center gap-2">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="16"
                      height="16"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      strokeWidth="2"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      className="text-green-500"
                    >
                      <path d="M20 6L9 17l-5-5" />
                    </svg>
                    Data is up to date
                  </p>
                  <p className="text-xs text-muted-foreground mt-1">
                    You have the latest champion data installed.
                  </p>
                </div>
              )}
            </div>
          )}

          {/* Loading state */}
          {(checkingForUpdates || updatingData) &&
            !progress &&
            !updateResult && (
              <div className="flex flex-col items-center justify-center py-4">
                <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-primary mb-2"></div>
                <p className="text-sm text-muted-foreground">
                  {checkingForUpdates
                    ? "Checking for updates..."
                    : "Updating data..."}
                </p>
              </div>
            )}
        </div>

        <DialogFooter className="mt-4">
          <Button
            variant="outline"
            size="sm"
            onClick={checkForUpdates}
            disabled={checkingForUpdates || updatingData}
          >
            Check for Updates
          </Button>
          <Button size="sm" onClick={onClose} disabled={updatingData}>
            Close
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}


//-==================== END OF FILE: src\components\DownloadingModal.tsx ====================-//

//-==================== START OF FILE: src\components\game-directory\GameDirectorySelector.tsx ====================-//

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { useGameStore } from "@/lib/store";
import { invoke } from "@tauri-apps/api/core";
import { toast } from "sonner";
import { useInitialization } from "@/lib/hooks/use-initialization";

export function GameDirectorySelector() {
  const [isLoading, setIsLoading] = useState(false);
  const { isInitialized } = useInitialization();
  const leaguePath = useGameStore((s) => s.leaguePath);
  const setLeaguePath = useGameStore((s) => s.setLeaguePath);

  const handleSelectDirectory = async () => {
    try {
      setIsLoading(true);
      const path = await invoke<string>("select_league_directory");
      if (path) {
        setLeaguePath(path);
        toast.success("League of Legends directory selected successfully");
      }
    } catch (err) {
      console.error("Failed to select League directory:", err);
      toast.error("Failed to select directory");
    } finally {
      setIsLoading(false);
    }
  };

  const handleAutoDetect = async () => {
    try {
      setIsLoading(true);
      const path = await invoke<string>("auto_detect_league");
      if (path) {
        setLeaguePath(path);
        toast.success("League of Legends installation found");
      }
    } catch (err) {
      console.error("Failed to detect League directory:", err);
      toast.error(
        "Could not find League of Legends installation automatically"
      );
    } finally {
      setIsLoading(false);
    }
  };

  // Don't show anything while initializing to prevent flash
  if (!isInitialized) {
    return null;
  }

  return (
    <main className="flex min-h-full flex-col items-center justify-center p-24">
      <div className="flex flex-col items-center gap-8">
        <h1 className="text-2xl font-bold">Welcome to League Skin Manager</h1>
        <p className="text-muted-foreground">
          Please select your League of Legends installation directory to
          continue
        </p>
        <div className="flex flex-col gap-4 items-center">
          <div className="flex items-center gap-4">
            <Button
              onClick={() => void handleAutoDetect()}
              disabled={isLoading}
              variant="default"
            >
              {isLoading ? "Detecting..." : "Auto-Detect"}
            </Button>
            <Button
              onClick={() => void handleSelectDirectory()}
              disabled={isLoading}
              variant="outline"
            >
              {isLoading ? "Selecting..." : "Browse"}
            </Button>
          </div>
          {leaguePath && (
            <p className="text-sm text-muted-foreground">
              Found at: {leaguePath}
            </p>
          )}
        </div>
      </div>
    </main>
  );
}


//-==================== END OF FILE: src\components\game-directory\GameDirectorySelector.tsx ====================-//

//-==================== START OF FILE: src\components\InjectionStatusDot.tsx ====================-//

import {
  Tooltip,
  TooltipTrigger,
  TooltipContent,
} from "@/components/ui/tooltip";
import { useEffect, useState, useRef } from "react";
import { listen } from "@tauri-apps/api/event";
import { toast } from "sonner";
import { useGameStore } from "@/lib/store";

type Status = "idle" | "injecting" | "success" | "error";

export function InjectionStatusDot() {
  const injectionStatus = useGameStore((s) => s.injectionStatus);
  const setInjectionStatus = useGameStore((s) => s.setInjectionStatus);
  const toastShownRef = useRef<Record<string, boolean>>({});
  const currentInjectionRef = useRef<string | null>(null);

  // Listen for injection start/stop and error events
  useEffect(() => {
    // Setup listeners and store unlisten functions
    let unlistenStatus: () => void = () => {};
    let unlistenError: () => void = () => {};
    let unlistenTerminalLog: () => void = () => {};

    void (async () => {
      // Track terminal logs for warnings during overlay creation
      unlistenTerminalLog = await listen<string>("terminal-log", (e) => {
        const logMsg = e.payload;

        // If we see a log that indicates we're retrying, mark this as a retry situation
        if (
          logMsg.includes("Retrying overlay creation") ||
          logMsg.includes("Access violation error") ||
          logMsg.includes("Running garbage collection") ||
          logMsg.includes("Overlay creation failed")
        ) {
          currentInjectionRef.current = "retrying";
          // Dismiss any error toasts that might have been shown
          toast.dismiss();
        }

        // Clear any existing error toasts when we see a success message
        if (
          logMsg.includes("Overlay creation succeeded") ||
          logMsg.includes("Overlay process started successfully") ||
          logMsg.includes("Skin injection completed successfully")
        ) {
          // Clear any error toasts since we recovered
          if (
            currentInjectionRef.current === "retrying" ||
            currentInjectionRef.current === "injecting"
          ) {
            // We've recovered from a retry, waiting for final success
            currentInjectionRef.current = "recovered";
            // Dismiss any error toasts that might have been shown
            toast.dismiss();
          }
        }
      });

      unlistenStatus = await listen("injection-status", (e) => {
        const status = e.payload;
        if (status === "injecting") {
          setInjectionStatus("injecting");
          // Reset toast tracking when starting new injection
          toastShownRef.current = {};
          currentInjectionRef.current = "injecting";
        } else if (status === "completed" || status === "success") {
          // In all cases, success overwrites any previous state
          setInjectionStatus("success");
          // Hide any pending error toasts
          toast.dismiss();

          // Only show success toast if we haven't already shown one
          if (!toastShownRef.current.success) {
            toast.success("Skin injection completed successfully");
            toastShownRef.current.success = true;
          }
          currentInjectionRef.current = null;
        } else if (status === "error") {
          // Only show error toast if we're not in a retry situation or if injection has actually failed
          if (
            currentInjectionRef.current !== "retrying" &&
            currentInjectionRef.current !== "recovered"
          ) {
            setInjectionStatus("error");
            // Error message handled by separate event
          }
        } else {
          // Default to idle for any other status
          setInjectionStatus("idle");
          currentInjectionRef.current = null;
        }
      });
      unlistenError = await listen<string>("skin-injection-error", (e) => {
        // Only show actual errors, not temporary failures during retries
        if (
          currentInjectionRef.current !== "retrying" &&
          currentInjectionRef.current !== "recovered"
        ) {
          setInjectionStatus("error");
          // Only show error toast if we haven't shown one for this error
          if (!toastShownRef.current.error) {
            // Add a small delay to allow for potential success events to arrive first
            // This helps prevent showing errors that get immediately fixed by retries
            setTimeout(() => {
              // Check again if we're in a retry or recovery state before showing error
              if (
                currentInjectionRef.current !== "retrying" &&
                currentInjectionRef.current !== "recovered" &&
                currentInjectionRef.current !== null
              ) {
                toast.error(`Skin injection failed: ${e.payload}`);
                toastShownRef.current.error = true;
              }
            }, 500);
          }
        }
      });
    })();

    return () => {
      unlistenStatus();
      unlistenError();
      unlistenTerminalLog();
    };
  }, [setInjectionStatus]);

  // Auto-reset back to idle after showing success/error
  useEffect(() => {
    if (injectionStatus === "success" || injectionStatus === "error") {
      const t = setTimeout(() => {
        setInjectionStatus("idle");
        // Clear toast tracking when returning to idle
        toastShownRef.current = {};
        currentInjectionRef.current = null;
      }, 5000); // Extended time to 5 seconds to make status more visible

      return () => {
        clearTimeout(t);
      };
    }
  }, [injectionStatus, setInjectionStatus]);

  // Map status to color, label, animation
  let color = "";
  let animate = "";
  let label = "";

  switch (injectionStatus) {
    case "injecting":
      color = "bg-yellow-400";
      animate = "animate-pulse";
      label = "Injecting skins...";
      break;
    case "success":
      color = "bg-green-500";
      label = "Injection successful";
      break;
    case "error":
      color = "bg-red-500";
      label = "Injection failed";
      break;
    default:
      color = "bg-gray-500";
      label = "Ready";
  }

  return (
    <Tooltip>
      <TooltipTrigger asChild>
        <div
          className={`size-3 aspect-square shrink-0 rounded-full border border-border ${color} ${animate}`}
          aria-label={label}
        />
      </TooltipTrigger>
      <TooltipContent>{label}</TooltipContent>
    </Tooltip>
  );
}


//-==================== END OF FILE: src\components\InjectionStatusDot.tsx ====================-//

//-==================== START OF FILE: src\components\layout\TopBar.tsx ====================-//

"use client";

import { invoke } from "@tauri-apps/api/core";
import { Button } from "@/components/ui/button";
import { RefreshCw, Menu, Zap } from "lucide-react";
import { toast } from "sonner";
import { InjectionStatusDot } from "@/components/InjectionStatusDot";
import { TitleBar } from "@/components/ui/titlebar/TitleBar";
import { ChampionSearch } from "@/components/ChampionSearch";
import {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
} from "@/components/ui/dropdown-menu";
import { TerminalLogsDialog } from "@/components/TerminalLogsDialog";
import { SettingsDialog } from "@/components/SettingsDialog";
import { PartyModeDialog } from "@/components/PartyModeDialog";
import { useGameStore, SkinTab } from "@/lib/store";
import { useEffect } from "react";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Champion } from "@/lib/types";
import React from "react";

interface TopBarProps {
  champions: Champion[];
  selectedChampionId: number | null;
  searchQuery: string;
  onSearchChange: (query: string) => void;
  onChampionSelect: (id: number) => void;
  onUpdateData: () => void;
}

export const TopBar = React.memo(function TopBar({
  champions,
  selectedChampionId,
  searchQuery,
  onSearchChange,
  onChampionSelect,
  onUpdateData,
}: TopBarProps) {
  // Only subscribe to the specific state needed
  const activeTab = useGameStore((s) => s.activeTab);
  const setActiveTab = useGameStore((s) => s.setActiveTab);
  const selectedSkins = useGameStore((s) => s.selectedSkins);

  // Load saved tab preference from localStorage
  useEffect(() => {
    if (typeof window !== "undefined") {
      const savedTab = localStorage.getItem("activeSkinsTab") as SkinTab | null;
      if (savedTab) {
        setActiveTab(savedTab);
      }
    }
  }, [setActiveTab]);

  // Force update by deleting cache and updating
  async function handleForceUpdateData() {
    try {
      toast.promise(
        async () => {
          // Delete champion cache first
          await invoke("delete_champions_cache");
          // Then run update
          onUpdateData();
        },
        {
          loading: "Clearing cached data...",
          success: "Cache cleared successfully, updating champion data",
          error: "Failed to clear champion cache",
        }
      );
    } catch (error) {
      console.error("Error during force update:", error);
    }
  }

  function handleForceInject() {
    if (!selectedChampionId) {
      toast.error("No champion selected for force injection");
      return;
    }
    const selectedSkin = selectedSkins.get(selectedChampionId);
    if (!selectedSkin) {
      toast.error("No skin selected for this champion");
      return;
    }
    toast.promise(
      invoke("force_inject_selected_skin", {
        championId: selectedChampionId,
      }),
      {
        loading: "Injecting skin...",
        success: "Skin injected successfully!",
        error: "Failed to inject skin",
      }
    );
  }

  return (
    <div
      data-tauri-drag-region
      onMouseDown={(e) => {
        if (
          (e.target as HTMLElement).closest("[data-tauri-drag-region]") &&
          !(e.target as HTMLElement).closest(
            "button, input, [role='button'], [role='combobox']"
          )
        ) {
          // Use the WebviewWindow API for window dragging
          import("@tauri-apps/api/webviewWindow")
            .then(({ getCurrentWebviewWindow }) => {
              const appWindow = getCurrentWebviewWindow();
              appWindow.startDragging().catch((error: unknown) => {
                console.error("Failed to start dragging:", error);
              });
            })
            .catch((error: unknown) => {
              console.error(error);
            });
        }
      }}
      className="flex flex-col w-full mx-auto bg-primary/10 border-b"
    >
      <div className="flex items-center justify-between gap-4 p-2 w-full mx-auto">
        <div className="relative flex items-center w-1/3 xl:w-1/4">
          <ChampionSearch
            champions={champions}
            onSelect={onChampionSelect}
            selectedChampionId={selectedChampionId}
            searchQuery={searchQuery}
            onSearchChange={onSearchChange}
          />
        </div>
        <div className="w-full flex items-center gap-4 z-10">
          <Tabs
            value={activeTab}
            onValueChange={(value) => {
              setActiveTab(value as SkinTab);
            }}
            className="w-full justify-center items-center"
          >
            <TabsList>
              <TabsTrigger value="official">Official</TabsTrigger>
              <TabsTrigger value="custom">Custom</TabsTrigger>
            </TabsList>
          </Tabs>

          <InjectionStatusDot />

          {/* Update Data button always visible but disabled in custom tab */}
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" size="icon" aria-label="Menu">
                <Menu className="h-5 w-5" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent className="min-w-50" align="end">
              <PartyModeDialog />
              <DropdownMenuItem
                onClick={() => {
                  onUpdateData();
                }}
                className="flex items-center gap-2"
              >
                <RefreshCw />
                Check for Updates
              </DropdownMenuItem>
              <DropdownMenuItem
                onClick={() => {
                  void handleForceUpdateData();
                }}
                className="flex items-center gap-2"
                disabled={activeTab === "custom"}
              >
                <RefreshCw className="h-4 w-4" />
                Force Update Data
              </DropdownMenuItem>
              <DropdownMenuItem
                onClick={handleForceInject}
                className="flex items-center gap-2"
                disabled={!selectedChampionId}
              >
                <Zap className="h-4 w-4 text-yellow-500" />
                Force Inject Selected Skin
              </DropdownMenuItem>
              <TerminalLogsDialog />
              <SettingsDialog />
            </DropdownMenuContent>
          </DropdownMenu>
          <TitleBar />
        </div>
      </div>
    </div>
  );
});


//-==================== END OF FILE: src\components\layout\TopBar.tsx ====================-//

//-==================== START OF FILE: src\components\PartyModeDialog.tsx ====================-//

import React, { useState, useEffect } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogTrigger,
  DialogFooter,
  DialogClose,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { DropdownMenuItem, DropdownMenuSeparator } from "./ui/dropdown-menu";
import { useGameStore } from "@/lib/store";
import { invoke } from "@tauri-apps/api/core";
import { toast } from "sonner";
import { Users, UserCheck, UserX, RefreshCw, MailCheck } from "lucide-react";
import { Label } from "./ui/label";
import { Separator } from "./ui/separator";
import { ScrollArea } from "./ui/scroll-area";
import { useSkinSync } from "@/lib/hooks/use-skin-sync";
import {
  AlertDialog,
  AlertDialogDescription,
  AlertDialogTitle,
} from "./ui/alert-dialog";
import { shallow } from "zustand/shallow";
import { usePartyFriends } from "@/lib/hooks/use-party-friends";

interface Friend {
  name: string;
  id: string;
  availability: "online" | "away" | "offline" | "in-game";
  game?: string;
  inParty?: boolean;
}

function PartyMemberList({
  members,
  onRemove,
  getAvailabilityColor,
}: {
  members: { id: string; name: string; availability: string }[];
  onRemove: (id: string) => void;
  getAvailabilityColor: (availability: string) => string;
}) {
  return (
    <>
      <p className="text-sm font-medium">Active Party ({members.length}/5)</p>
      {members.map((member) => (
        <div
          key={member.id}
          className="flex items-center justify-between p-2 rounded-lg bg-primary/10"
        >
          <div className="flex items-center gap-2">
            <div
              className={`h-3 w-3 rounded-full ${getAvailabilityColor(
                member.availability
              )}`}
            ></div>
            <span>{member.name}</span>
          </div>
          <Button
            size="sm"
            variant="destructive"
            onClick={() => onRemove(member.id)}
          >
            Remove
          </Button>
        </div>
      ))}
      <Separator className="my-2" />
    </>
  );
}

function FriendList({
  friends,
  activePartyMembers,
  onSync,
  getAvailabilityColor,
}: {
  friends: { id: string; name: string; availability: string; game?: string }[];
  activePartyMembers: { id: string }[];
  onSync: (id: string, name: string) => void;
  getAvailabilityColor: (availability: string) => string;
}) {
  return (
    <>
      <p className="text-sm font-medium">Available Friends</p>
      {friends
        .filter((friend) => !activePartyMembers.some((m) => m.id === friend.id))
        .map((friend) => (
          <div
            key={friend.id}
            className="flex items-center justify-between p-2 rounded-lg hover:bg-primary/5"
          >
            <div className="flex items-center gap-2">
              <div
                className={`h-3 w-3 rounded-full ${getAvailabilityColor(
                  friend.availability
                )}`}
              ></div>
              <span>{friend.name}</span>
              {friend.game && (
                <span className="text-xs text-muted-foreground ml-1">
                  {friend.game}
                </span>
              )}
            </div>
            <Button
              size="sm"
              variant="outline"
              onClick={() => onSync(friend.id, friend.name)}
            >
              Sync
            </Button>
          </div>
        ))}
    </>
  );
}

export const PartyModeDialog = React.memo(function PartyModeDialog() {
  const [isOpen, setIsOpen] = useState(false);
  const [checkingRequests, setCheckingRequests] = useState(false);
  const leaguePath = useGameStore((s) => s.leaguePath);
  const selectedSkins = useGameStore((s) => s.selectedSkins);
  const {
    sendSyncRequest,
    acceptSync,
    rejectSync,
    pendingSyncRequest,
    activePartyMembers,
    checkPendingSyncRequests,
  } = useSkinSync();
  const { friends, isLoading, fetchFriends } = usePartyFriends(leaguePath);

  // Fetch friends when the dialog opens
  useEffect(() => {
    if (isOpen) {
      fetchFriends();
      // Also check for pending sync requests when dialog opens
      handleCheckPendingRequests();
    }
  }, [isOpen]);

  const handleCheckPendingRequests = async () => {
    if (!leaguePath) {
      toast.error(
        "League path not set. Please configure your League of Legends path in settings."
      );
      return;
    }

    setCheckingRequests(true);
    try {
      await checkPendingSyncRequests(true);
      toast.info("Checked for pending sync requests");
    } catch (error) {
      console.error("Error checking for pending requests:", error);
    } finally {
      setCheckingRequests(false);
    }
  };

  const handleSyncRequest = async (friendId: string, friendName: string) => {
    try {
      await sendSyncRequest(friendId, friendName);
      toast.success(`Sync request sent to ${friendName}`);
    } catch (err) {
      console.error(`Failed to send sync request to ${friendName}:`, err);
      toast.error(`Failed to send sync request to ${friendName}`);
    }
  };

  const getAvailabilityColor = (availability: string) => {
    switch (availability) {
      case "online":
        return "bg-green-500";
      case "away":
        return "bg-yellow-500";
      case "in-game":
        return "bg-blue-500";
      default:
        return "bg-gray-500";
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <DropdownMenuItem
          onSelect={(e) => {
            e.preventDefault();
            setIsOpen(true);
          }}
        >
          <Users className="h-4 w-4" />
          Party Mode
        </DropdownMenuItem>
      </DialogTrigger>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center justify-between">
            <span>Party Mode</span>
            <Button
              variant="outline"
              size="sm"
              onClick={handleCheckPendingRequests}
              disabled={checkingRequests || !leaguePath}
            >
              <MailCheck
                className={`h-4 w-4 mr-2 ${
                  checkingRequests ? "animate-spin" : ""
                }`}
              />
              Check Invites
            </Button>
          </DialogTitle>
          <DialogDescription>
            Share your skin selections with friends. When in a party, each
            player will see the others' selected skins.
          </DialogDescription>
        </DialogHeader>

        {pendingSyncRequest && (
          <AlertDialog>
            <AlertDialogTitle>
              Sync Request from{" "}
              {pendingSyncRequest.memberName || pendingSyncRequest.memberId}
            </AlertDialogTitle>
            <AlertDialogDescription>
              {pendingSyncRequest.memberName || pendingSyncRequest.memberId}{" "}
              wants to sync skin selections with you. Accept to see each other's
              skins in game.
            </AlertDialogDescription>
            <div className="flex gap-2 mt-2">
              <Button
                onClick={() =>
                  acceptSync(
                    pendingSyncRequest.memberId,
                    pendingSyncRequest.memberName || pendingSyncRequest.memberId
                  )
                }
                size="sm"
              >
                <UserCheck className="mr-2 h-4 w-4" />
                Accept
              </Button>
              <Button
                onClick={() => rejectSync(pendingSyncRequest.memberId)}
                variant="outline"
                size="sm"
              >
                <UserX className="mr-2 h-4 w-4" />
                Decline
              </Button>
            </div>
          </AlertDialog>
        )}

        <div className="grid gap-4 py-4">
          <div className="grid grid-cols-1 gap-2">
            <div className="flex items-center justify-between">
              <Label>Friends ({friends.length})</Label>
              <Button
                variant="ghost"
                size="sm"
                onClick={fetchFriends}
                disabled={isLoading}
              >
                <RefreshCw
                  className={`h-4 w-4 ${isLoading ? "animate-spin" : ""}`}
                />
              </Button>
            </div>

            <ScrollArea className="h-72 rounded-md border">
              {friends.length === 0 ? (
                <div className="flex flex-col items-center justify-center h-full text-muted-foreground p-4">
                  {isLoading ? "Loading friends..." : "No friends found"}
                </div>
              ) : (
                <div className="p-4 space-y-2">
                  {activePartyMembers.length > 0 && (
                    <PartyMemberList
                      members={activePartyMembers}
                      onRemove={rejectSync}
                      getAvailabilityColor={getAvailabilityColor}
                    />
                  )}

                  <FriendList
                    friends={friends}
                    activePartyMembers={activePartyMembers}
                    onSync={handleSyncRequest}
                    getAvailabilityColor={getAvailabilityColor}
                  />
                </div>
              )}
            </ScrollArea>
          </div>
        </div>

        <DialogFooter>
          <DialogClose asChild>
            <Button variant="default">Close</Button>
          </DialogClose>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
});


//-==================== END OF FILE: src\components\PartyModeDialog.tsx ====================-//

//-==================== START OF FILE: src\components\providers\TerminalLogListener.tsx ====================-//

"use client";
import { useEffect } from "react";
import { listen } from "@tauri-apps/api/event";
import { useTerminalLogStore, TerminalLog } from "@/lib/store";

export function TerminalLogListener() {
  useEffect(() => {
    const unlisten = listen("terminal-log", (event) => {
      const log = event.payload as TerminalLog;
      if (
        log &&
        typeof log === "object" &&
        "message" in log &&
        "log_type" in log &&
        "timestamp" in log
      ) {
        useTerminalLogStore.getState().addLog(log);
      }
    });
    return () => {
      void unlisten.then((fn) => fn());
    };
  }, []);
  return null;
}


//-==================== END OF FILE: src\components\providers\TerminalLogListener.tsx ====================-//

//-==================== START OF FILE: src\components\providers\ThemeInitializer.tsx ====================-//

// File removed as part of theming refactor. Theme tone logic will be handled by ThemeToneProvider.


//-==================== END OF FILE: src\components\providers\ThemeInitializer.tsx ====================-//

//-==================== START OF FILE: src\components\providers\ThemeToneProvider.tsx ====================-//

"use client";

import React, {
  createContext,
  useContext,
  useState,
  useEffect,
  useCallback,
} from "react";
import { useTheme } from "next-themes";
import { invoke } from "@tauri-apps/api/core";
import { TONES, setThemeToneVars, THEME_TONE_KEY } from "../ThemeToneSelector";

interface ThemeToneContextProps {
  tone: string;
  setTone: (tone: string) => void;
  isDark: boolean;
  toggleTheme: (isDark: boolean) => void;
  initialized: boolean;
  isTransitioning: boolean;
}

const ThemeToneContext = createContext<ThemeToneContextProps | undefined>(
  undefined
);

export const ThemeToneProvider = ({
  children,
}: {
  children: React.ReactNode;
}) => {
  const [tone, setToneState] = useState<string>("gray");
  const [initialized, setInitialized] = useState(false);
  const [isTransitioning, setIsTransitioning] = useState(false);
  const { theme, setTheme, resolvedTheme } = useTheme();

  const isDark = theme === "dark" || resolvedTheme === "dark";

  useEffect(() => {
    const loadThemePreferences = async () => {
      try {
        interface ThemeConfig {
          league_path?: string;
          skins?: unknown[];
          favorites?: unknown[];
          theme?: {
            tone?: string;
            isDark?: boolean;
          };
        }
        const config = (await invoke("load_config").catch(
          () => null
        )) as ThemeConfig | null;
        let savedTone = config?.theme?.tone;
        if (!savedTone && typeof window !== "undefined") {
          const storedTone = localStorage.getItem(THEME_TONE_KEY);
          savedTone = storedTone ?? undefined;
        }
        if (savedTone) {
          setToneState(savedTone);
        }
        setInitialized(true);
      } catch (error) {
        setInitialized(true);
      }
    };
    void loadThemePreferences();
  }, []);

  const setTone = useCallback(
    (newTone: string) => {
      setToneState(newTone);
      void saveThemePreferences(newTone, isDark);
    },
    [isDark]
  );

  const saveThemePreferences = async (tone: string, isDark: boolean) => {
    try {
      if (typeof window !== "undefined") {
        localStorage.setItem(THEME_TONE_KEY, tone);
      }
      interface ThemeConfig {
        league_path?: string;
        skins?: unknown[];
        favorites?: unknown[];
        theme?: {
          tone?: string;
          isDark?: boolean;
        };
      }
      const config: ThemeConfig = (await invoke("load_config").catch(
        () => ({})
      )) as ThemeConfig;
      const updatedConfig = {
        ...config,
        league_path: config.league_path ?? "",
        skins: config.skins ?? [],
        favorites: config.favorites ?? [],
        theme: {
          tone,
          isDark,
        },
      };
      await invoke("save_selected_skins", {
        leaguePath: updatedConfig.league_path,
        skins: updatedConfig.skins,
        favorites: updatedConfig.favorites,
        theme: updatedConfig.theme,
      }).catch(() => {});
    } catch {}
  };

  const toggleTheme = useCallback(
    (newIsDark: boolean) => {
      if (isTransitioning) return;
      if (typeof document !== "undefined") {
        document.documentElement.classList.add("transitioning-theme");
      }
      setIsTransitioning(true);
      setTheme(newIsDark ? "dark" : "light");
      void saveThemePreferences(tone, newIsDark);
      const transitionDuration = 250;
      setTimeout(() => {
        if (typeof document !== "undefined") {
          document.documentElement.classList.remove("transitioning-theme");
        }
        setIsTransitioning(false);
      }, transitionDuration);
    },
    [tone, setTheme, isTransitioning]
  );

  useEffect(() => {
    if (!initialized) return;
    if (isTransitioning) return;
    const selected = TONES.find((t) => t.value === tone) ?? TONES[1];
    const applyVars = () => {
      setThemeToneVars(selected.palette, isDark);
    };
    if (typeof window !== "undefined") {
      window.requestAnimationFrame(applyVars);
    } else {
      applyVars();
    }
  }, [tone, isDark, initialized, isTransitioning]);

  return (
    <ThemeToneContext.Provider
      value={{
        tone,
        setTone,
        isDark,
        toggleTheme,
        initialized,
        isTransitioning,
      }}
    >
      {children}
    </ThemeToneContext.Provider>
  );
};

export function useThemeToneContext() {
  const ctx = useContext(ThemeToneContext);
  if (!ctx)
    throw new Error(
      "useThemeToneContext must be used within ThemeToneProvider"
    );
  return ctx;
}


//-==================== END OF FILE: src\components\providers\ThemeToneProvider.tsx ====================-//

//-==================== START OF FILE: src\components\SettingsDialog.tsx ====================-//

import { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogTrigger,
  DialogFooter,
  DialogClose,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useGameStore } from "@/lib/store";
import { toast } from "sonner";
import { Settings } from "lucide-react";
import { DropdownMenuItem } from "./ui/dropdown-menu";
import { Label } from "./ui/label";
import { ThemeToneSelector } from "./ThemeToneSelector";
import { Separator } from "./ui/separator";
import { useLeagueDirectory } from "@/lib/hooks/use-league-directory";
import { Switch } from "@/components/ui/switch";

export function SettingsDialog() {
  const [isOpen, setIsOpen] = useState(false);
  const leaguePath = useGameStore((s) => s.leaguePath);
  const setLeaguePath = useGameStore((s) => s.setLeaguePath);
  const autoUpdateData = useGameStore((s) => s.autoUpdateData);
  const setAutoUpdateData = useGameStore((s) => s.setAutoUpdateData);
  const { isLoading, handleSelectDirectory, handleAutoDetect } =
    useLeagueDirectory(setLeaguePath);

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <DropdownMenuItem
          onSelect={(e) => {
            e.preventDefault();
            setIsOpen(true);
          }}
        >
          <Settings className="size-4" />
          Settings
        </DropdownMenuItem>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Settings</DialogTitle>
          <DialogDescription>Manage your settings.</DialogDescription>
        </DialogHeader>
        {/* Auto-update switch */}
        <div className="flex items-center justify-between">
          <Label>Auto Update Champion Data</Label>
          <Switch
            checked={autoUpdateData}
            onCheckedChange={setAutoUpdateData}
          />
        </div>

        <Separator />

        <ThemeToneSelector />

        <Separator />

        <div className="grid gap-4">
          <div className="grid grid-cols-1 gap-2">
            <Label htmlFor="leaguePath">League of Legends Path</Label>
            <Input
              id="leaguePath"
              value={leaguePath ?? ""}
              readOnly
              className="flex-1"
            />
            <div className="flex gap-2">
              <Button
                onClick={() => {
                  void handleAutoDetect();
                }}
                disabled={isLoading}
                className="flex-1"
                variant="secondary"
              >
                {isLoading ? "Detecting..." : "Detect"}
              </Button>
              <Button
                variant="outline"
                onClick={() => {
                  void handleSelectDirectory();
                }}
                disabled={isLoading}
                className="flex-1"
              >
                Browse
              </Button>
            </div>
          </div>
        </div>

        {/* Watermark Notice */}
        <div className="text-xs text-center mt-2 select-none">
          This app is 100% free do not buy it from anyone. Join our community at{" "}
          <a
            href="https://discord.gg/tHyHnx5DKX"
            target="_blank"
            rel="noopener noreferrer"
            className="underline"
          >
            https://discord.gg/tHyHnx5DKX
          </a>
        </div>

        <DialogFooter>
          <DialogClose asChild>
            <Button variant="default">Close</Button>
          </DialogClose>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}


//-==================== END OF FILE: src\components\SettingsDialog.tsx ====================-//

//-==================== START OF FILE: src\components\SkinCard.tsx ====================-//

import React, { Suspense } from "react";
import { cn } from "@/lib/utils";
import { ChromaSelector } from "./ChromaSelector";
import Image from "next/image";
import { Card, CardContent, CardFooter } from "./ui/card";
import { Check, Play } from "lucide-react";
import { Skin } from "@/lib/types";
import { Skeleton } from "./ui/skeleton";
import { useSkinCardLogic } from "@/lib/hooks/use-skin-card-logic";

interface SkinCardProps {
  championId: number;
  skin: Skin;
}

export const SkinCard = React.memo(function SkinCard({
  championId,
  skin,
}: SkinCardProps) {
  const {
    cardRef,
    selectedChroma,
    isHovering,
    imgLoaded,
    isSelected,
    currentImageSrc,
    handleMouseEnter,
    handleMouseLeave,
    handleClick,
    handleChromaSelect,
    setImgLoaded,
  } = useSkinCardLogic(championId, skin);

  return (
    <Card
      ref={cardRef}
      className={cn(
        "size-full relative cursor-pointer p-0 rounded-none overflow-hidden transition-all duration-300",
        isSelected ? "ring-2 ring-primary" : ""
      )}
      onClick={handleClick}
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
    >
      {!imgLoaded && <Skeleton className="absolute inset-0 w-full h-full" />}
      {currentImageSrc && (
        <Image
          src={currentImageSrc}
          alt={selectedChroma?.name ?? skin.name}
          width={308}
          height={560}
          className={cn(
            "object-cover transition-opacity duration-300",
            imgLoaded ? "opacity-100" : "opacity-0"
          )}
          onLoad={() => setImgLoaded(true)}
          onLoadingComplete={() => setImgLoaded(true)}
          placeholder="blur"
          blurDataURL="/osskins-screenshot.png" // fallback placeholder, replace with a real LQIP if available
          priority={false}
        />
      )}
      {isSelected && (
        <div className="absolute inset-0 flex items-center justify-center bg-black/40 z-10">
          <div className="bg-primary/20 p-2 rounded-full">
            <Check className="size-8 text-primary" />
          </div>
        </div>
      )}
      {/* Play button overlay on hover */}
      {!isSelected && isHovering && (
        <div className="absolute inset-0 flex items-center justify-center bg-black/40 z-10">
          <div className="bg-primary/20 p-2 rounded-full">
            <Play className="size-8" />
          </div>
        </div>
      )}
      <CardFooter className="absolute inset-x-0 bottom-0 bg-gradient-to-t from-black/90 via-black/60 to-transparent p-4 flex flex-col justify-end z-20">
        <div className="w-full h-fit flex items-end justify-between gap-1">
          <h3 className="text-lg font-semibold text-white drop-shadow-md">
            {selectedChroma?.name ?? skin.name}
          </h3>

          {/* Chroma Selector positioned in bottom right */}
          {skin.chromas.length > 0 && (
            <ChromaSelector
              chromas={skin.chromas}
              onSelect={handleChromaSelect}
              selectedChromaId={selectedChroma?.id}
            />
          )}
        </div>
      </CardFooter>
    </Card>
  );
});


//-==================== END OF FILE: src\components\SkinCard.tsx ====================-//

//-==================== START OF FILE: src\components\SkinGrid.tsx ====================-//

import React from "react";
import { Champion } from "@/lib/types";
import { SkinCard } from "./SkinCard";

interface SkinGridProps {
  champion: Champion | null;
}

export const SkinGrid = React.memo(function SkinGrid({
  champion,
}: SkinGridProps) {
  if (!champion) {
    return (
      <div className="flex items-center justify-center h-full text-muted-foreground">
        Select a champion to view their skins
      </div>
    );
  }

  return (
    <div className="grid grid-cols-2 gap-2 md:grid-cols-4 xl:grid-cols-5 size-fit">
      {champion.skins
        .filter((skin) => !skin.isBase)
        .map((skin) => (
          <SkinCard key={skin.id} championId={champion.id} skin={skin} />
        ))}
    </div>
  );
});


//-==================== END OF FILE: src\components\SkinGrid.tsx ====================-//

//-==================== START OF FILE: src\components\TerminalLogsDialog.tsx ====================-//

import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { ScrollArea } from "@/components/ui/scroll-area";
import { useState, useEffect, useRef, useCallback } from "react";
import {
  Terminal,
  Trash2,
  X,
  Copy,
  ArrowDownToLine,
  Filter,
} from "lucide-react";
import {
  DropdownMenuItem,
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuCheckboxItem,
} from "@/components/ui/dropdown-menu";
import { toast } from "sonner";
import clsx from "clsx";
import { useTerminalLogStore, TerminalLog } from "@/lib/store";
import { Switch } from "./ui/switch";

// Log type options for filtering
const LOG_TYPE_LABELS: Record<string, string> = {
  all: "All",
  "lcu-watcher": "LCU Watcher",
  injection: "Injection",
  error: "Error",
  debug: "Debug",
};
const ALL_LOG_TYPES = Object.keys(LOG_TYPE_LABELS).filter((k) => k !== "all");

export function TerminalLogsDialog() {
  const logs = useTerminalLogStore((s) => s.logs);
  const clearLogs = useTerminalLogStore((s) => s.clearLogs);
  const [filter, setFilter] = useState<string[]>(ALL_LOG_TYPES);
  const [autoScroll, setAutoScroll] = useState(true);
  const [isAtBottom, setIsAtBottom] = useState(true);
  const scrollAreaRef = useRef<HTMLDivElement | null>(null);
  const bottomRef = useRef<HTMLDivElement | null>(null);

  // Remove the duplicate event listener - we now use the global TerminalLogListener

  // Scroll to bottom only if following
  useEffect(() => {
    if (autoScroll && isAtBottom) {
      bottomRef.current?.scrollIntoView({ behavior: "smooth" });
    }
  }, [logs, autoScroll, isAtBottom]);

  // Detect if user is at bottom
  const handleScroll = useCallback(() => {
    const el = scrollAreaRef.current;
    if (!el) return;
    const atBottom = el.scrollHeight - el.scrollTop - el.clientHeight < 20;
    setIsAtBottom(atBottom);
  }, []);

  const copyLogs = async () => {
    try {
      await navigator.clipboard.writeText(
        logs
          .filter((log) => filter.length === 0 || filter.includes(log.log_type))
          .map((log) => `[${log.log_type}] ${log.message}`)
          .join("\n")
      );
      toast.success("Logs copied to clipboard");
    } catch {
      toast.error("Failed to copy logs");
    }
  };

  const scrollToBottom = () => {
    bottomRef.current?.scrollIntoView({ behavior: "smooth" });
    setAutoScroll(true);
    setIsAtBottom(true);
  };

  // Multi-select filter logic
  const toggleFilter = (type: string) => {
    setFilter((prev) =>
      prev.includes(type) ? prev.filter((t) => t !== type) : [...prev, type]
    );
  };

  const filteredLogs = logs.filter(
    (log) => filter.length === 0 || filter.includes(log.log_type)
  );

  return (
    <Dialog modal>
      <DialogTrigger asChild>
        <DropdownMenuItem
          onSelect={(e) => {
            e.preventDefault();
          }}
        >
          <Terminal className="h-4 w-4" />
          Terminal Logs
        </DropdownMenuItem>
      </DialogTrigger>
      <DialogContent className="sm:max-w-5xl overflow-y-auto">
        <DialogHeader className="flex flex-row items-center justify-between">
          <DialogTitle>Terminal Logs</DialogTitle>
          <div className="flex flex-row items-center gap-2">
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" size="icon" title="Filter logs">
                  <Filter className="h-4 w-4" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                {Object.entries(LOG_TYPE_LABELS)
                  .filter(([key]) => key !== "all")
                  .map(([key, label]) => (
                    <DropdownMenuCheckboxItem
                      key={key}
                      checked={filter.includes(key)}
                      onCheckedChange={() => toggleFilter(key)}
                    >
                      {label}
                    </DropdownMenuCheckboxItem>
                  ))}
              </DropdownMenuContent>
            </DropdownMenu>
            <Button
              title="Copy"
              variant="outline"
              size="icon"
              onClick={() => {
                void copyLogs();
              }}
              disabled={filteredLogs.length === 0}
            >
              <Copy className="h-4 w-4" />
            </Button>
            <Button
              title="Clear"
              variant="outline"
              size="icon"
              onClick={clearLogs}
            >
              <Trash2 className="h-4 w-4" />
            </Button>
            <DialogClose title="Close" asChild>
              <Button variant="outline" size="icon">
                <X className="h-4 w-4" />
              </Button>
            </DialogClose>
          </div>
        </DialogHeader>
        <ScrollArea
          className="size-full relative h-[500px] max-w-[950px] rounded-md border p-4 font-mono text-sm select-text"
          ref={scrollAreaRef}
          onScroll={handleScroll}
        >
          {filteredLogs.map((log, index) => (
            <div key={index} className="whitespace-pre-wrap">
              <span className="text-xs font-bold mr-2">[{log.log_type}]</span>
              {log.message}
            </div>
          ))}
          <div ref={bottomRef} />
        </ScrollArea>
        {!isAtBottom && autoScroll && (
          <Button
            onClick={scrollToBottom}
            variant="secondary"
            size="icon"
            className={clsx(
              "absolute right-4 bottom-6 z-10 shadow-lg animate-in fade-in",
              "bg-background/80 backdrop-blur"
            )}
            title="Scroll to bottom"
          >
            <ArrowDownToLine className="h-5 w-5" />
          </Button>
        )}
        <div className="flex items-center gap-2">
          <span className="text-xs">Auto Scroll</span>
          <Switch
            checked={autoScroll}
            onCheckedChange={setAutoScroll}
            aria-label="Auto Scroll"
          />
        </div>
      </DialogContent>
    </Dialog>
  );
}


//-==================== END OF FILE: src\components\TerminalLogsDialog.tsx ====================-//

//-==================== START OF FILE: src\components\ThemeToneSelector.tsx ====================-//

"use client";

import { useEffect, useState, useRef, useCallback } from "react";
import { useTheme } from "next-themes";
import { cn } from "@/lib/utils";
import { SunIcon, MoonIcon } from "lucide-react";
import { Switch } from "@/components/ui/switch";
import { invoke } from "@tauri-apps/api/core";
import { toast } from "sonner";
import { useThemeToneContext } from "@/components/providers/ThemeToneProvider";
import { Label } from "./ui/label";

// Define theme tone options with palettes for both light and dark modes
// Now exported so it can be used by ThemeInitializer
export const TONES = [
  {
    name: "Gray",
    value: "gray",
    palette: {
      primary: "oklch(0.55 0 0)",
      background: "oklch(0.98 0 0)",
      backgroundDark: "oklch(0.18 0 0)",
      foreground: "oklch(0.18 0 0)",
      foregroundDark: "oklch(0.98 0 0)",
      border: "oklch(0.85 0 0)",
      borderDark: "oklch(0.25 0 0)",
      accent: "oklch(0.7 0 0)",
      accentDark: "oklch(0.3 0 0)",
      muted: "oklch(0.93 0 0)",
      mutedDark: "oklch(0.22 0 0)",
    },
  },
  {
    name: "Blue",
    value: "blue",
    palette: {
      primary: "oklch(0.65 0.13 250)",
      background: "oklch(0.98 0.02 250)",
      backgroundDark: "oklch(0.22 0.06 250)",
      foreground: "oklch(0.18 0.01 250)",
      foregroundDark: "oklch(0.98 0.01 250)",
      border: "oklch(0.85 0.04 250)",
      borderDark: "oklch(0.3 0.05 250)",
      accent: "oklch(0.7 0.09 250)",
      accentDark: "oklch(0.35 0.09 250)",
      muted: "oklch(0.93 0.02 250)",
      mutedDark: "oklch(0.28 0.03 250)",
    },
  },
  {
    name: "Red",
    value: "red",
    palette: {
      primary: "oklch(0.65 0.18 25)",
      background: "oklch(0.98 0.02 25)",
      backgroundDark: "oklch(0.22 0.09 25)",
      foreground: "oklch(0.18 0.01 25)",
      foregroundDark: "oklch(0.98 0.01 25)",
      border: "oklch(0.85 0.04 25)",
      borderDark: "oklch(0.3 0.06 25)",
      accent: "oklch(0.7 0.09 25)",
      accentDark: "oklch(0.35 0.12 25)",
      muted: "oklch(0.93 0.02 25)",
      mutedDark: "oklch(0.28 0.03 25)",
    },
  },
  {
    name: "Rose",
    value: "rose",
    palette: {
      primary: "oklch(0.7 0.13 20)",
      background: "oklch(0.98 0.02 20)",
      backgroundDark: "oklch(0.22 0.09 20)",
      foreground: "oklch(0.18 0.01 20)",
      foregroundDark: "oklch(0.98 0.01 20)",
      border: "oklch(0.85 0.04 20)",
      borderDark: "oklch(0.3 0.06 20)",
      accent: "oklch(0.7 0.09 20)",
      accentDark: "oklch(0.35 0.12 20)",
      muted: "oklch(0.93 0.02 20)",
      mutedDark: "oklch(0.28 0.03 20)",
    },
  },
  {
    name: "Yellow",
    value: "yellow",
    palette: {
      primary: "oklch(0.9 0.18 100)",
      background: "oklch(0.99 0.03 100)",
      backgroundDark: "oklch(0.32 0.09 100)",
      foreground: "oklch(0.22 0.01 100)",
      foregroundDark: "oklch(0.98 0.01 100)",
      border: "oklch(0.93 0.04 100)",
      borderDark: "oklch(0.38 0.06 100)",
      accent: "oklch(0.8 0.09 100)",
      accentDark: "oklch(0.4 0.12 100)",
      muted: "oklch(0.97 0.02 100)",
      mutedDark: "oklch(0.35 0.03 100)",
    },
  },
  {
    name: "Orange",
    value: "orange",
    palette: {
      primary: "oklch(0.85 0.18 60)",
      background: "oklch(0.99 0.03 60)",
      backgroundDark: "oklch(0.32 0.09 60)",
      foreground: "oklch(0.22 0.01 60)",
      foregroundDark: "oklch(0.98 0.01 60)",
      border: "oklch(0.93 0.04 60)",
      borderDark: "oklch(0.38 0.06 60)",
      accent: "oklch(0.8 0.09 60)",
      accentDark: "oklch(0.4 0.12 60)",
      muted: "oklch(0.97 0.02 60)",
      mutedDark: "oklch(0.35 0.03 60)",
    },
  },
  {
    name: "Green",
    value: "green",
    palette: {
      primary: "oklch(0.7 0.13 140)",
      background: "oklch(0.98 0.02 140)",
      backgroundDark: "oklch(0.22 0.09 140)",
      foreground: "oklch(0.18 0.01 140)",
      foregroundDark: "oklch(0.98 0.01 140)",
      border: "oklch(0.85 0.04 140)",
      borderDark: "oklch(0.3 0.06 140)",
      accent: "oklch(0.7 0.09 140)",
      accentDark: "oklch(0.35 0.12 140)",
      muted: "oklch(0.93 0.02 140)",
      mutedDark: "oklch(0.28 0.03 140)",
    },
  },
  {
    name: "Violet",
    value: "violet",
    palette: {
      primary: "oklch(0.7 0.13 300)",
      background: "oklch(0.98 0.02 300)",
      backgroundDark: "oklch(0.22 0.09 300)",
      foreground: "oklch(0.18 0.01 300)",
      foregroundDark: "oklch(0.98 0.01 300)",
      border: "oklch(0.85 0.04 300)",
      borderDark: "oklch(0.3 0.06 300)",
      accent: "oklch(0.7 0.09 300)",
      accentDark: "oklch(0.35 0.12 300)",
      muted: "oklch(0.93 0.02 300)",
      mutedDark: "oklch(0.28 0.03 300)",
    },
  },
  {
    name: "Cyan",
    value: "cyan",
    palette: {
      primary: "oklch(0.8 0.13 200)",
      background: "oklch(0.98 0.02 200)",
      backgroundDark: "oklch(0.22 0.09 200)",
      foreground: "oklch(0.18 0.01 200)",
      foregroundDark: "oklch(0.98 0.01 200)",
      border: "oklch(0.85 0.04 200)",
      borderDark: "oklch(0.3 0.06 200)",
      accent: "oklch(0.7 0.09 200)",
      accentDark: "oklch(0.35 0.12 200)",
      muted: "oklch(0.93 0.02 200)",
      mutedDark: "oklch(0.28 0.03 200)",
    },
  },
];

// The key used to store tone in localStorage as a backup
export const THEME_TONE_KEY = "theme-tone-preference";

/**
 * Function to apply theme tone variables to the document root
 * Now exported so it can be used by ThemeInitializer
 */
export function setThemeToneVars(
  palette: Record<string, string>,
  isDark: boolean
) {
  if (typeof window === "undefined") return;

  const root = document.documentElement;

  // Set primary color (same for light/dark)
  root.style.setProperty("--primary", palette.primary);

  // Set background based on mode
  root.style.setProperty(
    "--background",
    isDark ? palette.backgroundDark : palette.background
  );

  // Set foreground based on mode
  root.style.setProperty(
    "--foreground",
    isDark ? palette.foregroundDark : palette.foreground
  );

  // Set border based on mode
  root.style.setProperty(
    "--border",
    isDark ? palette.borderDark : palette.border
  );

  // Set accent based on mode
  root.style.setProperty(
    "--accent",
    isDark ? palette.accentDark : palette.accent
  );

  // Set muted based on mode
  root.style.setProperty("--muted", isDark ? palette.mutedDark : palette.muted);
}

/**
 * Save theme preferences both to Tauri config.json and localStorage
 */
async function saveThemePreferences(tone: string, isDark: boolean) {
  try {
    // Save to localStorage as fallback
    if (typeof window !== "undefined") {
      localStorage.setItem(THEME_TONE_KEY, tone);
    }

    // Save to Tauri config
    interface ThemeConfig {
      league_path?: string;
      skins?: unknown[];
      favorites?: unknown[];
      theme?: {
        tone?: string;
        isDark?: boolean;
      };
    }
    const config: ThemeConfig = (await invoke("load_config").catch(
      () => ({})
    )) as ThemeConfig;

    const updatedConfig = {
      ...config,
      league_path: config.league_path ?? "",
      skins: config.skins ?? [],
      favorites: config.favorites ?? [],
      theme: {
        tone,
        isDark,
      },
    };

    await invoke("save_selected_skins", {
      leaguePath: updatedConfig.league_path,
      skins: updatedConfig.skins,
      favorites: updatedConfig.favorites,
      theme: updatedConfig.theme,
    }).catch((err: unknown) => {
      console.error("Failed to save theme to config:", err);
    });

    console.log(`Theme preferences saved: tone=${tone}, isDark=${isDark}`);
  } catch (error) {
    console.error("Failed to save theme preferences:", error);
  }
}

/**
 * Custom hook for theme tone management
 */
export function useThemeTone() {
  // Default to blue tone
  const [tone, setToneState] = useState<string>("gray");
  const [initialized, setInitialized] = useState(false);
  const [isTransitioning, setIsTransitioning] = useState(false);
  const { theme, setTheme, resolvedTheme } = useTheme();

  // Derive isDark from theme or resolvedTheme
  const isDark = theme === "dark" || resolvedTheme === "dark";

  // Load theme tone preference on initial render
  useEffect(() => {
    const loadThemePreferences = async () => {
      try {
        // First, try to load from Tauri config
        interface ThemeConfig {
          league_path?: string;
          skins?: unknown[];
          favorites?: unknown[];
          theme?: {
            tone?: string;
            isDark?: boolean;
          };
        }
        const config = (await invoke("load_config").catch(
          () => null
        )) as ThemeConfig | null;
        let savedTone = config?.theme?.tone;

        // Fallback to localStorage if not found in Tauri config
        if (!savedTone && typeof window !== "undefined") {
          const storedTone = localStorage.getItem(THEME_TONE_KEY);
          savedTone = storedTone ?? undefined;
        }

        // Apply saved tone if found
        if (savedTone) {
          setToneState(savedTone);
        }

        setInitialized(true);
      } catch (error) {
        console.error("Failed to load theme preferences:", error);
        setInitialized(true);
      }
    };

    void loadThemePreferences();
  }, []);

  // Custom setter for tone that also saves the preference
  const setTone = useCallback(
    (newTone: string) => {
      setToneState(newTone);
      void saveThemePreferences(newTone, isDark);
    },
    [isDark]
  );

  // Improved theme toggler with transition class
  const toggleTheme = useCallback(
    (newIsDark: boolean) => {
      if (isTransitioning) return;

      // Add transitioning class to prevent flickering
      if (typeof document !== "undefined") {
        document.documentElement.classList.add("transitioning-theme");
      }

      // Set transitioning state
      setIsTransitioning(true);

      // Change theme
      setTheme(newIsDark ? "dark" : "light");

      // Save preferences
      void saveThemePreferences(tone, newIsDark);

      // Remove transitioning class after the theme change has completed
      const transitionDuration = 250; // slightly longer than CSS transition
      setTimeout(() => {
        if (typeof document !== "undefined") {
          document.documentElement.classList.remove("transitioning-theme");
        }
        setIsTransitioning(false);
      }, transitionDuration);
    },
    [tone, setTheme, isTransitioning]
  );

  // Apply theme variables when tone or dark mode changes
  useEffect(() => {
    if (!initialized) return;

    // Don't make CSS changes during transitions
    if (isTransitioning) return;

    // Get the selected tone palette
    const selected = TONES.find((t) => t.value === tone) ?? TONES[1];

    // Apply CSS variables with a small delay to ensure DOM is ready
    const applyVars = () => {
      setThemeToneVars(selected.palette, isDark);
    };

    // Use requestAnimationFrame for better timing with browser paint cycle
    if (typeof window !== "undefined") {
      window.requestAnimationFrame(applyVars);
    } else {
      applyVars();
    }
  }, [tone, isDark, initialized, isTransitioning]);

  // Provide a clean interface for the component
  return {
    tone,
    setTone,
    isDark,
    toggleTheme,
    initialized,
    isTransitioning,
  };
}

export function ThemeToneSelector() {
  const { tone, setTone, isDark, toggleTheme, isTransitioning } =
    useThemeToneContext();

  return (
    <>
      <div className="flex items-center justify-between">
        <Label>Theme</Label>
        <div className="flex items-center gap-2">
          <SunIcon size={14} className={isDark ? "opacity-40" : ""} />
          <Switch
            checked={isDark}
            onCheckedChange={toggleTheme}
            disabled={isTransitioning}
          />
          <MoonIcon size={14} className={!isDark ? "opacity-40" : ""} />
        </div>
      </div>

      <div className="grid grid-cols-3 gap-2">
        {TONES.map((t) => (
          <button
            key={t.value}
            className={cn(
              "relative h-8 rounded-md transition-all flex items-center justify-center",
              tone === t.value
                ? "ring-2 ring-primary ring-offset-2 ring-offset-background"
                : "ring-1 ring-border hover:ring-2"
            )}
            onClick={() => {
              if (!isTransitioning) {
                setTone(t.value);
                toast.success(`Theme changed to ${t.name}`);
              }
            }}
            disabled={isTransitioning}
            style={{
              background: t.palette.primary,
              opacity: isTransitioning ? 0.7 : 1,
              cursor: isTransitioning ? "not-allowed" : "pointer",
            }}
            title={t.name}
          />
        ))}
      </div>
    </>
  );
}


//-==================== END OF FILE: src\components\ThemeToneSelector.tsx ====================-//

//-==================== START OF FILE: src\components\ui\alert-dialog.tsx ====================-//

"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

function AlertDialog({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {
  return <AlertDialogPrimitive.Root data-slot="alert-dialog" {...props} />
}

function AlertDialogTrigger({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {
  return (
    <AlertDialogPrimitive.Trigger data-slot="alert-dialog-trigger" {...props} />
  )
}

function AlertDialogPortal({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {
  return (
    <AlertDialogPrimitive.Portal data-slot="alert-dialog-portal" {...props} />
  )
}

function AlertDialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {
  return (
    <AlertDialogPrimitive.Overlay
      data-slot="alert-dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function AlertDialogContent({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {
  return (
    <AlertDialogPortal>
      <AlertDialogOverlay />
      <AlertDialogPrimitive.Content
        data-slot="alert-dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      />
    </AlertDialogPortal>
  )
}

function AlertDialogHeader({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function AlertDialogFooter({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function AlertDialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {
  return (
    <AlertDialogPrimitive.Title
      data-slot="alert-dialog-title"
      className={cn("text-lg font-semibold", className)}
      {...props}
    />
  )
}

function AlertDialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {
  return (
    <AlertDialogPrimitive.Description
      data-slot="alert-dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function AlertDialogAction({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) {
  return (
    <AlertDialogPrimitive.Action
      className={cn(buttonVariants(), className)}
      {...props}
    />
  )
}

function AlertDialogCancel({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) {
  return (
    <AlertDialogPrimitive.Cancel
      className={cn(buttonVariants({ variant: "outline" }), className)}
      {...props}
    />
  )
}

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}


//-==================== END OF FILE: src\components\ui\alert-dialog.tsx ====================-//

//-==================== START OF FILE: src\components\ui\button.tsx ====================-//

import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive border border-transparent",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border-input bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean;
  }) {
  const Comp = asChild ? Slot : "button";

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  );
}

export { Button, buttonVariants };


//-==================== END OF FILE: src\components\ui\button.tsx ====================-//

//-==================== START OF FILE: src\components\ui\card.tsx ====================-//

import * as React from "react";

import { cn } from "@/lib/utils";

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-background text-background-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  );
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  );
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  );
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  );
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  );
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  );
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  );
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
};


//-==================== END OF FILE: src\components\ui\card.tsx ====================-//

//-==================== START OF FILE: src\components\ui\dialog.tsx ====================-//

"use client";

import * as React from "react";
import * as DialogPrimitive from "@radix-ui/react-dialog";
import { XIcon } from "lucide-react";

import { cn } from "@/lib/utils";

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />;
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />;
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />;
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />;
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  );
}

function DialogContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content>) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        {/* <DialogPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4">
          <XIcon />
          <span className="sr-only">Close</span>
        </DialogPrimitive.Close> */}
      </DialogPrimitive.Content>
    </DialogPortal>
  );
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  );
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  );
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  );
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  );
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
};


//-==================== END OF FILE: src\components\ui\dialog.tsx ====================-//

//-==================== START OF FILE: src\components\ui\dropdown-menu.tsx ====================-//

"use client";

import * as React from "react";
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu";
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react";

import { cn } from "@/lib/utils";

function DropdownMenu({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {
  return <DropdownMenuPrimitive.Root data-slot="dropdown-menu" {...props} />;
}

function DropdownMenuPortal({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {
  return (
    <DropdownMenuPrimitive.Portal data-slot="dropdown-menu-portal" {...props} />
  );
}

function DropdownMenuTrigger({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {
  return (
    <DropdownMenuPrimitive.Trigger
      data-slot="dropdown-menu-trigger"
      {...props}
    />
  );
}

function DropdownMenuContent({
  className,
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {
  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        data-slot="dropdown-menu-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-background text-background-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",
          className
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  );
}

function DropdownMenuGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {
  return (
    <DropdownMenuPrimitive.Group data-slot="dropdown-menu-group" {...props} />
  );
}

function DropdownMenuItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {
  inset?: boolean;
  variant?: "default" | "destructive";
}) {
  return (
    <DropdownMenuPrimitive.Item
      data-slot="dropdown-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  );
}

function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {
  return (
    <DropdownMenuPrimitive.CheckboxItem
      data-slot="dropdown-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  );
}

function DropdownMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {
  return (
    <DropdownMenuPrimitive.RadioGroup
      data-slot="dropdown-menu-radio-group"
      {...props}
    />
  );
}

function DropdownMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {
  return (
    <DropdownMenuPrimitive.RadioItem
      data-slot="dropdown-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  );
}

function DropdownMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {
  inset?: boolean;
}) {
  return (
    <DropdownMenuPrimitive.Label
      data-slot="dropdown-menu-label"
      data-inset={inset}
      className={cn(
        "px-2 py-1.5 text-sm font-medium data-[inset]:pl-8",
        className
      )}
      {...props}
    />
  );
}

function DropdownMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {
  return (
    <DropdownMenuPrimitive.Separator
      data-slot="dropdown-menu-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  );
}

function DropdownMenuShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="dropdown-menu-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  );
}

function DropdownMenuSub({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {
  return <DropdownMenuPrimitive.Sub data-slot="dropdown-menu-sub" {...props} />;
}

function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
  inset?: boolean;
}) {
  return (
    <DropdownMenuPrimitive.SubTrigger
      data-slot="dropdown-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto size-4" />
    </DropdownMenuPrimitive.SubTrigger>
  );
}

function DropdownMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {
  return (
    <DropdownMenuPrimitive.SubContent
      data-slot="dropdown-menu-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props}
    />
  );
}

export {
  DropdownMenu,
  DropdownMenuPortal,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuLabel,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubTrigger,
  DropdownMenuSubContent,
};


//-==================== END OF FILE: src\components\ui\dropdown-menu.tsx ====================-//

//-==================== START OF FILE: src\components\ui\input.tsx ====================-//

import * as React from "react";

import { cn } from "@/lib/utils";

interface InputProps extends React.ComponentProps<"input"> {
  icon?: React.ReactNode;
  iconPlacement?: "left" | "right";
}

function Input({
  className,
  type,
  icon,
  iconPlacement = "left",
  style,
  ...props
}: InputProps) {
  const inputElement = (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground bg-background flex h-9 w-full min-w-0 rounded-md border px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        icon ? (iconPlacement === "left" ? "pl-9" : "pr-9") : "",
        className
      )}
      style={style}
      {...props}
    />
  );

  if (!icon) return inputElement;

  return (
    <div className="relative flex items-center w-full">
      {iconPlacement === "left" && (
        <span className="absolute left-2 flex items-center pointer-events-none text-muted-foreground">
          {icon}
        </span>
      )}
      {inputElement}
      {iconPlacement === "right" && (
        <span className="absolute right-2 flex items-center pointer-events-none text-muted-foreground">
          {icon}
        </span>
      )}
    </div>
  );
}

export { Input };


//-==================== END OF FILE: src\components\ui\input.tsx ====================-//

//-==================== START OF FILE: src\components\ui\label.tsx ====================-//

"use client";

import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";

import { cn } from "@/lib/utils";

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  );
}

export { Label };


//-==================== END OF FILE: src\components\ui\label.tsx ====================-//

//-==================== START OF FILE: src\components\ui\progress.tsx ====================-//

"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

function Progress({
  className,
  value,
  ...props
}: React.ComponentProps<typeof ProgressPrimitive.Root>) {
  return (
    <ProgressPrimitive.Root
      data-slot="progress"
      className={cn(
        "bg-primary/20 relative h-2 w-full overflow-hidden rounded-full",
        className
      )}
      {...props}
    >
      <ProgressPrimitive.Indicator
        data-slot="progress-indicator"
        className="bg-primary h-full w-full flex-1 transition-all"
        style={{ transform: `translateX(-${100 - (value ?? 0)}%)` }}
      />
    </ProgressPrimitive.Root>
  )
}

export { Progress }


//-==================== END OF FILE: src\components\ui\progress.tsx ====================-//

//-==================== START OF FILE: src\components\ui\scroll-area.tsx ====================-//

"use client";

import * as React from "react";
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area";

import { cn } from "@/lib/utils";

function ScrollArea({
  className,
  children,
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {
  return (
    <ScrollAreaPrimitive.Root
      data-slot="scroll-area"
      className={cn("relative", className)}
      {...props}
    >
      <ScrollAreaPrimitive.Viewport
        data-slot="scroll-area-viewport"
        className="focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1"
      >
        {children}
      </ScrollAreaPrimitive.Viewport>
      <ScrollBar />
      <ScrollAreaPrimitive.Corner />
    </ScrollAreaPrimitive.Root>
  );
}

function ScrollBar({
  className,
  orientation = "vertical",
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {
  return (
    <ScrollAreaPrimitive.ScrollAreaScrollbar
      data-slot="scroll-area-scrollbar"
      orientation={orientation}
      className={cn(
        "flex touch-none p-px transition-colors select-none",
        orientation === "vertical" &&
          "h-full w-2.5 border-l border-l-transparent",
        orientation === "horizontal" &&
          "h-2.5 flex-col border-t border-t-transparent",
        className
      )}
      {...props}
    >
      <ScrollAreaPrimitive.ScrollAreaThumb
        data-slot="scroll-area-thumb"
        className="bg-border relative flex-1 rounded-full"
      />
    </ScrollAreaPrimitive.ScrollAreaScrollbar>
  );
}

export { ScrollArea, ScrollBar };


//-==================== END OF FILE: src\components\ui\scroll-area.tsx ====================-//

//-==================== START OF FILE: src\components\ui\select.tsx ====================-//

"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />
}

function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />
}

function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />
}

function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {
  size?: "sm" | "default"
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
}

function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("text-muted-foreground px-2 py-1.5 text-xs", className)}
      {...props}
    />
  )
}

function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
}

function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  )
}

function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  )
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}


//-==================== END OF FILE: src\components\ui\select.tsx ====================-//

//-==================== START OF FILE: src\components\ui\separator.tsx ====================-//

"use client";

import * as React from "react";
import * as SeparatorPrimitive from "@radix-ui/react-separator";

import { cn } from "@/lib/utils";

function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator-root"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className
      )}
      {...props}
    />
  );
}

export { Separator };


//-==================== END OF FILE: src\components\ui\separator.tsx ====================-//

//-==================== START OF FILE: src\components\ui\skeleton.tsx ====================-//

import { cn } from "@/lib/utils";

function Skeleton({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="skeleton"
      className={cn("bg-accent animate-pulse", className)}
      {...props}
    />
  );
}

export { Skeleton };


//-==================== END OF FILE: src\components\ui\skeleton.tsx ====================-//

//-==================== START OF FILE: src\components\ui\sonner.tsx ====================-//

"use client";

import { useTheme } from "next-themes";
import { Toaster as Sonner, ToasterProps } from "sonner";

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme();

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      style={
        {
          "--normal-bg": "var(--popover)",
          "--normal-text": "var(--popover-foreground)",
          "--normal-border": "var(--border)",
        } as React.CSSProperties
      }
      {...props}
    />
  );
};

export { Toaster };


//-==================== END OF FILE: src\components\ui\sonner.tsx ====================-//

//-==================== START OF FILE: src\components\ui\switch.tsx ====================-//

"use client";

import * as React from "react";
import * as SwitchPrimitive from "@radix-ui/react-switch";

import { cn } from "@/lib/utils";

function Switch({
  className,
  ...props
}: React.ComponentProps<typeof SwitchPrimitive.Root>) {
  return (
    <SwitchPrimitive.Root
      data-slot="switch"
      className={cn(
        "peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.25rem] w-8.25 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <SwitchPrimitive.Thumb
        data-slot="switch-thumb"
        className={cn(
          "bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0"
        )}
      />
    </SwitchPrimitive.Root>
  );
}

export { Switch };


//-==================== END OF FILE: src\components\ui\switch.tsx ====================-//

//-==================== START OF FILE: src\components\ui\tabs.tsx ====================-//

"use client";

import * as React from "react";
import * as TabsPrimitive from "@radix-ui/react-tabs";

import { cn } from "@/lib/utils";

function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn("flex flex-col gap-2", className)}
      {...props}
    />
  );
}

function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        "bg-background text-primary-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]",
        className
      )}
      {...props}
    />
  );
}

function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring data-[state=active]:bg-primary/30 text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  );
}

function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn("flex-1 outline-none", className)}
      {...props}
    />
  );
}

export { Tabs, TabsList, TabsTrigger, TabsContent };


//-==================== END OF FILE: src\components\ui\tabs.tsx ====================-//

//-==================== START OF FILE: src\components\ui\titlebar\TitleBar.tsx ====================-//

"use client";

import { useState, useEffect } from "react";
import {
  WebviewWindow,
  getCurrentWebviewWindow,
} from "@tauri-apps/api/webviewWindow";
import { Button } from "@/components/ui/button";
import { Minus, Square, X } from "lucide-react";

interface TitleBarProps {
  title?: string;
}

export function TitleBar({ title = "League Skin Manager" }: TitleBarProps) {
  const [isMaximized, setIsMaximized] = useState(false);
  const [appWindow, setAppWindow] = useState<WebviewWindow | null>(null);

  useEffect(() => {
    // Get the current webview window
    const initWindow = async () => {
      try {
        const currentWindow = getCurrentWebviewWindow();
        setAppWindow(currentWindow);

        // Check if the window is maximized initially
        try {
          const maximized = await currentWindow.isMaximized();
          setIsMaximized(maximized);
        } catch (error) {
          console.error("Failed to check if window is maximized:", error);
        }

        // Listen for window resize events
        const unlistenResize = await currentWindow.listen(
          "tauri://resize",
          () => {
            currentWindow
              .isMaximized()
              .then((maximized) => {
                setIsMaximized(maximized);
              })
              .catch((error: unknown) => {
                console.error(
                  "Failed to check if window is maximized on resize:",
                  error
                );
              });
          }
        );

        return unlistenResize;
      } catch (error) {
        console.error("Failed to initialize window:", error);
        return null;
      }
    };

    let unlisten: (() => void) | null = null;
    initWindow()
      .then((unlistenFn) => {
        unlisten = unlistenFn;
      })
      .catch((error: unknown) => {
        console.error("Failed to initialize window listeners:", error);
      });

    return () => {
      // Cleanup event listeners
      if (unlisten) unlisten();
    };
  }, []);

  const minimize = async () => {
    try {
      if (appWindow) {
        await appWindow.minimize();
      }
    } catch (error) {
      console.error("Failed to minimize window:", error);
    }
  };

  const toggleMaximize = async () => {
    try {
      if (appWindow) {
        if (isMaximized) {
          await appWindow.unmaximize();
        } else {
          await appWindow.maximize();
        }
      }
    } catch (error) {
      console.error("Failed to toggle maximize:", error);
    }
  };

  const close = async () => {
    try {
      if (appWindow) {
        await appWindow.close();
      }
    } catch (error) {
      console.error("Failed to close window:", error);
    }
  };

  return (
    <div className="flex items-center">
      <Button
        variant="ghost"
        size="icon"
        className="p-4"
        onClick={() => void minimize()}
        aria-label="Minimize"
      >
        <Minus className="h-4 w-4" />
      </Button>
      <Button
        variant="ghost"
        size="icon"
        className="p-4"
        onClick={() => void toggleMaximize()}
        aria-label={isMaximized ? "Restore" : "Maximize"}
      >
        <Square className="h-4 w-4" />
      </Button>
      <Button
        variant="ghost"
        size="icon"
        className="p-4 dark:hover:bg-destructive hover:text-destructive-foreground"
        onClick={() => void close()}
        aria-label="Close"
      >
        <X className="h-4 w-4" />
      </Button>
    </div>
  );
}


//-==================== END OF FILE: src\components\ui\titlebar\TitleBar.tsx ====================-//

//-==================== START OF FILE: src\components\ui\tooltip.tsx ====================-//

"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

function TooltipProvider({
  delayDuration = 0,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {
  return (
    <TooltipPrimitive.Provider
      data-slot="tooltip-provider"
      delayDuration={delayDuration}
      {...props}
    />
  )
}

function Tooltip({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Root>) {
  return (
    <TooltipProvider>
      <TooltipPrimitive.Root data-slot="tooltip" {...props} />
    </TooltipProvider>
  )
}

function TooltipTrigger({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {
  return <TooltipPrimitive.Trigger data-slot="tooltip-trigger" {...props} />
}

function TooltipContent({
  className,
  sideOffset = 0,
  children,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Content>) {
  return (
    <TooltipPrimitive.Portal>
      <TooltipPrimitive.Content
        data-slot="tooltip-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance",
          className
        )}
        {...props}
      >
        {children}
        <TooltipPrimitive.Arrow className="bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]" />
      </TooltipPrimitive.Content>
    </TooltipPrimitive.Portal>
  )
}

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }


//-==================== END OF FILE: src\components\ui\tooltip.tsx ====================-//

//-==================== START OF FILE: src\global.d.ts ====================-//

declare interface Window {
  __TAURI__?: any;
}


//-==================== END OF FILE: src\global.d.ts ====================-//

//-==================== START OF FILE: src\lib\data-utils.ts ====================-//

import { Champion, ChampionInSummary, Skin, Chroma } from "./types";
import { invoke } from "@tauri-apps/api/core";

const COMMUNITY_DRAGON_BASE_URL = "https://raw.communitydragon.org/latest/plugins/rcp-be-lol-game-data/global/default";
const NEW_SKIN_REPO_URL = "https://raw.githubusercontent.com/darkseal-org/lol-skins/main/skins";

interface ChampionDetails {
  skins: Array<{
    id: number;
    name: string;
    loadScreenPath: string;
    isBase: boolean;
    skinType: string;
    rarity: string;
    featuresText: string | null;
    chromas?: Array<{
      id: number;
      name: string;
      chromaPath: string;
      colors: string[];
      description: string;
      rarity: string;
    }>;
  }>;
}

function constructAssetUrl(path: string): string {
  const cleanPath = path.startsWith("/") ? path.slice(1) : path;
  const transformedPath = cleanPath
    .replace("lol-game-data/assets/", "")
    .toLowerCase();
  return `${COMMUNITY_DRAGON_BASE_URL}/${transformedPath}`;
}

export async function fetchChampionSummaries(): Promise<ChampionInSummary[]> {
  const response = await fetch(`${COMMUNITY_DRAGON_BASE_URL}/v1/champion-summary.json`);
  if (!response.ok) {
    throw new Error("Failed to fetch champion summaries");
  }
  return (await response.json()) as ChampionInSummary[];
}

export async function fetchChampionDetails(id: number): Promise<ChampionDetails> {
  const response = await fetch(`${COMMUNITY_DRAGON_BASE_URL}/v1/champions/${id}.json`);
  if (!response.ok) {
    throw new Error(`Failed to fetch details for champion ${id}`);
  }
  return (await response.json()) as ChampionDetails;
}

export async function fetchSkinFile(skinId: number): Promise<Uint8Array | null> {
  try {
    const skinPath = await invoke<string>("get_skin_path", { skinId });

    if (!skinPath) {
      console.warn(`No path found in manifest for skin ID ${skinId}`);
      return null;
    }

    const downloadUrl = `${NEW_SKIN_REPO_URL}/${skinPath.replace(/\\/g, "/")}`;
    const response = await fetch(downloadUrl);

    if (!response.ok) {
      throw new Error(
        `Failed to fetch skin file for ID ${skinId} from ${downloadUrl}. Status: ${response.status}`
      );
    }

    const arrayBuffer = await response.arrayBuffer();
    return new Uint8Array(arrayBuffer);
  } catch (error) {
    console.error(`Failed to fetch skin file for ID ${skinId}:`, error);
    return null;
  }
}

export function sanitizeForFileName(str: string): string {
  return str
    .toLowerCase()
    .trim()
    .replace(/[/\\:?*"<>| ]+/g, "_")
    .replace(/_+/g, "_")
    .replace(/^_+|_+$/g, "");
}

export function transformChampionData(
  summary: ChampionInSummary,
  details: ChampionDetails
): Champion {
  const baseDir = sanitizeForFileName(summary.name);
  const skins: Skin[] = details.skins.map((skin) => {
    const chromas: Chroma[] = (skin.chromas ?? []).map((chroma) => ({
      id: chroma.id,
      name: chroma.name,
      skinChromaPath: constructAssetUrl(chroma.chromaPath),
      colors: chroma.colors,
      description: chroma.description,
      rarity: chroma.rarity,
      fantome: `${baseDir}/${sanitizeForFileName(skin.name)}_chroma_${chroma.id}.fantome`,
    }));

    return {
      id: skin.id,
      name: skin.name,
      skinSrc: constructAssetUrl(skin.loadScreenPath),
      isBase: skin.isBase,
      skinType: skin.skinType,
      rarity: skin.rarity || "kNoRarity",
      featuresText: skin.featuresText ?? null,
      fantome: `${baseDir}/${sanitizeForFileName(skin.name)}.fantome`,
      chromas,
    };
  });

  return {
    id: summary.id,
    name: summary.name,
    alias: summary.alias,
    iconSrc: constructAssetUrl(summary.squarePortraitPath),
    skins,
    lastUpdated: Date.now(),
  };
}

export function calculateProgress(
  currentChampion: string,
  totalChampions: number,
  processedChampions: number,
  status: "checking" | "downloading" | "processing"
) {
  return {
    currentChampion,
    totalChampions,
    processedChampions,
    status,
    progress: (processedChampions / totalChampions) * 100,
  };
}

//-==================== END OF FILE: src\lib\data-utils.ts ====================-//

//-==================== START OF FILE: src\lib\hooks\use-champion-persistence.ts ====================-//

import { useEffect } from "react";
import { invoke } from "@tauri-apps/api/core";
import { useGameStore } from "@/lib/store";

/**
 * Hook for persisting champion configurations
 */
export function useChampionPersistence() {
  const { leaguePath, selectedSkins, favorites } = useGameStore();

  // Persist configuration (league path + selected skins + favorites) on change
  useEffect(() => {
    if (!leaguePath) return;

    // prepare skins array from Map
    const skins = Array.from(selectedSkins.values()).map((s) => ({
      champion_id: s.championId,
      skin_id: s.skinId,
      chroma_id: s.chromaId,
      fantome: s.fantome,
    }));

    invoke("save_selected_skins", {
      leaguePath: leaguePath,
      skins,
      favorites: Array.from(favorites),
    }).catch((err: unknown) => {
      console.error(err);
    });
  }, [leaguePath, selectedSkins, favorites]);
}


//-==================== END OF FILE: src\lib\hooks\use-champion-persistence.ts ====================-//

//-==================== START OF FILE: src\lib\hooks\use-champions.ts ====================-//

import { useState, useEffect } from "react";
import { invoke } from "@tauri-apps/api/core";
import { useGameStore } from "@/lib/store";
import { Champion } from "../types";

export function useChampions() {
  const { leaguePath } = useGameStore();
  const [champions, setChampions] = useState<Champion[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [hasData, setHasData] = useState<boolean | null>(null);

  useEffect(() => {
    if (!leaguePath) return;
    setLoading(true);
    setError(null);
    async function checkData() {
      try {
        const dataExists = await invoke<boolean>("check_champions_data");
        setHasData(dataExists);

        if (!dataExists) {
          setError("No champion data found. Please run the data update first.");
          setLoading(false);
          return;
        }

        const data = await invoke<string>("get_champion_data", {
          championId: 0,
        });

        if (!data) {
          throw new Error("No data received from the backend");
        }

        const championsData = JSON.parse(data) as Champion[];

        if (!Array.isArray(championsData)) {
          throw new Error(
            "Invalid data format: expected an array of champions"
          );
        }

        setChampions(championsData);
        setError(null);
      } catch (error) {
        console.error("Failed to load champions:", error);
        setError(
          error instanceof Error ? error.message : "Failed to load champions"
        );
        setChampions([]);
      } finally {
        setLoading(false);
      }
    }

    void checkData();
  }, [leaguePath]);

  return { champions, loading, error, hasData };
}


//-==================== END OF FILE: src\lib\hooks\use-champions.ts ====================-//

//-==================== START OF FILE: src\lib\hooks\use-custom-skins.ts ====================-//

"use client";

import { useState, useEffect } from "react";
import { invoke } from "@tauri-apps/api/core";
import { useGameStore } from "../store";
import { CustomSkin } from "../types";

export function useCustomSkins() {
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const { customSkins, setCustomSkins, addCustomSkin, removeCustomSkin } =
    useGameStore();

  // Load custom skins on initial mount
  useEffect(() => {
    const fetchCustomSkins = async () => {
      setIsLoading(true);
      setError(null);

      try {
        const skins = await invoke<CustomSkin[]>("get_custom_skins");
        setCustomSkins(skins);
      } catch (err) {
        console.error("Failed to load custom skins:", err);
        setError(String(err));
      } finally {
        setIsLoading(false);
      }
    };

    void fetchCustomSkins();
  }, [setCustomSkins]);

  // Function to upload a new custom skin
  const uploadCustomSkin = async (championId: number, skinName: string) => {
    try {
      // Use the invoke function to call a new command that will handle file selection on the backend
      const newSkin = await invoke<CustomSkin>("upload_custom_skin", {
        championId,
        skinName,
      });

      // Add to local state
      addCustomSkin(newSkin);

      return newSkin;
    } catch (err) {
      console.error("Failed to upload custom skin:", err);
      setError(String(err));
      return null;
    }
  };

  // Function to delete a custom skin
  const deleteCustomSkin = async (skinId: string) => {
    try {
      await invoke("delete_custom_skin", { skinId });
      removeCustomSkin(skinId);
      return true;
    } catch (err) {
      console.error("Failed to delete custom skin:", err);
      setError(String(err));
      return false;
    }
  };

  return {
    customSkins,
    isLoading,
    error,
    uploadCustomSkin,
    deleteCustomSkin,
  };
}


//-==================== END OF FILE: src\lib\hooks\use-custom-skins.ts ====================-//

//-==================== START OF FILE: src\lib\hooks\use-data-update.ts ====================-//

import { useState, useCallback } from "react";
import { invoke } from "@tauri-apps/api/core";
import { toast } from "sonner";
import { DataUpdateProgress } from "../types";
import {
  fetchChampionSummaries,
  fetchChampionDetails,
  fetchSkinFile,
  transformChampionData,
  sanitizeForFileName,
} from "../data-utils";

const delay = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));

export function useDataUpdate() {
  const [isUpdating, setIsUpdating] = useState(false);
  const [progress, setProgress] = useState<DataUpdateProgress | null>(null);

  const updateData = useCallback(async () => {
    if (isUpdating) return;

    const loadingToastId = toast.loading("Starting data update...");

    try {
      setIsUpdating(true);
      setProgress({
        currentChampion: "",
        totalChampions: 0,
        processedChampions: 0,
        status: "checking",
        progress: 0,
      });

      toast.loading("Updating skin manifest...", { id: loadingToastId });
      await invoke("build_skin_manifest");
      toast.success("Skin manifest updated.", { id: loadingToastId });
      
      const summaries = await fetchChampionSummaries();
      const validSummaries = summaries.filter((s) => s.id > 0);
      const totalChampions = validSummaries.length;

      setProgress((prev) => ({ ...prev!, totalChampions, status: "downloading" }));
      toast.loading("Downloading champion data...", { id: loadingToastId });

      let processedCount = 0;
      for (const summary of validSummaries) {
        try {
          processedCount++;
          setProgress((prev) => ({
            ...prev!,
            currentChampion: summary.name,
            processedChampions: processedCount,
            status: "processing",
            progress: (processedCount / totalChampions) * 100,
          }));

          const details = await fetchChampionDetails(summary.id);

          const skinPromises = details.skins
            .filter((skin) => !skin.isBase)
            .map(async (skin) => {
              const skinContent = await fetchSkinFile(skin.id);
              if (skinContent) {
                await invoke("save_fantome_file", {
                  championName: sanitizeForFileName(summary.name),
                  skinName: sanitizeForFileName(skin.name),
                  isChroma: false,
                  chromaId: null,
                  content: Array.from(skinContent),
                });
              }

              if (skin.chromas && skin.chromas.length > 0) {
                const chromaPromises = skin.chromas.map(async (chroma) => {
                  const chromaContent = await fetchSkinFile(chroma.id);
                  if (chromaContent) {
                    await invoke("save_fantome_file", {
                      championName: sanitizeForFileName(summary.name),
                      skinName: sanitizeForFileName(skin.name),
                      isChroma: true,
                      chromaId: chroma.id,
                      content: Array.from(chromaContent),
                    });
                  }
                });
                await Promise.all(chromaPromises);
              }
            });

          await Promise.all(skinPromises);

          const championData = transformChampionData(summary, details);
          if (championData.id > 0) {
            await invoke("update_champion_data", {
              championName: sanitizeForFileName(championData.name),
              data: JSON.stringify(championData),
            });
          }

          if (processedCount % 5 === 0) {
            const progressPercentage = Math.floor((processedCount / totalChampions) * 100);
            toast.loading(
              `Processing: ${processedCount}/${totalChampions} (${progressPercentage}%) - ${summary.name}`,
              { id: loadingToastId }
            );
          }
        } catch (err) {
          console.error(`Failed to process ${summary.name}:`, err);
          toast.error(`Failed to process ${summary.name}`);
        }
        await delay(50);
      }
      
      toast.success("Data update completed successfully!", { id: loadingToastId });

    } catch (err) {
      console.error("Data update failed:", err);
      toast.error(`Failed to update data: ${String(err)}`, { id: loadingToastId });
    } finally {
      setIsUpdating(false);
      setProgress(null);
    }
  }, [isUpdating]);

  return { isUpdating, progress, updateData };
}

//-==================== END OF FILE: src\lib\hooks\use-data-update.ts ====================-//

//-==================== START OF FILE: src\lib\hooks\use-initialization.ts ====================-//

import { useEffect, useState } from "react";
import { useGameStore } from "@/lib/store";
import { invoke } from "@tauri-apps/api/core";
import { useDataUpdate } from "./use-data-update";

export function useInitialization() {
  const [isInitialized, setIsInitialized] = useState(false);
  const [hasStartedUpdate, setHasStartedUpdate] = useState(false);
  const { updateData } = useDataUpdate();
  const { setLeaguePath, selectSkin, setFavorites } = useGameStore();

  // Handle initial setup
  useEffect(() => {
    let mounted = true;

    async function initialize() {
      try {
        // Load saved config (path + skins + favorites)
        const cfg = await invoke<unknown>("load_config");
        const { league_path, skins, favorites } = cfg as {
          league_path?: string;
          skins?: Array<any>;
          favorites?: number[];
        };

        if (league_path) {
          setLeaguePath(league_path);

          // preload skin selections
          (skins ?? []).forEach((s: unknown) => {
            if (
              typeof s === "object" &&
              s !== null &&
              "champion_id" in s &&
              "skin_id" in s
            ) {
              const skinObj = s as {
                champion_id: number;
                skin_id: number;
                chroma_id?: number;
                fantome?: string;
              };
              selectSkin(
                skinObj.champion_id,
                skinObj.skin_id,
                skinObj.chroma_id,
                skinObj.fantome
              );
            }
          });

          // Load favorites
          if (favorites) {
            setFavorites(new Set(favorites));
          }

          // start watcher
          void invoke("start_auto_inject", { leaguePath: league_path });
        }

        // Only check for updates if we haven't already started
        if (!hasStartedUpdate && mounted) {
          const needsUpdate = !(await invoke<boolean>("check_champions_data"));
          console.log("Needs update:", needsUpdate);

          if (needsUpdate) {
            console.log("Starting data update...");
            setHasStartedUpdate(true);
            await updateData();
          }
        }

        if (mounted) {
          setIsInitialized(true);
        }
      } catch (error) {
        console.error("Failed to initialize:", error);
        if (mounted) {
          setIsInitialized(true); // Still mark as initialized so UI isn't stuck
        }
      }
    }

    // Only initialize if not already done
    if (!isInitialized) {
      void initialize();
    }

    return () => {
      mounted = false;
    };
  }, [
    isInitialized,
    hasStartedUpdate,
    updateData,
    setLeaguePath,
    selectSkin,
    setFavorites,
  ]);

  return { isInitialized, hasStartedUpdate, setHasStartedUpdate };
}


//-==================== END OF FILE: src\lib\hooks\use-initialization.ts ====================-//

//-==================== START OF FILE: src\lib\hooks\use-league-directory.ts ====================-//

import { useState, useCallback } from "react";
import { invoke } from "@tauri-apps/api/core";
import { toast } from "sonner";

export function useLeagueDirectory(setLeaguePath: (path: string) => void) {
  const [isLoading, setIsLoading] = useState(false);

  const handleSelectDirectory = useCallback(async () => {
    try {
      setIsLoading(true);
      const path = await invoke<string>("select_league_directory");
      if (path) {
        setLeaguePath(path);
        toast.success("League of Legends directory updated successfully");
      }
    } catch (err) {
      console.error("Failed to select League directory:", err);
      toast.error("Failed to select directory");
    } finally {
      setIsLoading(false);
    }
  }, [setLeaguePath]);

  const handleAutoDetect = useCallback(async () => {
    try {
      setIsLoading(true);
      const path = await invoke<string>("auto_detect_league");
      if (path) {
        setLeaguePath(path);
        toast.success("League of Legends installation found");
      }
    } catch (err) {
      console.error("Failed to detect League directory:", err);
      toast.error(
        "Could not find League of Legends installation automatically"
      );
    } finally {
      setIsLoading(false);
    }
  }, [setLeaguePath]);

  return { isLoading, handleSelectDirectory, handleAutoDetect };
}


//-==================== END OF FILE: src\lib\hooks\use-league-directory.ts ====================-//

//-==================== START OF FILE: src\lib\hooks\use-party-friends.ts ====================-//

import { useState, useCallback } from "react";
import { invoke } from "@tauri-apps/api/core";
import { toast } from "sonner";

export interface Friend {
  name: string;
  id: string;
  availability: "online" | "away" | "offline" | "in-game";
  game?: string;
  inParty?: boolean;
}

export function usePartyFriends(leaguePath: string | null) {
  const [friends, setFriends] = useState<Friend[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  const fetchFriends = useCallback(async () => {
    setIsLoading(true);
    if (!leaguePath) {
      toast.error(
        "League path not set. Please set your League of Legends path in settings."
      );
      setIsLoading(false);
      return;
    }
    try {
      const lcuFriends = await invoke<any[]>("get_lcu_friends", {
        app: window.__TAURI__,
        leaguePath,
      });
      const mappedFriends: Friend[] = lcuFriends.map((friend) => ({
        name: friend.name,
        id: friend.id,
        availability:
          friend.availability === "chat"
            ? "online"
            : friend.availability === "dnd"
            ? "away"
            : friend.availability === "away"
            ? "away"
            : friend.availability === "offline"
            ? "offline"
            : friend.availability === "mobile"
            ? "away"
            : "online",
        game: friend.gameTag || undefined,
      }));
      setFriends(mappedFriends);
    } catch (error) {
      // fallback to mock friends
      setFriends([
        { name: "SummonerOne", id: "friend1", availability: "online" },
        {
          name: "SummonerTwo",
          id: "friend2",
          availability: "in-game",
          game: "League of Legends",
        },
        { name: "SummonerThree", id: "friend3", availability: "away" },
      ]);
      toast.error("League client not detected. Using demo friends list.");
    } finally {
      setIsLoading(false);
    }
  }, [leaguePath]);

  return { friends, isLoading, fetchFriends };
}


//-==================== END OF FILE: src\lib\hooks\use-party-friends.ts ====================-//

//-==================== START OF FILE: src\lib\hooks\use-search-keyboard-events.ts ====================-//

import { useEffect } from "react";

export function useSearchKeyboardEvents({
  hasFocus,
  searchQuery,
  onSearchChange,
  inputRef,
}: {
  hasFocus: boolean;
  searchQuery: string;
  onSearchChange: (q: string) => void;
  inputRef: React.RefObject<HTMLInputElement>;
}) {
  useEffect(() => {
    const down = (e: KeyboardEvent) => {
      if (
        hasFocus ||
        e.target instanceof HTMLInputElement ||
        e.target instanceof HTMLTextAreaElement
      ) {
        return;
      }
      if (e.key.length === 1 && !e.metaKey && !e.ctrlKey && !e.altKey) {
        e.preventDefault();
        onSearchChange(e.key);
        inputRef.current?.focus();
      }
      if (e.key === "Backspace") {
        e.preventDefault();
        onSearchChange(searchQuery.slice(0, -1));
        inputRef.current?.focus();
      }
      if (e.key === "Escape") {
        e.preventDefault();
        onSearchChange("");
        inputRef.current?.blur();
      }
    };
    document.addEventListener("keydown", down);
    return () => {
      document.removeEventListener("keydown", down);
    };
  }, [searchQuery, onSearchChange, hasFocus, inputRef]);
}


//-==================== END OF FILE: src\lib\hooks\use-search-keyboard-events.ts ====================-//

//-==================== START OF FILE: src\lib\hooks\use-skin-card-logic.ts ====================-//

import { useState, useRef, useEffect, useCallback } from "react";
import { ChromaInSummary, Skin } from "@/lib/types";
import { useGameStore } from "@/lib/store";

export function useSkinCardLogic(championId: number, skin: Skin) {
  const { selectedSkins, selectSkin, clearSelection } = useGameStore();
  const selected = selectedSkins.get(championId);

  // Initialize selectedChroma from stored selection if it exists
  const [selectedChroma, setSelectedChroma] = useState<ChromaInSummary | null>(
    () => {
      if (selected?.skinId === skin.id && selected.chromaId) {
        return skin.chromas.find((c) => c.id === selected.chromaId) ?? null;
      }
      return null;
    }
  );

  const [isHovering, setIsHovering] = useState(false);
  const [imgLoaded, setImgLoaded] = useState(false);
  const cardRef = useRef<HTMLDivElement>(null);

  // Determine if this card is selected and if a chroma is selected
  const isSelected =
    selected?.skinId === skin.id &&
    (selectedChroma
      ? selected.chromaId === selectedChroma.id
      : !selected.chromaId);

  // Show chroma image if selected, otherwise skin image
  const currentImageSrc = selectedChroma?.skinChromaPath ?? skin.skinSrc;

  // Preload all chroma images on hover
  const handleMouseEnter = useCallback(() => {
    setIsHovering(true);
    skin.chromas.forEach((chroma) => {
      if (chroma.skinChromaPath) {
        const img = new window.Image();
        img.src = chroma.skinChromaPath;
      }
    });
  }, [skin.chromas]);

  const handleMouseLeave = () => {
    setIsHovering(false);
  };

  // Select skin or chroma in one click
  const handleClick = () => {
    if (isSelected) {
      clearSelection(championId);
    } else {
      selectSkin(
        championId,
        skin.id,
        selectedChroma?.id,
        selectedChroma?.fantome ?? skin.fantome
      );
    }
  };

  // When a chroma is selected, immediately update selection and image
  const handleChromaSelect = (chroma: ChromaInSummary | null) => {
    if (selectedChroma && chroma && selectedChroma.id === chroma.id) {
      // If clicking the already-selected chroma, reset to base skin
      setSelectedChroma(null);
      selectSkin(championId, skin.id, undefined, skin.fantome);
    } else {
      setSelectedChroma(chroma);
      selectSkin(
        championId,
        skin.id,
        chroma?.id,
        chroma?.fantome ?? skin.fantome
      );
    }
  };

  // Reset image loaded state when switching chroma/skin
  useEffect(() => {
    setImgLoaded(false);
  }, [currentImageSrc]);

  return {
    cardRef,
    selectedChroma,
    setSelectedChroma,
    isHovering,
    setIsHovering,
    imgLoaded,
    setImgLoaded,
    isSelected,
    currentImageSrc,
    handleMouseEnter,
    handleMouseLeave,
    handleClick,
    handleChromaSelect,
  };
}


//-==================== END OF FILE: src\lib\hooks\use-skin-card-logic.ts ====================-//

//-==================== START OF FILE: src\lib\hooks\use-skin-sync.ts ====================-//

import { useCallback, useEffect, useRef } from "react";
import { useGameStore, PartyMember } from "@/lib/store";
import { invoke } from "@tauri-apps/api/core";
import { toast } from "sonner";
import pako from "pako";
import { listen } from "@tauri-apps/api/event";

interface SkinSyncData {
  userSkins: {
    championId: number;
    skinId: number;
    chromaId: number | null;
    fantome: string | null;
  }[];
  requestType: "request" | "accept" | "reject";
  version: 1;
}

// Move these above all useEffect/useCallback
const compressSkinData = (data: SkinSyncData): string => {
  try {
    const jsonString = JSON.stringify(data);
    const compressed = pako.deflate(jsonString);
    return btoa(
      String.fromCharCode.apply(null, compressed as unknown as number[])
    );
  } catch (error) {
    console.error("Failed to compress skin data:", error);
    throw new Error("Failed to compress skin data");
  }
};

// Helper to check if a string is valid base64
function isValidBase64(str: string): boolean {
  // Remove whitespace and check length
  if (!str || str.length % 4 !== 0) return false;
  // Only allow base64 chars
  return /^[A-Za-z0-9+/=]+$/.test(str);
}

// Make the base64 validation and decoding more robust
function safeBase64ToBytes(str: string): Uint8Array | null {
  try {
    // If the string doesn't look like base64 at all, return null early
    if (!str || typeof str !== "string") return null;

    // Remove all whitespace, linebreaks and other non-base64 characters
    let cleaned = str.replace(/[^A-Za-z0-9+/=]/g, "");

    // Add padding if needed
    while (cleaned.length % 4 !== 0) cleaned += "=";

    try {
      const binary = atob(cleaned);
      const bytes = new Uint8Array(binary.length);
      for (let i = 0; i < binary.length; i++) bytes[i] = binary.charCodeAt(i);
      return bytes;
    } catch {
      return null;
    }
  } catch {
    return null;
  }
}

const decompressSkinData = (base64Data: string): SkinSyncData => {
  try {
    const bytes = safeBase64ToBytes(base64Data);
    if (!bytes) throw new Error("Invalid base64 string");

    try {
      const decompressed = pako.inflate(bytes);
      const jsonString = new TextDecoder().decode(decompressed);
      return JSON.parse(jsonString);
    } catch (error) {
      console.error("Failed to decompress skin data:", error);
      throw new Error("Failed to decompress skin data");
    }
  } catch (error) {
    // Create a more detailed error message for debugging
    console.error(
      `Base64 validation failed for: ${base64Data?.substring(
        0,
        20
      )}... (length: ${base64Data?.length || 0})`
    );
    throw error;
  }
};

/**
 * Hook for handling skin synchronization between friends
 */
export function useSkinSync() {
  const {
    selectedSkins,
    partyMembers,
    pendingSyncRequest,
    addPartyMember,
    removePartyMember,
    updatePartyMemberSkins,
    setPendingSyncRequest,
    leaguePath,
  } = useGameStore();

  // Track if we've already checked for pending sync requests this session
  const checkedPendingRef = useRef(false);

  // Track when we last checked for pending sync requests
  const lastCheckTimeRef = useRef(0);

  // Key function to check for pending sync requests in message history
  const checkPendingSyncRequests = useCallback(
    async (force = false) => {
      if (!leaguePath) return;

      // Only check every 30 seconds unless forced
      const now = Date.now();
      if (!force && now - lastCheckTimeRef.current < 30000) return;
      lastCheckTimeRef.current = now;

      console.log("Checking for pending skin sync requests...");

      try {
        // Get friends list from LCU
        const friends = await invoke<any[]>("get_lcu_friends", { leaguePath });
        console.log(
          `Found ${friends.length} friends to check for sync requests`
        );

        for (const friend of friends) {
          try {
            // Fetch recent messages from this friend
            console.log(`Checking messages from ${friend.name} (${friend.id})`);
            const messages = await invoke<any>("get_lcu_messages", {
              leaguePath,
              friendId: friend.id,
            });

            if (Array.isArray(messages)) {
              console.log(
                `Found ${messages.length} messages with ${friend.name}`
              );

              // Look for the latest OSS-SKIN-SYNC request that hasn't been accepted/rejected
              for (let i = messages.length - 1; i >= 0; i--) {
                const msg = messages[i];
                if (
                  typeof msg.body === "string" &&
                  msg.body.includes("[OSS-SKIN-SYNC]")
                ) {
                  // Only show if it's a request (not accept/reject)
                  const match = msg.body.match(
                    /\[OSS-SKIN-SYNC\](.*?)\[\/OSS-SKIN-SYNC\]/
                  );
                  if (match && match[1]) {
                    try {
                      const decoded = decompressSkinData(match[1]);
                      if (decoded.requestType === "request") {
                        console.log(`Found sync request from ${friend.name}`);

                        // Only show if we haven't already accepted/rejected this request
                        if (
                          !pendingSyncRequest ||
                          pendingSyncRequest.memberId !== friend.id
                        ) {
                          setPendingSyncRequest({
                            memberId: friend.id,
                            memberName: friend.name,
                            data: match[1],
                          });
                          toast.info(
                            `You have a pending sync request from ${friend.name}`
                          );
                          return; // Stop after finding the first request
                        }
                      }
                    } catch (err) {
                      console.error("Failed to decode sync request:", err);
                      // If base64 or decompression fails, skip this message
                      continue;
                    }
                  }
                }
              }
            }
          } catch (err) {
            console.error(`Error checking messages with ${friend.name}:`, err);
            continue; // Try the next friend if this one fails
          }
        }
        console.log("No pending skin sync requests found");
      } catch (err) {
        console.error("Error checking for sync requests:", err);
        // Ignore errors (e.g. if League isn't running)
      }
    },
    [leaguePath, pendingSyncRequest, setPendingSyncRequest]
  );

  // Check for pending sync requests on startup and when leaguePath changes
  useEffect(() => {
    if (leaguePath) {
      checkPendingSyncRequests(true);
    }
  }, [leaguePath, checkPendingSyncRequests]);

  // Set up a listener for chat messages to detect skin sync requests
  useEffect(() => {
    if (!leaguePath) return;

    // Poll for new messages periodically
    const intervalId = setInterval(() => {
      pollForSyncMessages();
    }, 10000); // Every 10 seconds

    return () => {
      clearInterval(intervalId);
    };
  }, [leaguePath]);

  // Check for pending sync requests in message history when Party Mode dialog is opened or user comes online
  useEffect(() => {
    if (!leaguePath || checkedPendingRef.current) return;
    checkedPendingRef.current = true;
    (async () => {
      try {
        // Get friends list from LCU
        const friends = await invoke<any[]>("get_lcu_friends", { leaguePath });
        for (const friend of friends) {
          // Fetch recent messages from this friend
          const messages = await invoke<any>("get_lcu_messages", {
            leaguePath,
            friendId: friend.id,
          });
          if (Array.isArray(messages)) {
            // Look for the latest OSS-SKIN-SYNC request that hasn't been accepted/rejected
            for (let i = messages.length - 1; i >= 0; i--) {
              const msg = messages[i];
              if (
                typeof msg.body === "string" &&
                msg.body.includes("[OSS-SKIN-SYNC]")
              ) {
                // Only show if it's a request (not accept/reject)
                const match = msg.body.match(
                  /\[OSS-SKIN-SYNC\](.*?)\[\/OSS-SKIN-SYNC\]/
                );
                if (match && match[1]) {
                  try {
                    const decoded = decompressSkinData(match[1]);
                    if (decoded.requestType === "request") {
                      // Only show if we haven't already accepted/rejected this request
                      if (
                        !pendingSyncRequest ||
                        pendingSyncRequest.memberId !== friend.id
                      ) {
                        setPendingSyncRequest({
                          memberId: friend.id,
                          memberName: friend.name,
                          data: match[1],
                        });
                        toast.info(
                          `You have a pending sync request from ${friend.name}`
                        );
                        return;
                      }
                    }
                  } catch (err) {
                    // If base64 or decompression fails, skip this message
                    continue;
                  }
                }
              }
            }
          }
        }
      } catch (err) {
        // Ignore errors (e.g. if League isn't running)
      }
    })();
  }, [
    leaguePath,
    setPendingSyncRequest,
    pendingSyncRequest,
    decompressSkinData,
  ]);

  // Poll for messages that might contain sync requests
  const pollForSyncMessages = useCallback(async () => {
    if (!leaguePath || partyMembers.length >= 4) return;

    try {
      // In a real implementation, this would check recent messages from friends
      // For now, we'll use a mock implementation
      // Uncommenting this would create a random mock sync request for testing
      /*
      if (Math.random() < 0.2 && !pendingSyncRequest) { // 20% chance
        const mockFriendId = `friend_${Date.now()}`;
        const mockFriendName = "TestFriend";
        
        const mockSkins = [
          {
            championId: 266,
            skinId: 266021,
            chromaId: 266029,
            fantome: "aatrox/lunar_eclipse_aatrox_chroma_266029.fantome",
          }
        ];
        
        const syncData: SkinSyncData = {
          userSkins: mockSkins,
          requestType: "request",
          version: 1
        };
        
        const encodedData = compressSkinData(syncData);
        
        setPendingSyncRequest({
          memberId: mockFriendId,
          memberName: mockFriendName,
          data: encodedData
        });
        
        toast.info(`Received sync request from ${mockFriendName}`);
      }
      */
    } catch (error) {
      console.error("Error polling for sync messages:", error);
    }
  }, [leaguePath, partyMembers, pendingSyncRequest]);

  // Send a sync request to a friend
  const sendSyncRequest = useCallback(
    async (friendId: string, friendName: string) => {
      try {
        // Check if we've reached the maximum party size (5 including the user)
        if (partyMembers.length >= 4) {
          toast.error("Party can have a maximum of 5 members");
          return Promise.reject("Party size limit reached");
        }

        // Make sure we have a league path
        if (!leaguePath) {
          toast.error(
            "League path not set. Please configure your League of Legends path in settings."
          );
          return Promise.reject("League path not set");
        }

        // Convert selected skins Map to array
        const skinArray = Array.from(selectedSkins.values()).map((skin) => ({
          championId: skin.championId,
          skinId: skin.skinId,
          chromaId: skin.chromaId || null,
          fantome: skin.fantome || null,
        }));

        // Prepare data for sync
        const syncData: SkinSyncData = {
          userSkins: skinArray,
          requestType: "request",
          version: 1,
        };

        // Compress and encode data
        const encodedData = compressSkinData(syncData);

        // Generate the special message format that contains the sync code
        const syncMessage = `[OSS-SKIN-SYNC]${encodedData}[/OSS-SKIN-SYNC]`;

        // Send message via LCU API
        try {
          await invoke("send_lcu_message", {
            leaguePath,
            friendId,
            message: syncMessage,
          });

          // Add friend to party
          addPartyMember({
            id: friendId,
            name: friendName,
            availability: "online",
            skins: new Map(),
          });

          toast.success(`Sync request sent to ${friendName}`);
        } catch (error) {
          console.error("Failed to send LCU message:", error);
          toast.error(
            `Could not send message to ${friendName}. Make sure League of Legends is running.`
          );
          return Promise.reject(error);
        }

        return Promise.resolve();
      } catch (error) {
        console.error("Failed to send sync request:", error);
        return Promise.reject(error);
      }
    },
    [selectedSkins, partyMembers, compressSkinData, addPartyMember, leaguePath]
  );

  // Accept a sync request from a friend
  const acceptSync = useCallback(
    async (friendId: string, friendName: string) => {
      try {
        if (!pendingSyncRequest) {
          return;
        }

        // Decode the received data
        const decodedData = decompressSkinData(pendingSyncRequest.data);
        console.log("Decoded skin data:", decodedData);

        // Create a new map of skins from the friend
        const friendSkins = new Map();
        decodedData.userSkins.forEach((skin) => {
          friendSkins.set(skin.championId, {
            championId: skin.championId,
            skinId: skin.skinId,
            chromaId: skin.chromaId || undefined,
            fantome: skin.fantome || undefined,
          });
        });

        // Add the friend to our party with their skins
        addPartyMember({
          id: friendId,
          name: friendName,
          availability: "online",
          skins: friendSkins,
        });

        // Clear the pending request
        setPendingSyncRequest(null);

        // Send an acceptance response if league path is set
        if (leaguePath) {
          const responseData: SkinSyncData = {
            userSkins: Array.from(selectedSkins.values()).map((skin) => ({
              championId: skin.championId,
              skinId: skin.skinId,
              chromaId: skin.chromaId || null,
              fantome: skin.fantome || null,
            })),
            requestType: "accept",
            version: 1,
          };

          // Compress and encode response
          const encodedResponse = compressSkinData(responseData);
          const responseMessage = `[OSS-SKIN-SYNC]${encodedResponse}[/OSS-SKIN-SYNC]`;

          try {
            await invoke("send_lcu_message", {
              leaguePath,
              friendId,
              message: responseMessage,
            });
          } catch (error) {
            console.error("Failed to send acceptance message:", error);
            toast.error(
              `Accepted the request, but couldn't send confirmation to ${friendName}`
            );
          }
        }

        toast.success(`Accepted sync request from ${friendName}`);
      } catch (error) {
        console.error("Failed to accept sync request:", error);
        setPendingSyncRequest(null);
        toast.error(`Failed to accept sync request from ${friendName}`);
      }
    },
    [
      pendingSyncRequest,
      decompressSkinData,
      addPartyMember,
      selectedSkins,
      setPendingSyncRequest,
      compressSkinData,
      leaguePath,
    ]
  );

  // Reject a sync request from a friend
  const rejectSync = useCallback(
    (friendId: string) => {
      // Remove from party if they're in it
      removePartyMember(friendId);

      // If this was rejecting a pending request, clear it and send rejection
      if (pendingSyncRequest && pendingSyncRequest.memberId === friendId) {
        setPendingSyncRequest(null);

        // Send rejection message if league path is set
        if (leaguePath) {
          // Send rejection message
          const rejectionData: SkinSyncData = {
            userSkins: [],
            requestType: "reject",
            version: 1,
          };

          try {
            // Compress and encode rejection
            const encodedRejection = compressSkinData(rejectionData);
            const rejectionMessage = `[OSS-SKIN-SYNC]${encodedRejection}[/OSS-SKIN-SYNC]`;

            // Send the rejection via LCU API
            invoke("send_lcu_message", {
              leaguePath,
              friendId,
              message: rejectionMessage,
            });
          } catch (error) {
            console.error("Failed to send rejection:", error);
          }
        }

        toast.info(`Rejected sync request`);
      } else {
        toast.info(`Removed player from party`);
      }
    },
    [
      pendingSyncRequest,
      removePartyMember,
      setPendingSyncRequest,
      compressSkinData,
      leaguePath,
    ]
  );

  // Handle an incoming message to detect sync requests
  const handleIncomingMessage = useCallback(
    (message: string, senderId: string, senderName: string) => {
      // Check if the message is a skin sync message
      const syncPattern = /\[OSS-SKIN-SYNC\](.*?)\[\/OSS-SKIN-SYNC\]/;
      const match = message.match(syncPattern);

      if (match && match[1]) {
        try {
          const encodedData = match[1];
          const decodedData = decompressSkinData(encodedData);

          switch (decodedData.requestType) {
            case "request":
              // It's a new sync request
              setPendingSyncRequest({
                memberId: senderId,
                memberName: senderName,
                data: encodedData,
              });
              toast.info(`Received sync request from ${senderName}`);
              break;

            case "accept":
              // A friend accepted our request
              if (partyMembers.some((m) => m.id === senderId)) {
                // Create a map of skins from the friend
                const friendSkins = new Map();
                decodedData.userSkins.forEach((skin) => {
                  friendSkins.set(skin.championId, {
                    championId: skin.championId,
                    skinId: skin.skinId,
                    chromaId: skin.chromaId || undefined,
                    fantome: skin.fantome || undefined,
                  });
                });

                // Update the friend's skins
                updatePartyMemberSkins(senderId, friendSkins);
                toast.success(`${senderName} accepted your sync request`);
              }
              break;

            case "reject":
              // A friend rejected our request
              removePartyMember(senderId);
              toast.info(`${senderName} rejected your sync request`);
              break;
          }
        } catch (error) {
          console.error("Failed to process skin sync message:", error);
        }
      }
    },
    [
      decompressSkinData,
      setPendingSyncRequest,
      partyMembers,
      updatePartyMemberSkins,
      removePartyMember,
    ]
  );

  // Function to find a party member's skin for a given champion
  const getPartySkinForChampion = useCallback(
    (championId: number) => {
      // Check if any party member has a skin for this champion
      for (const member of partyMembers) {
        if (member.skins.has(championId)) {
          return member.skins.get(championId);
        }
      }
      return null;
    },
    [partyMembers]
  );

  // Modified game injection logic to include party member skins
  const injectWithPartySkins = useCallback(
    async (championId: number) => {
      try {
        // First, check if the user has selected a skin for this champion
        const userSkin = selectedSkins.get(championId);

        // Then check if any party member has a skin for this champion
        const partySkin = getPartySkinForChampion(championId);

        // If neither the user nor any party member has a skin for this champion, do nothing
        if (!userSkin && !partySkin) {
          return;
        }

        // Prefer user's own skin selection, fall back to party member's skin
        const skinToInject = userSkin || partySkin;

        if (skinToInject && leaguePath) {
          // Use the existing inject_skins Tauri command
          await invoke("inject_skins", {
            app: window.__TAURI__,
            request: {
              league_path: leaguePath,
              skins: [
                {
                  champion_id: skinToInject.championId,
                  skin_id: skinToInject.skinId,
                  chroma_id: skinToInject.chromaId,
                  fantome_path: skinToInject.fantome,
                },
              ],
            },
          });

          if (partySkin && !userSkin) {
            // Notify if using a party member's skin
            toast.info(`Using party member's skin for champion ${championId}`);
          }
        }
      } catch (error) {
        console.error(
          `Failed to inject party skin for champion ${championId}:`,
          error
        );
        toast.error(`Failed to inject skin for champion ${championId}`);
      }
    },
    [selectedSkins, partyMembers, leaguePath, getPartySkinForChampion]
  );

  return {
    activePartyMembers: partyMembers,
    pendingSyncRequest,
    sendSyncRequest,
    acceptSync,
    rejectSync,
    handleIncomingMessage,
    injectWithPartySkins,
    getPartySkinForChampion,
    checkPendingSyncRequests, // Expose the check function for manual triggers
  };
}


//-==================== END OF FILE: src\lib\hooks\use-skin-sync.ts ====================-//

//-==================== START OF FILE: src\lib\store.ts ====================-//

import { create } from "zustand";
import { CustomSkin } from "./types";

interface SelectedSkin {
  championId: number;
  skinId: number;
  chromaId?: number;
  fantome?: string; // Add fantome path
}

// Define the possible injection statuses
export type InjectionStatus = "idle" | "injecting" | "success" | "error";

// Custom skin tabs
export type SkinTab = "official" | "custom";

// Party member interface
export interface PartyMember {
  id: string;
  name: string;
  availability: "online" | "away" | "offline" | "in-game";
  skins: Map<number, SelectedSkin>; // Map of champion ID to selected skin
}

interface GameState {
  leaguePath: string | null;
  lcuStatus: string | null;
  injectionStatus: InjectionStatus;
  selectedSkins: Map<number, SelectedSkin>;
  favorites: Set<number>;
  hasCompletedOnboarding: boolean;
  activeTab: SkinTab;
  customSkins: Map<number, CustomSkin[]>;
  // Data update settings
  autoUpdateData: boolean;
  hasNewDataUpdate: boolean;
  // Party mode state
  partyMembers: PartyMember[];
  pendingSyncRequest: {
    memberId: string;
    memberName: string;
    data: string;
  } | null;
  // Methods
  setLeaguePath: (path: string) => void;
  setLcuStatus: (status: string) => void;
  setInjectionStatus: (status: InjectionStatus) => void;
  selectSkin: (
    championId: number,
    skinId: number,
    chromaId?: number,
    fantome?: string
  ) => void;
  clearSelection: (championId: number) => void;
  clearAllSelections: () => void;
  toggleFavorite: (championId: number) => void;
  setFavorites: (favorites: Set<number>) => void;
  setHasCompletedOnboarding: (completed: boolean) => void;
  setActiveTab: (tab: SkinTab) => void;
  addCustomSkin: (skin: CustomSkin) => void;
  removeCustomSkin: (skinId: string) => void;
  setCustomSkins: (skins: CustomSkin[]) => void;
  // Data update methods
  setAutoUpdateData: (autoUpdate: boolean) => void;
  setHasNewDataUpdate: (hasUpdate: boolean) => void;
  // Party mode methods
  addPartyMember: (member: PartyMember) => void;
  removePartyMember: (memberId: string) => void;
  updatePartyMemberSkins: (
    memberId: string,
    skins: Map<number, SelectedSkin>
  ) => void;
  clearParty: () => void;
  setPendingSyncRequest: (
    request: { memberId: string; memberName: string; data: string } | null
  ) => void;
}

export const useGameStore = create<GameState>((set) => ({
  leaguePath: null,
  lcuStatus: null,
  injectionStatus: "idle", // Default status
  selectedSkins: new Map(),
  favorites: new Set(),
  hasCompletedOnboarding: false,
  activeTab: "official", // Default to official skins tab
  customSkins: new Map(),
  // Data update settings
  autoUpdateData: true, // Default to auto-update enabled
  hasNewDataUpdate: false,
  // Party mode state
  partyMembers: [],
  pendingSyncRequest: null,
  setLeaguePath: (path) => {
    set({ leaguePath: path });
  },
  setLcuStatus: (status) => {
    set({ lcuStatus: status });
  },
  setInjectionStatus: (status) => {
    // Add implementation
    set({ injectionStatus: status });
  },
  selectSkin: (championId, skinId, chromaId, fantome) => {
    set((state) => {
      const newSelectedSkins = new Map(state.selectedSkins);
      newSelectedSkins.set(championId, {
        championId,
        skinId,
        chromaId,
        fantome,
      });
      return { selectedSkins: newSelectedSkins };
    });
  },
  clearSelection: (championId) => {
    set((state) => {
      const newSelectedSkins = new Map(state.selectedSkins);
      newSelectedSkins.delete(championId);
      return { selectedSkins: newSelectedSkins };
    });
  },
  clearAllSelections: () => {
    set({ selectedSkins: new Map() });
  },
  toggleFavorite: (championId) => {
    set((state) => {
      const newFavorites = new Set(state.favorites);
      if (newFavorites.has(championId)) {
        newFavorites.delete(championId);
      } else {
        newFavorites.add(championId);
      }
      return { favorites: newFavorites };
    });
  },
  setFavorites: (favorites) => {
    set({ favorites });
  },
  setHasCompletedOnboarding: (completed) => {
    set({ hasCompletedOnboarding: completed });
    if (typeof window !== "undefined") {
      localStorage.setItem("hasCompletedOnboarding", completed.toString());
    }
  },
  setActiveTab: (tab) => {
    set({ activeTab: tab });
    if (typeof window !== "undefined") {
      localStorage.setItem("activeSkinsTab", tab);
    }
  },
  addCustomSkin: (skin) => {
    set((state) => {
      const newCustomSkins = new Map(state.customSkins);
      const championId = skin.champion_id;
      const existingSkins = newCustomSkins.get(championId) ?? [];
      newCustomSkins.set(championId, [...existingSkins, skin]);
      return { customSkins: newCustomSkins };
    });
  },
  removeCustomSkin: (skinId) => {
    set((state) => {
      const newCustomSkins = new Map(state.customSkins);

      // Find which champion has this skin
      for (const [championId, skins] of newCustomSkins.entries()) {
        const updatedSkins = skins.filter((skin) => skin.id !== skinId);

        if (updatedSkins.length !== skins.length) {
          // We found and removed the skin
          if (updatedSkins.length === 0) {
            newCustomSkins.delete(championId);
          } else {
            newCustomSkins.set(championId, updatedSkins);
          }
          break;
        }
      }

      return { customSkins: newCustomSkins };
    });
  },
  setCustomSkins: (skins) => {
    set(() => {
      const customSkinsMap = new Map<number, CustomSkin[]>();

      // Group skins by champion ID
      skins.forEach((skin) => {
        const championId = skin.champion_id;
        const existingSkins = customSkinsMap.get(championId) ?? [];
        customSkinsMap.set(championId, [...existingSkins, skin]);
      });

      return { customSkins: customSkinsMap };
    });
  },
  // Data update methods
  setAutoUpdateData: (autoUpdate) => {
    set({ autoUpdateData: autoUpdate });
    if (typeof window !== "undefined") {
      localStorage.setItem("autoUpdateData", autoUpdate.toString());
    }
  },
  setHasNewDataUpdate: (hasUpdate) => {
    set({ hasNewDataUpdate: hasUpdate });
  },
  // Party mode methods
  addPartyMember: (member) => {
    set((state) => {
      // Don't add duplicates
      if (state.partyMembers.some((m) => m.id === member.id)) {
        return state;
      }
      // Max party size is 5 (including the user)
      if (state.partyMembers.length >= 4) {
        return state;
      }
      return { partyMembers: [...state.partyMembers, member] };
    });
  },
  removePartyMember: (memberId) => {
    set((state) => ({
      partyMembers: state.partyMembers.filter((m) => m.id !== memberId),
    }));
  },
  updatePartyMemberSkins: (memberId, skins) => {
    set((state) => ({
      partyMembers: state.partyMembers.map((member) =>
        member.id === memberId ? { ...member, skins } : member
      ),
    }));
  },
  clearParty: () => {
    set({ partyMembers: [] });
  },
  setPendingSyncRequest: (request) => {
    set({ pendingSyncRequest: request });
  },
}));

// Terminal log store
export interface TerminalLog {
  message: string;
  log_type: string;
  timestamp: string;
}

interface TerminalLogState {
  logs: TerminalLog[];
  addLog: (log: TerminalLog) => void;
  clearLogs: () => void;
}

export const useTerminalLogStore = create<TerminalLogState>((set) => ({
  logs: [],
  addLog: (log) => {
    set((state) => ({ logs: [...state.logs, log] }));
  },
  clearLogs: () => {
    set({ logs: [] });
  },
}));


//-==================== END OF FILE: src\lib\store.ts ====================-//

//-==================== START OF FILE: src\lib\types.ts ====================-//

export interface ChromaInSummary {
  id: number;
  name: string;
  colors: string[];
  skinChromaPath: string;
  fantome?: string; // Path to the chroma's fantome file
}

export interface ChampionInSummary {
  id: number;
  name: string;
  alias: string;
  squarePortraitPath: string;
}

export interface Chroma {
  id: number;
  name: string;
  skinChromaPath: string;
  colors: string[];
  description?: string;
  rarity?: string;
  fantome?: string;
}

export interface Skin {
  id: number;
  name: string;
  skinSrc: string;
  isBase: boolean;
  skinType?: string;
  rarity: string;
  featuresText: string | null;
  chromas: Chroma[];
  fantome?: string;
}

export interface Champion {
  id: number;
  name: string;
  alias: string;
  iconSrc: string;
  splashImage?: string;
  squareImage?: string;
  skins: Skin[];
  lastUpdated: number;
}

export interface DataUpdateProgress {
  currentChampion: string;
  totalChampions: number;
  processedChampions: number;
  status: "checking" | "downloading" | "processing";
  progress: number;
}

export interface DataUpdateResult {
  success: boolean;
  error?: string;
  updatedChampions?: string[];
  has_update: boolean;
  current_version?: string;
  available_version?: string;
  update_message?: string;
}

// Custom skin type for user uploaded skins
export interface CustomSkin {
  id: string;
  name: string;
  champion_id: number;
  champion_name: string;
  file_path: string;
  created_at: number;
  preview_image?: string;
}

export interface ThemePreferences {
  tone?: string;
  isDark?: boolean;
  autoUpdateChampionData?: boolean;
}


//-==================== END OF FILE: src\lib\types.ts ====================-//

//-==================== START OF FILE: src\lib\utils\champion-utils.ts ====================-//

import { Champion } from "@/lib/types";

/**
 * Filter and sort champions based on search query and favorites
 */
export function filterAndSortChampions(
  champions: Champion[],
  searchQuery: string,
  favorites: Set<number>
): Champion[] {
  return champions
    .filter((champion) =>
      champion.name.toLowerCase().includes(searchQuery.toLowerCase())
    )
    .sort((a, b) => {
      // First sort by favorite status
      const aFav = favorites.has(a.id);
      const bFav = favorites.has(b.id);
      if (aFav && !bFav) return -1;
      if (!aFav && bFav) return 1;

      // Then by search relevance
      if (searchQuery) {
        const aStarts = a.name
          .toLowerCase()
          .startsWith(searchQuery.toLowerCase());
        const bStarts = b.name
          .toLowerCase()
          .startsWith(searchQuery.toLowerCase());
        if (aStarts && !bStarts) return -1;
        if (!aStarts && bStarts) return 1;
      }

      // Finally alphabetically
      return a.name.localeCompare(b.name);
    });
}

/**
 * Get champion match score for search relevance
 */
export function getMatchScore(championName: string, query: string): number {
  const normalizedName = championName.toLowerCase();
  const normalizedQuery = query.toLowerCase();

  // Exact match gets highest score
  if (normalizedName === normalizedQuery) return 100;

  // Starts with query gets high score
  if (normalizedName.startsWith(normalizedQuery)) return 80;

  // Contains query as a word gets medium score
  if (normalizedName.includes(` ${normalizedQuery}`)) return 60;

  // Contains query gets low score
  if (normalizedName.includes(normalizedQuery)) return 40;

  // No match
  return 0;
}


//-==================== END OF FILE: src\lib\utils\champion-utils.ts ====================-//

//-==================== START OF FILE: src\lib\utils.ts ====================-//

import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}


//-==================== END OF FILE: src\lib\utils.ts ====================-//

//-==================== START OF FILE: src-tauri\build.rs ====================-//

use cmake;
use std::{env, fs, path::Path, process::Command};

fn main() {
  // Determine build profile to avoid infinite rebuild loop in dev
  let profile = env::var("PROFILE").unwrap_or_default();
  if profile != "release" {
    // Skip C++ build and resource copy in debug/dev mode
    tauri_build::build();
    return;
  }
  // Build mod-tools C++ binary before Tauri bundle validation
  // Build mod-tools C++ binary from cslol-tools source
  let dst = cmake::Config::new("./cslol-tools")
    .profile("Release")
    // Add policy to handle older CMake configurations
    .define("CMAKE_POLICY_DEFAULT_CMP0048", "NEW")
    .define("CMAKE_POLICY_VERSION_MINIMUM", "3.5")
    // Build only the mod-tools executable target (skip install step)
    .build_target("mod-tools")
    .build();
  // Path to generated exe
  let exe_src = dst.join("build").join("Release").join("mod-tools.exe");
  // Output resources directory in src-tauri for bundling
  let out_resources = Path::new(&env::var("CARGO_MANIFEST_DIR").unwrap())
    .join("resources").join("cslol-tools");
  fs::create_dir_all(&out_resources).expect("Failed to create resources/cslol-tools directory");
  fs::copy(&exe_src, out_resources.join("mod-tools.exe")).expect("Failed to copy mod-tools.exe");
  
  // Pre-build default empty overlays for faster first-time injection
  pre_build_default_overlays(&out_resources.join("mod-tools.exe"), &out_resources);
  
  // Copy dependent DLLs and PDBs
  let build_dir = dst.join("build").join("Release");
  for entry in fs::read_dir(&build_dir).expect("Failed to read build directory") {
    let path = entry.expect("Invalid entry").path();
    if let Some(ext) = path.extension() {
      if ext == "dll" || ext == "pdb" {
        let name = path.file_name().unwrap();
        fs::copy(&path, out_resources.join(name)).expect("Failed to copy dependency");
      }
    }
  }

  // Run Tauri build (bundles resources including cslol-tools)
  tauri_build::build();
}

/// Create pre-built empty overlays to speed up first injection
fn pre_build_default_overlays(mod_tools_path: &Path, resources_dir: &Path) {
  println!("Building pre-generated overlay templates...");
  
  // Create empty mods directory structure
  let temp_dir = resources_dir.join("temp_build");
  let mods_dir = temp_dir.join("mods");
  let empty_overlay_dir = resources_dir.join("empty_overlay");
  
  // Clean up any previous build artifacts
  if temp_dir.exists() {
    fs::remove_dir_all(&temp_dir).expect("Failed to clean temp directory");
  }
  if empty_overlay_dir.exists() {
    fs::remove_dir_all(&empty_overlay_dir).expect("Failed to clean empty overlay directory");
  }
  
  // Create the directories
  fs::create_dir_all(&mods_dir).expect("Failed to create temporary mods directory");
  fs::create_dir_all(&empty_overlay_dir).expect("Failed to create empty overlay directory");
  
  // Create a dummy empty mod to ensure the structure is valid
  let dummy_mod_dir = mods_dir.join("empty_mod");
  fs::create_dir_all(&dummy_mod_dir.join("META")).expect("Failed to create META directory");
  fs::create_dir_all(&dummy_mod_dir.join("WAD")).expect("Failed to create WAD directory");
  
  // Create a basic info.json
  let info_json = r#"{
    "Name": "EmptyMod",
    "Version": "1.0.0",
    "Author": "osskins",
    "Description": "Pre-built empty mod for faster first injection"
  }"#;
  fs::write(dummy_mod_dir.join("META").join("info.json"), info_json)
    .expect("Failed to write info.json");
  
  // Run mod-tools to create an empty overlay
  // Use an arbitrary game path since we're just creating a template
  let game_path = temp_dir.join("game");
  fs::create_dir_all(&game_path).expect("Failed to create temporary game directory");
  
  // First try with cmd.exe to avoid potential PowerShell issues
  let status = Command::new("cmd")
    .args([
      "/C", 
      mod_tools_path.to_str().unwrap(),
      "mkoverlay",
      mods_dir.to_str().unwrap(),
      empty_overlay_dir.to_str().unwrap(),
      &format!("--game:{}", game_path.to_str().unwrap()),
      "--mods:empty_mod",
      "--noTFT",
      "--ignoreConflict"
    ])
    .status();
  
  match status {
    Ok(exit_status) => {
      if exit_status.success() {
        println!("Successfully pre-built empty overlay");
      } else {
        println!("Warning: Failed to pre-build empty overlay (Exit code: {:?})", exit_status.code());
      }
    },
    Err(e) => {
      println!("Warning: Failed to execute mod-tools for pre-building overlay: {}", e);
    }
  }
  
  // Clean up the temp directory
  if temp_dir.exists() {
    let _ = fs::remove_dir_all(&temp_dir);
  }
}


//-==================== END OF FILE: src-tauri\build.rs ====================-//

//-==================== START OF FILE: src-tauri\capabilities\default.json ====================-//

{
  "$schema": "../gen/schemas/desktop-schema.json",
  "identifier": "default",
  "description": "enables the default permissions",
  "windows": [
    "main"
  ],
  "permissions": [
    "fs:default",
    {
      "identifier": "fs:allow-exists",
      "allow": [
        {
          "path": "$APPDATA/*"
        }
      ]
    },
    {
      "identifier": "fs:allow-read",
      "allow": [
        {
          "path": "$APPDATA/*"
        }
      ]
    },
    {
      "identifier": "fs:allow-write",
      "allow": [
        {
          "path": "$APPDATA/*"
        }
      ]
    },
    {
      "identifier": "fs:allow-remove",
      "allow": [
        {
          "path": "$APPDATA/*"
        }
      ]
    },
    {
      "identifier": "fs:scope",
      "allow": [
        {
          "path": "$APPDATA"
        },
        {
          "path": "$APPDATA/**"
        }
      ]
    },
    "core:path:default",
    {
      "identifier": "core:path:allow-resolve-directory",
      "allow": [
        {
          "path": "$APPDATA"
        },
        {
          "path": "$APPDATA/**"
        }
      ]
    },
    "core:event:default",
    "core:event:allow-listen",
    "core:window:default",
    "core:window:allow-close",
    "core:window:allow-maximize",
    "core:window:allow-minimize",
    "core:window:allow-is-maximized",
    "core:window:allow-unmaximize",
    "core:window:allow-start-dragging",
    "shell:allow-open"
  ]
}

//-==================== END OF FILE: src-tauri\capabilities\default.json ====================-//

//-==================== START OF FILE: src-tauri\gen\schemas\acl-manifests.json ====================-//

{"core":{"default_permission":{"identifier":"default","description":"Default core plugins set.","permissions":["core:path:default","core:event:default","core:window:default","core:webview:default","core:app:default","core:image:default","core:resources:default","core:menu:default","core:tray:default"]},"permissions":{},"permission_sets":{},"global_scope_schema":null},"core:app":{"default_permission":{"identifier":"default","description":"Default permissions for the plugin.","permissions":["allow-version","allow-name","allow-tauri-version","allow-identifier"]},"permissions":{"allow-app-hide":{"identifier":"allow-app-hide","description":"Enables the app_hide command without any pre-configured scope.","commands":{"allow":["app_hide"],"deny":[]}},"allow-app-show":{"identifier":"allow-app-show","description":"Enables the app_show command without any pre-configured scope.","commands":{"allow":["app_show"],"deny":[]}},"allow-default-window-icon":{"identifier":"allow-default-window-icon","description":"Enables the default_window_icon command without any pre-configured scope.","commands":{"allow":["default_window_icon"],"deny":[]}},"allow-fetch-data-store-identifiers":{"identifier":"allow-fetch-data-store-identifiers","description":"Enables the fetch_data_store_identifiers command without any pre-configured scope.","commands":{"allow":["fetch_data_store_identifiers"],"deny":[]}},"allow-identifier":{"identifier":"allow-identifier","description":"Enables the identifier command without any pre-configured scope.","commands":{"allow":["identifier"],"deny":[]}},"allow-name":{"identifier":"allow-name","description":"Enables the name command without any pre-configured scope.","commands":{"allow":["name"],"deny":[]}},"allow-remove-data-store":{"identifier":"allow-remove-data-store","description":"Enables the remove_data_store command without any pre-configured scope.","commands":{"allow":["remove_data_store"],"deny":[]}},"allow-set-app-theme":{"identifier":"allow-set-app-theme","description":"Enables the set_app_theme command without any pre-configured scope.","commands":{"allow":["set_app_theme"],"deny":[]}},"allow-set-dock-visibility":{"identifier":"allow-set-dock-visibility","description":"Enables the set_dock_visibility command without any pre-configured scope.","commands":{"allow":["set_dock_visibility"],"deny":[]}},"allow-tauri-version":{"identifier":"allow-tauri-version","description":"Enables the tauri_version command without any pre-configured scope.","commands":{"allow":["tauri_version"],"deny":[]}},"allow-version":{"identifier":"allow-version","description":"Enables the version command without any pre-configured scope.","commands":{"allow":["version"],"deny":[]}},"deny-app-hide":{"identifier":"deny-app-hide","description":"Denies the app_hide command without any pre-configured scope.","commands":{"allow":[],"deny":["app_hide"]}},"deny-app-show":{"identifier":"deny-app-show","description":"Denies the app_show command without any pre-configured scope.","commands":{"allow":[],"deny":["app_show"]}},"deny-default-window-icon":{"identifier":"deny-default-window-icon","description":"Denies the default_window_icon command without any pre-configured scope.","commands":{"allow":[],"deny":["default_window_icon"]}},"deny-fetch-data-store-identifiers":{"identifier":"deny-fetch-data-store-identifiers","description":"Denies the fetch_data_store_identifiers command without any pre-configured scope.","commands":{"allow":[],"deny":["fetch_data_store_identifiers"]}},"deny-identifier":{"identifier":"deny-identifier","description":"Denies the identifier command without any pre-configured scope.","commands":{"allow":[],"deny":["identifier"]}},"deny-name":{"identifier":"deny-name","description":"Denies the name command without any pre-configured scope.","commands":{"allow":[],"deny":["name"]}},"deny-remove-data-store":{"identifier":"deny-remove-data-store","description":"Denies the remove_data_store command without any pre-configured scope.","commands":{"allow":[],"deny":["remove_data_store"]}},"deny-set-app-theme":{"identifier":"deny-set-app-theme","description":"Denies the set_app_theme command without any pre-configured scope.","commands":{"allow":[],"deny":["set_app_theme"]}},"deny-set-dock-visibility":{"identifier":"deny-set-dock-visibility","description":"Denies the set_dock_visibility command without any pre-configured scope.","commands":{"allow":[],"deny":["set_dock_visibility"]}},"deny-tauri-version":{"identifier":"deny-tauri-version","description":"Denies the tauri_version command without any pre-configured scope.","commands":{"allow":[],"deny":["tauri_version"]}},"deny-version":{"identifier":"deny-version","description":"Denies the version command without any pre-configured scope.","commands":{"allow":[],"deny":["version"]}}},"permission_sets":{},"global_scope_schema":null},"core:event":{"default_permission":{"identifier":"default","description":"Default permissions for the plugin, which enables all commands.","permissions":["allow-listen","allow-unlisten","allow-emit","allow-emit-to"]},"permissions":{"allow-emit":{"identifier":"allow-emit","description":"Enables the emit command without any pre-configured scope.","commands":{"allow":["emit"],"deny":[]}},"allow-emit-to":{"identifier":"allow-emit-to","description":"Enables the emit_to command without any pre-configured scope.","commands":{"allow":["emit_to"],"deny":[]}},"allow-listen":{"identifier":"allow-listen","description":"Enables the listen command without any pre-configured scope.","commands":{"allow":["listen"],"deny":[]}},"allow-unlisten":{"identifier":"allow-unlisten","description":"Enables the unlisten command without any pre-configured scope.","commands":{"allow":["unlisten"],"deny":[]}},"deny-emit":{"identifier":"deny-emit","description":"Denies the emit command without any pre-configured scope.","commands":{"allow":[],"deny":["emit"]}},"deny-emit-to":{"identifier":"deny-emit-to","description":"Denies the emit_to command without any pre-configured scope.","commands":{"allow":[],"deny":["emit_to"]}},"deny-listen":{"identifier":"deny-listen","description":"Denies the listen command without any pre-configured scope.","commands":{"allow":[],"deny":["listen"]}},"deny-unlisten":{"identifier":"deny-unlisten","description":"Denies the unlisten command without any pre-configured scope.","commands":{"allow":[],"deny":["unlisten"]}}},"permission_sets":{},"global_scope_schema":null},"core:image":{"default_permission":{"identifier":"default","description":"Default permissions for the plugin, which enables all commands.","permissions":["allow-new","allow-from-bytes","allow-from-path","allow-rgba","allow-size"]},"permissions":{"allow-from-bytes":{"identifier":"allow-from-bytes","description":"Enables the from_bytes command without any pre-configured scope.","commands":{"allow":["from_bytes"],"deny":[]}},"allow-from-path":{"identifier":"allow-from-path","description":"Enables the from_path command without any pre-configured scope.","commands":{"allow":["from_path"],"deny":[]}},"allow-new":{"identifier":"allow-new","description":"Enables the new command without any pre-configured scope.","commands":{"allow":["new"],"deny":[]}},"allow-rgba":{"identifier":"allow-rgba","description":"Enables the rgba command without any pre-configured scope.","commands":{"allow":["rgba"],"deny":[]}},"allow-size":{"identifier":"allow-size","description":"Enables the size command without any pre-configured scope.","commands":{"allow":["size"],"deny":[]}},"deny-from-bytes":{"identifier":"deny-from-bytes","description":"Denies the from_bytes command without any pre-configured scope.","commands":{"allow":[],"deny":["from_bytes"]}},"deny-from-path":{"identifier":"deny-from-path","description":"Denies the from_path command without any pre-configured scope.","commands":{"allow":[],"deny":["from_path"]}},"deny-new":{"identifier":"deny-new","description":"Denies the new command without any pre-configured scope.","commands":{"allow":[],"deny":["new"]}},"deny-rgba":{"identifier":"deny-rgba","description":"Denies the rgba command without any pre-configured scope.","commands":{"allow":[],"deny":["rgba"]}},"deny-size":{"identifier":"deny-size","description":"Denies the size command without any pre-configured scope.","commands":{"allow":[],"deny":["size"]}}},"permission_sets":{},"global_scope_schema":null},"core:menu":{"default_permission":{"identifier":"default","description":"Default permissions for the plugin, which enables all commands.","permissions":["allow-new","allow-append","allow-prepend","allow-insert","allow-remove","allow-remove-at","allow-items","allow-get","allow-popup","allow-create-default","allow-set-as-app-menu","allow-set-as-window-menu","allow-text","allow-set-text","allow-is-enabled","allow-set-enabled","allow-set-accelerator","allow-set-as-windows-menu-for-nsapp","allow-set-as-help-menu-for-nsapp","allow-is-checked","allow-set-checked","allow-set-icon"]},"permissions":{"allow-append":{"identifier":"allow-append","description":"Enables the append command without any pre-configured scope.","commands":{"allow":["append"],"deny":[]}},"allow-create-default":{"identifier":"allow-create-default","description":"Enables the create_default command without any pre-configured scope.","commands":{"allow":["create_default"],"deny":[]}},"allow-get":{"identifier":"allow-get","description":"Enables the get command without any pre-configured scope.","commands":{"allow":["get"],"deny":[]}},"allow-insert":{"identifier":"allow-insert","description":"Enables the insert command without any pre-configured scope.","commands":{"allow":["insert"],"deny":[]}},"allow-is-checked":{"identifier":"allow-is-checked","description":"Enables the is_checked command without any pre-configured scope.","commands":{"allow":["is_checked"],"deny":[]}},"allow-is-enabled":{"identifier":"allow-is-enabled","description":"Enables the is_enabled command without any pre-configured scope.","commands":{"allow":["is_enabled"],"deny":[]}},"allow-items":{"identifier":"allow-items","description":"Enables the items command without any pre-configured scope.","commands":{"allow":["items"],"deny":[]}},"allow-new":{"identifier":"allow-new","description":"Enables the new command without any pre-configured scope.","commands":{"allow":["new"],"deny":[]}},"allow-popup":{"identifier":"allow-popup","description":"Enables the popup command without any pre-configured scope.","commands":{"allow":["popup"],"deny":[]}},"allow-prepend":{"identifier":"allow-prepend","description":"Enables the prepend command without any pre-configured scope.","commands":{"allow":["prepend"],"deny":[]}},"allow-remove":{"identifier":"allow-remove","description":"Enables the remove command without any pre-configured scope.","commands":{"allow":["remove"],"deny":[]}},"allow-remove-at":{"identifier":"allow-remove-at","description":"Enables the remove_at command without any pre-configured scope.","commands":{"allow":["remove_at"],"deny":[]}},"allow-set-accelerator":{"identifier":"allow-set-accelerator","description":"Enables the set_accelerator command without any pre-configured scope.","commands":{"allow":["set_accelerator"],"deny":[]}},"allow-set-as-app-menu":{"identifier":"allow-set-as-app-menu","description":"Enables the set_as_app_menu command without any pre-configured scope.","commands":{"allow":["set_as_app_menu"],"deny":[]}},"allow-set-as-help-menu-for-nsapp":{"identifier":"allow-set-as-help-menu-for-nsapp","description":"Enables the set_as_help_menu_for_nsapp command without any pre-configured scope.","commands":{"allow":["set_as_help_menu_for_nsapp"],"deny":[]}},"allow-set-as-window-menu":{"identifier":"allow-set-as-window-menu","description":"Enables the set_as_window_menu command without any pre-configured scope.","commands":{"allow":["set_as_window_menu"],"deny":[]}},"allow-set-as-windows-menu-for-nsapp":{"identifier":"allow-set-as-windows-menu-for-nsapp","description":"Enables the set_as_windows_menu_for_nsapp command without any pre-configured scope.","commands":{"allow":["set_as_windows_menu_for_nsapp"],"deny":[]}},"allow-set-checked":{"identifier":"allow-set-checked","description":"Enables the set_checked command without any pre-configured scope.","commands":{"allow":["set_checked"],"deny":[]}},"allow-set-enabled":{"identifier":"allow-set-enabled","description":"Enables the set_enabled command without any pre-configured scope.","commands":{"allow":["set_enabled"],"deny":[]}},"allow-set-icon":{"identifier":"allow-set-icon","description":"Enables the set_icon command without any pre-configured scope.","commands":{"allow":["set_icon"],"deny":[]}},"allow-set-text":{"identifier":"allow-set-text","description":"Enables the set_text command without any pre-configured scope.","commands":{"allow":["set_text"],"deny":[]}},"allow-text":{"identifier":"allow-text","description":"Enables the text command without any pre-configured scope.","commands":{"allow":["text"],"deny":[]}},"deny-append":{"identifier":"deny-append","description":"Denies the append command without any pre-configured scope.","commands":{"allow":[],"deny":["append"]}},"deny-create-default":{"identifier":"deny-create-default","description":"Denies the create_default command without any pre-configured scope.","commands":{"allow":[],"deny":["create_default"]}},"deny-get":{"identifier":"deny-get","description":"Denies the get command without any pre-configured scope.","commands":{"allow":[],"deny":["get"]}},"deny-insert":{"identifier":"deny-insert","description":"Denies the insert command without any pre-configured scope.","commands":{"allow":[],"deny":["insert"]}},"deny-is-checked":{"identifier":"deny-is-checked","description":"Denies the is_checked command without any pre-configured scope.","commands":{"allow":[],"deny":["is_checked"]}},"deny-is-enabled":{"identifier":"deny-is-enabled","description":"Denies the is_enabled command without any pre-configured scope.","commands":{"allow":[],"deny":["is_enabled"]}},"deny-items":{"identifier":"deny-items","description":"Denies the items command without any pre-configured scope.","commands":{"allow":[],"deny":["items"]}},"deny-new":{"identifier":"deny-new","description":"Denies the new command without any pre-configured scope.","commands":{"allow":[],"deny":["new"]}},"deny-popup":{"identifier":"deny-popup","description":"Denies the popup command without any pre-configured scope.","commands":{"allow":[],"deny":["popup"]}},"deny-prepend":{"identifier":"deny-prepend","description":"Denies the prepend command without any pre-configured scope.","commands":{"allow":[],"deny":["prepend"]}},"deny-remove":{"identifier":"deny-remove","description":"Denies the remove command without any pre-configured scope.","commands":{"allow":[],"deny":["remove"]}},"deny-remove-at":{"identifier":"deny-remove-at","description":"Denies the remove_at command without any pre-configured scope.","commands":{"allow":[],"deny":["remove_at"]}},"deny-set-accelerator":{"identifier":"deny-set-accelerator","description":"Denies the set_accelerator command without any pre-configured scope.","commands":{"allow":[],"deny":["set_accelerator"]}},"deny-set-as-app-menu":{"identifier":"deny-set-as-app-menu","description":"Denies the set_as_app_menu command without any pre-configured scope.","commands":{"allow":[],"deny":["set_as_app_menu"]}},"deny-set-as-help-menu-for-nsapp":{"identifier":"deny-set-as-help-menu-for-nsapp","description":"Denies the set_as_help_menu_for_nsapp command without any pre-configured scope.","commands":{"allow":[],"deny":["set_as_help_menu_for_nsapp"]}},"deny-set-as-window-menu":{"identifier":"deny-set-as-window-menu","description":"Denies the set_as_window_menu command without any pre-configured scope.","commands":{"allow":[],"deny":["set_as_window_menu"]}},"deny-set-as-windows-menu-for-nsapp":{"identifier":"deny-set-as-windows-menu-for-nsapp","description":"Denies the set_as_windows_menu_for_nsapp command without any pre-configured scope.","commands":{"allow":[],"deny":["set_as_windows_menu_for_nsapp"]}},"deny-set-checked":{"identifier":"deny-set-checked","description":"Denies the set_checked command without any pre-configured scope.","commands":{"allow":[],"deny":["set_checked"]}},"deny-set-enabled":{"identifier":"deny-set-enabled","description":"Denies the set_enabled command without any pre-configured scope.","commands":{"allow":[],"deny":["set_enabled"]}},"deny-set-icon":{"identifier":"deny-set-icon","description":"Denies the set_icon command without any pre-configured scope.","commands":{"allow":[],"deny":["set_icon"]}},"deny-set-text":{"identifier":"deny-set-text","description":"Denies the set_text command without any pre-configured scope.","commands":{"allow":[],"deny":["set_text"]}},"deny-text":{"identifier":"deny-text","description":"Denies the text command without any pre-configured scope.","commands":{"allow":[],"deny":["text"]}}},"permission_sets":{},"global_scope_schema":null},"core:path":{"default_permission":{"identifier":"default","description":"Default permissions for the plugin, which enables all commands.","permissions":["allow-resolve-directory","allow-resolve","allow-normalize","allow-join","allow-dirname","allow-extname","allow-basename","allow-is-absolute"]},"permissions":{"allow-basename":{"identifier":"allow-basename","description":"Enables the basename command without any pre-configured scope.","commands":{"allow":["basename"],"deny":[]}},"allow-dirname":{"identifier":"allow-dirname","description":"Enables the dirname command without any pre-configured scope.","commands":{"allow":["dirname"],"deny":[]}},"allow-extname":{"identifier":"allow-extname","description":"Enables the extname command without any pre-configured scope.","commands":{"allow":["extname"],"deny":[]}},"allow-is-absolute":{"identifier":"allow-is-absolute","description":"Enables the is_absolute command without any pre-configured scope.","commands":{"allow":["is_absolute"],"deny":[]}},"allow-join":{"identifier":"allow-join","description":"Enables the join command without any pre-configured scope.","commands":{"allow":["join"],"deny":[]}},"allow-normalize":{"identifier":"allow-normalize","description":"Enables the normalize command without any pre-configured scope.","commands":{"allow":["normalize"],"deny":[]}},"allow-resolve":{"identifier":"allow-resolve","description":"Enables the resolve command without any pre-configured scope.","commands":{"allow":["resolve"],"deny":[]}},"allow-resolve-directory":{"identifier":"allow-resolve-directory","description":"Enables the resolve_directory command without any pre-configured scope.","commands":{"allow":["resolve_directory"],"deny":[]}},"deny-basename":{"identifier":"deny-basename","description":"Denies the basename command without any pre-configured scope.","commands":{"allow":[],"deny":["basename"]}},"deny-dirname":{"identifier":"deny-dirname","description":"Denies the dirname command without any pre-configured scope.","commands":{"allow":[],"deny":["dirname"]}},"deny-extname":{"identifier":"deny-extname","description":"Denies the extname command without any pre-configured scope.","commands":{"allow":[],"deny":["extname"]}},"deny-is-absolute":{"identifier":"deny-is-absolute","description":"Denies the is_absolute command without any pre-configured scope.","commands":{"allow":[],"deny":["is_absolute"]}},"deny-join":{"identifier":"deny-join","description":"Denies the join command without any pre-configured scope.","commands":{"allow":[],"deny":["join"]}},"deny-normalize":{"identifier":"deny-normalize","description":"Denies the normalize command without any pre-configured scope.","commands":{"allow":[],"deny":["normalize"]}},"deny-resolve":{"identifier":"deny-resolve","description":"Denies the resolve command without any pre-configured scope.","commands":{"allow":[],"deny":["resolve"]}},"deny-resolve-directory":{"identifier":"deny-resolve-directory","description":"Denies the resolve_directory command without any pre-configured scope.","commands":{"allow":[],"deny":["resolve_directory"]}}},"permission_sets":{},"global_scope_schema":null},"core:resources":{"default_permission":{"identifier":"default","description":"Default permissions for the plugin, which enables all commands.","permissions":["allow-close"]},"permissions":{"allow-close":{"identifier":"allow-close","description":"Enables the close command without any pre-configured scope.","commands":{"allow":["close"],"deny":[]}},"deny-close":{"identifier":"deny-close","description":"Denies the close command without any pre-configured scope.","commands":{"allow":[],"deny":["close"]}}},"permission_sets":{},"global_scope_schema":null},"core:tray":{"default_permission":{"identifier":"default","description":"Default permissions for the plugin, which enables all commands.","permissions":["allow-new","allow-get-by-id","allow-remove-by-id","allow-set-icon","allow-set-menu","allow-set-tooltip","allow-set-title","allow-set-visible","allow-set-temp-dir-path","allow-set-icon-as-template","allow-set-show-menu-on-left-click"]},"permissions":{"allow-get-by-id":{"identifier":"allow-get-by-id","description":"Enables the get_by_id command without any pre-configured scope.","commands":{"allow":["get_by_id"],"deny":[]}},"allow-new":{"identifier":"allow-new","description":"Enables the new command without any pre-configured scope.","commands":{"allow":["new"],"deny":[]}},"allow-remove-by-id":{"identifier":"allow-remove-by-id","description":"Enables the remove_by_id command without any pre-configured scope.","commands":{"allow":["remove_by_id"],"deny":[]}},"allow-set-icon":{"identifier":"allow-set-icon","description":"Enables the set_icon command without any pre-configured scope.","commands":{"allow":["set_icon"],"deny":[]}},"allow-set-icon-as-template":{"identifier":"allow-set-icon-as-template","description":"Enables the set_icon_as_template command without any pre-configured scope.","commands":{"allow":["set_icon_as_template"],"deny":[]}},"allow-set-menu":{"identifier":"allow-set-menu","description":"Enables the set_menu command without any pre-configured scope.","commands":{"allow":["set_menu"],"deny":[]}},"allow-set-show-menu-on-left-click":{"identifier":"allow-set-show-menu-on-left-click","description":"Enables the set_show_menu_on_left_click command without any pre-configured scope.","commands":{"allow":["set_show_menu_on_left_click"],"deny":[]}},"allow-set-temp-dir-path":{"identifier":"allow-set-temp-dir-path","description":"Enables the set_temp_dir_path command without any pre-configured scope.","commands":{"allow":["set_temp_dir_path"],"deny":[]}},"allow-set-title":{"identifier":"allow-set-title","description":"Enables the set_title command without any pre-configured scope.","commands":{"allow":["set_title"],"deny":[]}},"allow-set-tooltip":{"identifier":"allow-set-tooltip","description":"Enables the set_tooltip command without any pre-configured scope.","commands":{"allow":["set_tooltip"],"deny":[]}},"allow-set-visible":{"identifier":"allow-set-visible","description":"Enables the set_visible command without any pre-configured scope.","commands":{"allow":["set_visible"],"deny":[]}},"deny-get-by-id":{"identifier":"deny-get-by-id","description":"Denies the get_by_id command without any pre-configured scope.","commands":{"allow":[],"deny":["get_by_id"]}},"deny-new":{"identifier":"deny-new","description":"Denies the new command without any pre-configured scope.","commands":{"allow":[],"deny":["new"]}},"deny-remove-by-id":{"identifier":"deny-remove-by-id","description":"Denies the remove_by_id command without any pre-configured scope.","commands":{"allow":[],"deny":["remove_by_id"]}},"deny-set-icon":{"identifier":"deny-set-icon","description":"Denies the set_icon command without any pre-configured scope.","commands":{"allow":[],"deny":["set_icon"]}},"deny-set-icon-as-template":{"identifier":"deny-set-icon-as-template","description":"Denies the set_icon_as_template command without any pre-configured scope.","commands":{"allow":[],"deny":["set_icon_as_template"]}},"deny-set-menu":{"identifier":"deny-set-menu","description":"Denies the set_menu command without any pre-configured scope.","commands":{"allow":[],"deny":["set_menu"]}},"deny-set-show-menu-on-left-click":{"identifier":"deny-set-show-menu-on-left-click","description":"Denies the set_show_menu_on_left_click command without any pre-configured scope.","commands":{"allow":[],"deny":["set_show_menu_on_left_click"]}},"deny-set-temp-dir-path":{"identifier":"deny-set-temp-dir-path","description":"Denies the set_temp_dir_path command without any pre-configured scope.","commands":{"allow":[],"deny":["set_temp_dir_path"]}},"deny-set-title":{"identifier":"deny-set-title","description":"Denies the set_title command without any pre-configured scope.","commands":{"allow":[],"deny":["set_title"]}},"deny-set-tooltip":{"identifier":"deny-set-tooltip","description":"Denies the set_tooltip command without any pre-configured scope.","commands":{"allow":[],"deny":["set_tooltip"]}},"deny-set-visible":{"identifier":"deny-set-visible","description":"Denies the set_visible command without any pre-configured scope.","commands":{"allow":[],"deny":["set_visible"]}}},"permission_sets":{},"global_scope_schema":null},"core:webview":{"default_permission":{"identifier":"default","description":"Default permissions for the plugin.","permissions":["allow-get-all-webviews","allow-webview-position","allow-webview-size","allow-internal-toggle-devtools"]},"permissions":{"allow-clear-all-browsing-data":{"identifier":"allow-clear-all-browsing-data","description":"Enables the clear_all_browsing_data command without any pre-configured scope.","commands":{"allow":["clear_all_browsing_data"],"deny":[]}},"allow-create-webview":{"identifier":"allow-create-webview","description":"Enables the create_webview command without any pre-configured scope.","commands":{"allow":["create_webview"],"deny":[]}},"allow-create-webview-window":{"identifier":"allow-create-webview-window","description":"Enables the create_webview_window command without any pre-configured scope.","commands":{"allow":["create_webview_window"],"deny":[]}},"allow-get-all-webviews":{"identifier":"allow-get-all-webviews","description":"Enables the get_all_webviews command without any pre-configured scope.","commands":{"allow":["get_all_webviews"],"deny":[]}},"allow-internal-toggle-devtools":{"identifier":"allow-internal-toggle-devtools","description":"Enables the internal_toggle_devtools command without any pre-configured scope.","commands":{"allow":["internal_toggle_devtools"],"deny":[]}},"allow-print":{"identifier":"allow-print","description":"Enables the print command without any pre-configured scope.","commands":{"allow":["print"],"deny":[]}},"allow-reparent":{"identifier":"allow-reparent","description":"Enables the reparent command without any pre-configured scope.","commands":{"allow":["reparent"],"deny":[]}},"allow-set-webview-background-color":{"identifier":"allow-set-webview-background-color","description":"Enables the set_webview_background_color command without any pre-configured scope.","commands":{"allow":["set_webview_background_color"],"deny":[]}},"allow-set-webview-focus":{"identifier":"allow-set-webview-focus","description":"Enables the set_webview_focus command without any pre-configured scope.","commands":{"allow":["set_webview_focus"],"deny":[]}},"allow-set-webview-position":{"identifier":"allow-set-webview-position","description":"Enables the set_webview_position command without any pre-configured scope.","commands":{"allow":["set_webview_position"],"deny":[]}},"allow-set-webview-size":{"identifier":"allow-set-webview-size","description":"Enables the set_webview_size command without any pre-configured scope.","commands":{"allow":["set_webview_size"],"deny":[]}},"allow-set-webview-zoom":{"identifier":"allow-set-webview-zoom","description":"Enables the set_webview_zoom command without any pre-configured scope.","commands":{"allow":["set_webview_zoom"],"deny":[]}},"allow-webview-close":{"identifier":"allow-webview-close","description":"Enables the webview_close command without any pre-configured scope.","commands":{"allow":["webview_close"],"deny":[]}},"allow-webview-hide":{"identifier":"allow-webview-hide","description":"Enables the webview_hide command without any pre-configured scope.","commands":{"allow":["webview_hide"],"deny":[]}},"allow-webview-position":{"identifier":"allow-webview-position","description":"Enables the webview_position command without any pre-configured scope.","commands":{"allow":["webview_position"],"deny":[]}},"allow-webview-show":{"identifier":"allow-webview-show","description":"Enables the webview_show command without any pre-configured scope.","commands":{"allow":["webview_show"],"deny":[]}},"allow-webview-size":{"identifier":"allow-webview-size","description":"Enables the webview_size command without any pre-configured scope.","commands":{"allow":["webview_size"],"deny":[]}},"deny-clear-all-browsing-data":{"identifier":"deny-clear-all-browsing-data","description":"Denies the clear_all_browsing_data command without any pre-configured scope.","commands":{"allow":[],"deny":["clear_all_browsing_data"]}},"deny-create-webview":{"identifier":"deny-create-webview","description":"Denies the create_webview command without any pre-configured scope.","commands":{"allow":[],"deny":["create_webview"]}},"deny-create-webview-window":{"identifier":"deny-create-webview-window","description":"Denies the create_webview_window command without any pre-configured scope.","commands":{"allow":[],"deny":["create_webview_window"]}},"deny-get-all-webviews":{"identifier":"deny-get-all-webviews","description":"Denies the get_all_webviews command without any pre-configured scope.","commands":{"allow":[],"deny":["get_all_webviews"]}},"deny-internal-toggle-devtools":{"identifier":"deny-internal-toggle-devtools","description":"Denies the internal_toggle_devtools command without any pre-configured scope.","commands":{"allow":[],"deny":["internal_toggle_devtools"]}},"deny-print":{"identifier":"deny-print","description":"Denies the print command without any pre-configured scope.","commands":{"allow":[],"deny":["print"]}},"deny-reparent":{"identifier":"deny-reparent","description":"Denies the reparent command without any pre-configured scope.","commands":{"allow":[],"deny":["reparent"]}},"deny-set-webview-background-color":{"identifier":"deny-set-webview-background-color","description":"Denies the set_webview_background_color command without any pre-configured scope.","commands":{"allow":[],"deny":["set_webview_background_color"]}},"deny-set-webview-focus":{"identifier":"deny-set-webview-focus","description":"Denies the set_webview_focus command without any pre-configured scope.","commands":{"allow":[],"deny":["set_webview_focus"]}},"deny-set-webview-position":{"identifier":"deny-set-webview-position","description":"Denies the set_webview_position command without any pre-configured scope.","commands":{"allow":[],"deny":["set_webview_position"]}},"deny-set-webview-size":{"identifier":"deny-set-webview-size","description":"Denies the set_webview_size command without any pre-configured scope.","commands":{"allow":[],"deny":["set_webview_size"]}},"deny-set-webview-zoom":{"identifier":"deny-set-webview-zoom","description":"Denies the set_webview_zoom command without any pre-configured scope.","commands":{"allow":[],"deny":["set_webview_zoom"]}},"deny-webview-close":{"identifier":"deny-webview-close","description":"Denies the webview_close command without any pre-configured scope.","commands":{"allow":[],"deny":["webview_close"]}},"deny-webview-hide":{"identifier":"deny-webview-hide","description":"Denies the webview_hide command without any pre-configured scope.","commands":{"allow":[],"deny":["webview_hide"]}},"deny-webview-position":{"identifier":"deny-webview-position","description":"Denies the webview_position command without any pre-configured scope.","commands":{"allow":[],"deny":["webview_position"]}},"deny-webview-show":{"identifier":"deny-webview-show","description":"Denies the webview_show command without any pre-configured scope.","commands":{"allow":[],"deny":["webview_show"]}},"deny-webview-size":{"identifier":"deny-webview-size","description":"Denies the webview_size command without any pre-configured scope.","commands":{"allow":[],"deny":["webview_size"]}}},"permission_sets":{},"global_scope_schema":null},"core:window":{"default_permission":{"identifier":"default","description":"Default permissions for the plugin.","permissions":["allow-get-all-windows","allow-scale-factor","allow-inner-position","allow-outer-position","allow-inner-size","allow-outer-size","allow-is-fullscreen","allow-is-minimized","allow-is-maximized","allow-is-focused","allow-is-decorated","allow-is-resizable","allow-is-maximizable","allow-is-minimizable","allow-is-closable","allow-is-visible","allow-is-enabled","allow-title","allow-current-monitor","allow-primary-monitor","allow-monitor-from-point","allow-available-monitors","allow-cursor-position","allow-theme","allow-is-always-on-top","allow-internal-toggle-maximize"]},"permissions":{"allow-available-monitors":{"identifier":"allow-available-monitors","description":"Enables the available_monitors command without any pre-configured scope.","commands":{"allow":["available_monitors"],"deny":[]}},"allow-center":{"identifier":"allow-center","description":"Enables the center command without any pre-configured scope.","commands":{"allow":["center"],"deny":[]}},"allow-close":{"identifier":"allow-close","description":"Enables the close command without any pre-configured scope.","commands":{"allow":["close"],"deny":[]}},"allow-create":{"identifier":"allow-create","description":"Enables the create command without any pre-configured scope.","commands":{"allow":["create"],"deny":[]}},"allow-current-monitor":{"identifier":"allow-current-monitor","description":"Enables the current_monitor command without any pre-configured scope.","commands":{"allow":["current_monitor"],"deny":[]}},"allow-cursor-position":{"identifier":"allow-cursor-position","description":"Enables the cursor_position command without any pre-configured scope.","commands":{"allow":["cursor_position"],"deny":[]}},"allow-destroy":{"identifier":"allow-destroy","description":"Enables the destroy command without any pre-configured scope.","commands":{"allow":["destroy"],"deny":[]}},"allow-get-all-windows":{"identifier":"allow-get-all-windows","description":"Enables the get_all_windows command without any pre-configured scope.","commands":{"allow":["get_all_windows"],"deny":[]}},"allow-hide":{"identifier":"allow-hide","description":"Enables the hide command without any pre-configured scope.","commands":{"allow":["hide"],"deny":[]}},"allow-inner-position":{"identifier":"allow-inner-position","description":"Enables the inner_position command without any pre-configured scope.","commands":{"allow":["inner_position"],"deny":[]}},"allow-inner-size":{"identifier":"allow-inner-size","description":"Enables the inner_size command without any pre-configured scope.","commands":{"allow":["inner_size"],"deny":[]}},"allow-internal-toggle-maximize":{"identifier":"allow-internal-toggle-maximize","description":"Enables the internal_toggle_maximize command without any pre-configured scope.","commands":{"allow":["internal_toggle_maximize"],"deny":[]}},"allow-is-always-on-top":{"identifier":"allow-is-always-on-top","description":"Enables the is_always_on_top command without any pre-configured scope.","commands":{"allow":["is_always_on_top"],"deny":[]}},"allow-is-closable":{"identifier":"allow-is-closable","description":"Enables the is_closable command without any pre-configured scope.","commands":{"allow":["is_closable"],"deny":[]}},"allow-is-decorated":{"identifier":"allow-is-decorated","description":"Enables the is_decorated command without any pre-configured scope.","commands":{"allow":["is_decorated"],"deny":[]}},"allow-is-enabled":{"identifier":"allow-is-enabled","description":"Enables the is_enabled command without any pre-configured scope.","commands":{"allow":["is_enabled"],"deny":[]}},"allow-is-focused":{"identifier":"allow-is-focused","description":"Enables the is_focused command without any pre-configured scope.","commands":{"allow":["is_focused"],"deny":[]}},"allow-is-fullscreen":{"identifier":"allow-is-fullscreen","description":"Enables the is_fullscreen command without any pre-configured scope.","commands":{"allow":["is_fullscreen"],"deny":[]}},"allow-is-maximizable":{"identifier":"allow-is-maximizable","description":"Enables the is_maximizable command without any pre-configured scope.","commands":{"allow":["is_maximizable"],"deny":[]}},"allow-is-maximized":{"identifier":"allow-is-maximized","description":"Enables the is_maximized command without any pre-configured scope.","commands":{"allow":["is_maximized"],"deny":[]}},"allow-is-minimizable":{"identifier":"allow-is-minimizable","description":"Enables the is_minimizable command without any pre-configured scope.","commands":{"allow":["is_minimizable"],"deny":[]}},"allow-is-minimized":{"identifier":"allow-is-minimized","description":"Enables the is_minimized command without any pre-configured scope.","commands":{"allow":["is_minimized"],"deny":[]}},"allow-is-resizable":{"identifier":"allow-is-resizable","description":"Enables the is_resizable command without any pre-configured scope.","commands":{"allow":["is_resizable"],"deny":[]}},"allow-is-visible":{"identifier":"allow-is-visible","description":"Enables the is_visible command without any pre-configured scope.","commands":{"allow":["is_visible"],"deny":[]}},"allow-maximize":{"identifier":"allow-maximize","description":"Enables the maximize command without any pre-configured scope.","commands":{"allow":["maximize"],"deny":[]}},"allow-minimize":{"identifier":"allow-minimize","description":"Enables the minimize command without any pre-configured scope.","commands":{"allow":["minimize"],"deny":[]}},"allow-monitor-from-point":{"identifier":"allow-monitor-from-point","description":"Enables the monitor_from_point command without any pre-configured scope.","commands":{"allow":["monitor_from_point"],"deny":[]}},"allow-outer-position":{"identifier":"allow-outer-position","description":"Enables the outer_position command without any pre-configured scope.","commands":{"allow":["outer_position"],"deny":[]}},"allow-outer-size":{"identifier":"allow-outer-size","description":"Enables the outer_size command without any pre-configured scope.","commands":{"allow":["outer_size"],"deny":[]}},"allow-primary-monitor":{"identifier":"allow-primary-monitor","description":"Enables the primary_monitor command without any pre-configured scope.","commands":{"allow":["primary_monitor"],"deny":[]}},"allow-request-user-attention":{"identifier":"allow-request-user-attention","description":"Enables the request_user_attention command without any pre-configured scope.","commands":{"allow":["request_user_attention"],"deny":[]}},"allow-scale-factor":{"identifier":"allow-scale-factor","description":"Enables the scale_factor command without any pre-configured scope.","commands":{"allow":["scale_factor"],"deny":[]}},"allow-set-always-on-bottom":{"identifier":"allow-set-always-on-bottom","description":"Enables the set_always_on_bottom command without any pre-configured scope.","commands":{"allow":["set_always_on_bottom"],"deny":[]}},"allow-set-always-on-top":{"identifier":"allow-set-always-on-top","description":"Enables the set_always_on_top command without any pre-configured scope.","commands":{"allow":["set_always_on_top"],"deny":[]}},"allow-set-background-color":{"identifier":"allow-set-background-color","description":"Enables the set_background_color command without any pre-configured scope.","commands":{"allow":["set_background_color"],"deny":[]}},"allow-set-badge-count":{"identifier":"allow-set-badge-count","description":"Enables the set_badge_count command without any pre-configured scope.","commands":{"allow":["set_badge_count"],"deny":[]}},"allow-set-badge-label":{"identifier":"allow-set-badge-label","description":"Enables the set_badge_label command without any pre-configured scope.","commands":{"allow":["set_badge_label"],"deny":[]}},"allow-set-closable":{"identifier":"allow-set-closable","description":"Enables the set_closable command without any pre-configured scope.","commands":{"allow":["set_closable"],"deny":[]}},"allow-set-content-protected":{"identifier":"allow-set-content-protected","description":"Enables the set_content_protected command without any pre-configured scope.","commands":{"allow":["set_content_protected"],"deny":[]}},"allow-set-cursor-grab":{"identifier":"allow-set-cursor-grab","description":"Enables the set_cursor_grab command without any pre-configured scope.","commands":{"allow":["set_cursor_grab"],"deny":[]}},"allow-set-cursor-icon":{"identifier":"allow-set-cursor-icon","description":"Enables the set_cursor_icon command without any pre-configured scope.","commands":{"allow":["set_cursor_icon"],"deny":[]}},"allow-set-cursor-position":{"identifier":"allow-set-cursor-position","description":"Enables the set_cursor_position command without any pre-configured scope.","commands":{"allow":["set_cursor_position"],"deny":[]}},"allow-set-cursor-visible":{"identifier":"allow-set-cursor-visible","description":"Enables the set_cursor_visible command without any pre-configured scope.","commands":{"allow":["set_cursor_visible"],"deny":[]}},"allow-set-decorations":{"identifier":"allow-set-decorations","description":"Enables the set_decorations command without any pre-configured scope.","commands":{"allow":["set_decorations"],"deny":[]}},"allow-set-effects":{"identifier":"allow-set-effects","description":"Enables the set_effects command without any pre-configured scope.","commands":{"allow":["set_effects"],"deny":[]}},"allow-set-enabled":{"identifier":"allow-set-enabled","description":"Enables the set_enabled command without any pre-configured scope.","commands":{"allow":["set_enabled"],"deny":[]}},"allow-set-focus":{"identifier":"allow-set-focus","description":"Enables the set_focus command without any pre-configured scope.","commands":{"allow":["set_focus"],"deny":[]}},"allow-set-fullscreen":{"identifier":"allow-set-fullscreen","description":"Enables the set_fullscreen command without any pre-configured scope.","commands":{"allow":["set_fullscreen"],"deny":[]}},"allow-set-icon":{"identifier":"allow-set-icon","description":"Enables the set_icon command without any pre-configured scope.","commands":{"allow":["set_icon"],"deny":[]}},"allow-set-ignore-cursor-events":{"identifier":"allow-set-ignore-cursor-events","description":"Enables the set_ignore_cursor_events command without any pre-configured scope.","commands":{"allow":["set_ignore_cursor_events"],"deny":[]}},"allow-set-max-size":{"identifier":"allow-set-max-size","description":"Enables the set_max_size command without any pre-configured scope.","commands":{"allow":["set_max_size"],"deny":[]}},"allow-set-maximizable":{"identifier":"allow-set-maximizable","description":"Enables the set_maximizable command without any pre-configured scope.","commands":{"allow":["set_maximizable"],"deny":[]}},"allow-set-min-size":{"identifier":"allow-set-min-size","description":"Enables the set_min_size command without any pre-configured scope.","commands":{"allow":["set_min_size"],"deny":[]}},"allow-set-minimizable":{"identifier":"allow-set-minimizable","description":"Enables the set_minimizable command without any pre-configured scope.","commands":{"allow":["set_minimizable"],"deny":[]}},"allow-set-overlay-icon":{"identifier":"allow-set-overlay-icon","description":"Enables the set_overlay_icon command without any pre-configured scope.","commands":{"allow":["set_overlay_icon"],"deny":[]}},"allow-set-position":{"identifier":"allow-set-position","description":"Enables the set_position command without any pre-configured scope.","commands":{"allow":["set_position"],"deny":[]}},"allow-set-progress-bar":{"identifier":"allow-set-progress-bar","description":"Enables the set_progress_bar command without any pre-configured scope.","commands":{"allow":["set_progress_bar"],"deny":[]}},"allow-set-resizable":{"identifier":"allow-set-resizable","description":"Enables the set_resizable command without any pre-configured scope.","commands":{"allow":["set_resizable"],"deny":[]}},"allow-set-shadow":{"identifier":"allow-set-shadow","description":"Enables the set_shadow command without any pre-configured scope.","commands":{"allow":["set_shadow"],"deny":[]}},"allow-set-size":{"identifier":"allow-set-size","description":"Enables the set_size command without any pre-configured scope.","commands":{"allow":["set_size"],"deny":[]}},"allow-set-size-constraints":{"identifier":"allow-set-size-constraints","description":"Enables the set_size_constraints command without any pre-configured scope.","commands":{"allow":["set_size_constraints"],"deny":[]}},"allow-set-skip-taskbar":{"identifier":"allow-set-skip-taskbar","description":"Enables the set_skip_taskbar command without any pre-configured scope.","commands":{"allow":["set_skip_taskbar"],"deny":[]}},"allow-set-theme":{"identifier":"allow-set-theme","description":"Enables the set_theme command without any pre-configured scope.","commands":{"allow":["set_theme"],"deny":[]}},"allow-set-title":{"identifier":"allow-set-title","description":"Enables the set_title command without any pre-configured scope.","commands":{"allow":["set_title"],"deny":[]}},"allow-set-title-bar-style":{"identifier":"allow-set-title-bar-style","description":"Enables the set_title_bar_style command without any pre-configured scope.","commands":{"allow":["set_title_bar_style"],"deny":[]}},"allow-set-visible-on-all-workspaces":{"identifier":"allow-set-visible-on-all-workspaces","description":"Enables the set_visible_on_all_workspaces command without any pre-configured scope.","commands":{"allow":["set_visible_on_all_workspaces"],"deny":[]}},"allow-show":{"identifier":"allow-show","description":"Enables the show command without any pre-configured scope.","commands":{"allow":["show"],"deny":[]}},"allow-start-dragging":{"identifier":"allow-start-dragging","description":"Enables the start_dragging command without any pre-configured scope.","commands":{"allow":["start_dragging"],"deny":[]}},"allow-start-resize-dragging":{"identifier":"allow-start-resize-dragging","description":"Enables the start_resize_dragging command without any pre-configured scope.","commands":{"allow":["start_resize_dragging"],"deny":[]}},"allow-theme":{"identifier":"allow-theme","description":"Enables the theme command without any pre-configured scope.","commands":{"allow":["theme"],"deny":[]}},"allow-title":{"identifier":"allow-title","description":"Enables the title command without any pre-configured scope.","commands":{"allow":["title"],"deny":[]}},"allow-toggle-maximize":{"identifier":"allow-toggle-maximize","description":"Enables the toggle_maximize command without any pre-configured scope.","commands":{"allow":["toggle_maximize"],"deny":[]}},"allow-unmaximize":{"identifier":"allow-unmaximize","description":"Enables the unmaximize command without any pre-configured scope.","commands":{"allow":["unmaximize"],"deny":[]}},"allow-unminimize":{"identifier":"allow-unminimize","description":"Enables the unminimize command without any pre-configured scope.","commands":{"allow":["unminimize"],"deny":[]}},"deny-available-monitors":{"identifier":"deny-available-monitors","description":"Denies the available_monitors command without any pre-configured scope.","commands":{"allow":[],"deny":["available_monitors"]}},"deny-center":{"identifier":"deny-center","description":"Denies the center command without any pre-configured scope.","commands":{"allow":[],"deny":["center"]}},"deny-close":{"identifier":"deny-close","description":"Denies the close command without any pre-configured scope.","commands":{"allow":[],"deny":["close"]}},"deny-create":{"identifier":"deny-create","description":"Denies the create command without any pre-configured scope.","commands":{"allow":[],"deny":["create"]}},"deny-current-monitor":{"identifier":"deny-current-monitor","description":"Denies the current_monitor command without any pre-configured scope.","commands":{"allow":[],"deny":["current_monitor"]}},"deny-cursor-position":{"identifier":"deny-cursor-position","description":"Denies the cursor_position command without any pre-configured scope.","commands":{"allow":[],"deny":["cursor_position"]}},"deny-destroy":{"identifier":"deny-destroy","description":"Denies the destroy command without any pre-configured scope.","commands":{"allow":[],"deny":["destroy"]}},"deny-get-all-windows":{"identifier":"deny-get-all-windows","description":"Denies the get_all_windows command without any pre-configured scope.","commands":{"allow":[],"deny":["get_all_windows"]}},"deny-hide":{"identifier":"deny-hide","description":"Denies the hide command without any pre-configured scope.","commands":{"allow":[],"deny":["hide"]}},"deny-inner-position":{"identifier":"deny-inner-position","description":"Denies the inner_position command without any pre-configured scope.","commands":{"allow":[],"deny":["inner_position"]}},"deny-inner-size":{"identifier":"deny-inner-size","description":"Denies the inner_size command without any pre-configured scope.","commands":{"allow":[],"deny":["inner_size"]}},"deny-internal-toggle-maximize":{"identifier":"deny-internal-toggle-maximize","description":"Denies the internal_toggle_maximize command without any pre-configured scope.","commands":{"allow":[],"deny":["internal_toggle_maximize"]}},"deny-is-always-on-top":{"identifier":"deny-is-always-on-top","description":"Denies the is_always_on_top command without any pre-configured scope.","commands":{"allow":[],"deny":["is_always_on_top"]}},"deny-is-closable":{"identifier":"deny-is-closable","description":"Denies the is_closable command without any pre-configured scope.","commands":{"allow":[],"deny":["is_closable"]}},"deny-is-decorated":{"identifier":"deny-is-decorated","description":"Denies the is_decorated command without any pre-configured scope.","commands":{"allow":[],"deny":["is_decorated"]}},"deny-is-enabled":{"identifier":"deny-is-enabled","description":"Denies the is_enabled command without any pre-configured scope.","commands":{"allow":[],"deny":["is_enabled"]}},"deny-is-focused":{"identifier":"deny-is-focused","description":"Denies the is_focused command without any pre-configured scope.","commands":{"allow":[],"deny":["is_focused"]}},"deny-is-fullscreen":{"identifier":"deny-is-fullscreen","description":"Denies the is_fullscreen command without any pre-configured scope.","commands":{"allow":[],"deny":["is_fullscreen"]}},"deny-is-maximizable":{"identifier":"deny-is-maximizable","description":"Denies the is_maximizable command without any pre-configured scope.","commands":{"allow":[],"deny":["is_maximizable"]}},"deny-is-maximized":{"identifier":"deny-is-maximized","description":"Denies the is_maximized command without any pre-configured scope.","commands":{"allow":[],"deny":["is_maximized"]}},"deny-is-minimizable":{"identifier":"deny-is-minimizable","description":"Denies the is_minimizable command without any pre-configured scope.","commands":{"allow":[],"deny":["is_minimizable"]}},"deny-is-minimized":{"identifier":"deny-is-minimized","description":"Denies the is_minimized command without any pre-configured scope.","commands":{"allow":[],"deny":["is_minimized"]}},"deny-is-resizable":{"identifier":"deny-is-resizable","description":"Denies the is_resizable command without any pre-configured scope.","commands":{"allow":[],"deny":["is_resizable"]}},"deny-is-visible":{"identifier":"deny-is-visible","description":"Denies the is_visible command without any pre-configured scope.","commands":{"allow":[],"deny":["is_visible"]}},"deny-maximize":{"identifier":"deny-maximize","description":"Denies the maximize command without any pre-configured scope.","commands":{"allow":[],"deny":["maximize"]}},"deny-minimize":{"identifier":"deny-minimize","description":"Denies the minimize command without any pre-configured scope.","commands":{"allow":[],"deny":["minimize"]}},"deny-monitor-from-point":{"identifier":"deny-monitor-from-point","description":"Denies the monitor_from_point command without any pre-configured scope.","commands":{"allow":[],"deny":["monitor_from_point"]}},"deny-outer-position":{"identifier":"deny-outer-position","description":"Denies the outer_position command without any pre-configured scope.","commands":{"allow":[],"deny":["outer_position"]}},"deny-outer-size":{"identifier":"deny-outer-size","description":"Denies the outer_size command without any pre-configured scope.","commands":{"allow":[],"deny":["outer_size"]}},"deny-primary-monitor":{"identifier":"deny-primary-monitor","description":"Denies the primary_monitor command without any pre-configured scope.","commands":{"allow":[],"deny":["primary_monitor"]}},"deny-request-user-attention":{"identifier":"deny-request-user-attention","description":"Denies the request_user_attention command without any pre-configured scope.","commands":{"allow":[],"deny":["request_user_attention"]}},"deny-scale-factor":{"identifier":"deny-scale-factor","description":"Denies the scale_factor command without any pre-configured scope.","commands":{"allow":[],"deny":["scale_factor"]}},"deny-set-always-on-bottom":{"identifier":"deny-set-always-on-bottom","description":"Denies the set_always_on_bottom command without any pre-configured scope.","commands":{"allow":[],"deny":["set_always_on_bottom"]}},"deny-set-always-on-top":{"identifier":"deny-set-always-on-top","description":"Denies the set_always_on_top command without any pre-configured scope.","commands":{"allow":[],"deny":["set_always_on_top"]}},"deny-set-background-color":{"identifier":"deny-set-background-color","description":"Denies the set_background_color command without any pre-configured scope.","commands":{"allow":[],"deny":["set_background_color"]}},"deny-set-badge-count":{"identifier":"deny-set-badge-count","description":"Denies the set_badge_count command without any pre-configured scope.","commands":{"allow":[],"deny":["set_badge_count"]}},"deny-set-badge-label":{"identifier":"deny-set-badge-label","description":"Denies the set_badge_label command without any pre-configured scope.","commands":{"allow":[],"deny":["set_badge_label"]}},"deny-set-closable":{"identifier":"deny-set-closable","description":"Denies the set_closable command without any pre-configured scope.","commands":{"allow":[],"deny":["set_closable"]}},"deny-set-content-protected":{"identifier":"deny-set-content-protected","description":"Denies the set_content_protected command without any pre-configured scope.","commands":{"allow":[],"deny":["set_content_protected"]}},"deny-set-cursor-grab":{"identifier":"deny-set-cursor-grab","description":"Denies the set_cursor_grab command without any pre-configured scope.","commands":{"allow":[],"deny":["set_cursor_grab"]}},"deny-set-cursor-icon":{"identifier":"deny-set-cursor-icon","description":"Denies the set_cursor_icon command without any pre-configured scope.","commands":{"allow":[],"deny":["set_cursor_icon"]}},"deny-set-cursor-position":{"identifier":"deny-set-cursor-position","description":"Denies the set_cursor_position command without any pre-configured scope.","commands":{"allow":[],"deny":["set_cursor_position"]}},"deny-set-cursor-visible":{"identifier":"deny-set-cursor-visible","description":"Denies the set_cursor_visible command without any pre-configured scope.","commands":{"allow":[],"deny":["set_cursor_visible"]}},"deny-set-decorations":{"identifier":"deny-set-decorations","description":"Denies the set_decorations command without any pre-configured scope.","commands":{"allow":[],"deny":["set_decorations"]}},"deny-set-effects":{"identifier":"deny-set-effects","description":"Denies the set_effects command without any pre-configured scope.","commands":{"allow":[],"deny":["set_effects"]}},"deny-set-enabled":{"identifier":"deny-set-enabled","description":"Denies the set_enabled command without any pre-configured scope.","commands":{"allow":[],"deny":["set_enabled"]}},"deny-set-focus":{"identifier":"deny-set-focus","description":"Denies the set_focus command without any pre-configured scope.","commands":{"allow":[],"deny":["set_focus"]}},"deny-set-fullscreen":{"identifier":"deny-set-fullscreen","description":"Denies the set_fullscreen command without any pre-configured scope.","commands":{"allow":[],"deny":["set_fullscreen"]}},"deny-set-icon":{"identifier":"deny-set-icon","description":"Denies the set_icon command without any pre-configured scope.","commands":{"allow":[],"deny":["set_icon"]}},"deny-set-ignore-cursor-events":{"identifier":"deny-set-ignore-cursor-events","description":"Denies the set_ignore_cursor_events command without any pre-configured scope.","commands":{"allow":[],"deny":["set_ignore_cursor_events"]}},"deny-set-max-size":{"identifier":"deny-set-max-size","description":"Denies the set_max_size command without any pre-configured scope.","commands":{"allow":[],"deny":["set_max_size"]}},"deny-set-maximizable":{"identifier":"deny-set-maximizable","description":"Denies the set_maximizable command without any pre-configured scope.","commands":{"allow":[],"deny":["set_maximizable"]}},"deny-set-min-size":{"identifier":"deny-set-min-size","description":"Denies the set_min_size command without any pre-configured scope.","commands":{"allow":[],"deny":["set_min_size"]}},"deny-set-minimizable":{"identifier":"deny-set-minimizable","description":"Denies the set_minimizable command without any pre-configured scope.","commands":{"allow":[],"deny":["set_minimizable"]}},"deny-set-overlay-icon":{"identifier":"deny-set-overlay-icon","description":"Denies the set_overlay_icon command without any pre-configured scope.","commands":{"allow":[],"deny":["set_overlay_icon"]}},"deny-set-position":{"identifier":"deny-set-position","description":"Denies the set_position command without any pre-configured scope.","commands":{"allow":[],"deny":["set_position"]}},"deny-set-progress-bar":{"identifier":"deny-set-progress-bar","description":"Denies the set_progress_bar command without any pre-configured scope.","commands":{"allow":[],"deny":["set_progress_bar"]}},"deny-set-resizable":{"identifier":"deny-set-resizable","description":"Denies the set_resizable command without any pre-configured scope.","commands":{"allow":[],"deny":["set_resizable"]}},"deny-set-shadow":{"identifier":"deny-set-shadow","description":"Denies the set_shadow command without any pre-configured scope.","commands":{"allow":[],"deny":["set_shadow"]}},"deny-set-size":{"identifier":"deny-set-size","description":"Denies the set_size command without any pre-configured scope.","commands":{"allow":[],"deny":["set_size"]}},"deny-set-size-constraints":{"identifier":"deny-set-size-constraints","description":"Denies the set_size_constraints command without any pre-configured scope.","commands":{"allow":[],"deny":["set_size_constraints"]}},"deny-set-skip-taskbar":{"identifier":"deny-set-skip-taskbar","description":"Denies the set_skip_taskbar command without any pre-configured scope.","commands":{"allow":[],"deny":["set_skip_taskbar"]}},"deny-set-theme":{"identifier":"deny-set-theme","description":"Denies the set_theme command without any pre-configured scope.","commands":{"allow":[],"deny":["set_theme"]}},"deny-set-title":{"identifier":"deny-set-title","description":"Denies the set_title command without any pre-configured scope.","commands":{"allow":[],"deny":["set_title"]}},"deny-set-title-bar-style":{"identifier":"deny-set-title-bar-style","description":"Denies the set_title_bar_style command without any pre-configured scope.","commands":{"allow":[],"deny":["set_title_bar_style"]}},"deny-set-visible-on-all-workspaces":{"identifier":"deny-set-visible-on-all-workspaces","description":"Denies the set_visible_on_all_workspaces command without any pre-configured scope.","commands":{"allow":[],"deny":["set_visible_on_all_workspaces"]}},"deny-show":{"identifier":"deny-show","description":"Denies the show command without any pre-configured scope.","commands":{"allow":[],"deny":["show"]}},"deny-start-dragging":{"identifier":"deny-start-dragging","description":"Denies the start_dragging command without any pre-configured scope.","commands":{"allow":[],"deny":["start_dragging"]}},"deny-start-resize-dragging":{"identifier":"deny-start-resize-dragging","description":"Denies the start_resize_dragging command without any pre-configured scope.","commands":{"allow":[],"deny":["start_resize_dragging"]}},"deny-theme":{"identifier":"deny-theme","description":"Denies the theme command without any pre-configured scope.","commands":{"allow":[],"deny":["theme"]}},"deny-title":{"identifier":"deny-title","description":"Denies the title command without any pre-configured scope.","commands":{"allow":[],"deny":["title"]}},"deny-toggle-maximize":{"identifier":"deny-toggle-maximize","description":"Denies the toggle_maximize command without any pre-configured scope.","commands":{"allow":[],"deny":["toggle_maximize"]}},"deny-unmaximize":{"identifier":"deny-unmaximize","description":"Denies the unmaximize command without any pre-configured scope.","commands":{"allow":[],"deny":["unmaximize"]}},"deny-unminimize":{"identifier":"deny-unminimize","description":"Denies the unminimize command without any pre-configured scope.","commands":{"allow":[],"deny":["unminimize"]}}},"permission_sets":{},"global_scope_schema":null},"fs":{"default_permission":{"identifier":"default","description":"This set of permissions describes the what kind of\nfile system access the `fs` plugin has enabled or denied by default.\n\n#### Granted Permissions\n\nThis default permission set enables read access to the\napplication specific directories (AppConfig, AppData, AppLocalData, AppCache,\nAppLog) and all files and sub directories created in it.\nThe location of these directories depends on the operating system,\nwhere the application is run.\n\nIn general these directories need to be manually created\nby the application at runtime, before accessing files or folders\nin it is possible.\n\nTherefore, it is also allowed to create all of these folders via\nthe `mkdir` command.\n\n#### Denied Permissions\n\nThis default permission set prevents access to critical components\nof the Tauri application by default.\nOn Windows the webview data folder access is denied.\n","permissions":["create-app-specific-dirs","read-app-specific-dirs-recursive","deny-default"]},"permissions":{"allow-copy-file":{"identifier":"allow-copy-file","description":"Enables the copy_file command without any pre-configured scope.","commands":{"allow":["copy_file"],"deny":[]}},"allow-create":{"identifier":"allow-create","description":"Enables the create command without any pre-configured scope.","commands":{"allow":["create"],"deny":[]}},"allow-exists":{"identifier":"allow-exists","description":"Enables the exists command without any pre-configured scope.","commands":{"allow":["exists"],"deny":[]}},"allow-fstat":{"identifier":"allow-fstat","description":"Enables the fstat command without any pre-configured scope.","commands":{"allow":["fstat"],"deny":[]}},"allow-ftruncate":{"identifier":"allow-ftruncate","description":"Enables the ftruncate command without any pre-configured scope.","commands":{"allow":["ftruncate"],"deny":[]}},"allow-lstat":{"identifier":"allow-lstat","description":"Enables the lstat command without any pre-configured scope.","commands":{"allow":["lstat"],"deny":[]}},"allow-mkdir":{"identifier":"allow-mkdir","description":"Enables the mkdir command without any pre-configured scope.","commands":{"allow":["mkdir"],"deny":[]}},"allow-open":{"identifier":"allow-open","description":"Enables the open command without any pre-configured scope.","commands":{"allow":["open"],"deny":[]}},"allow-read":{"identifier":"allow-read","description":"Enables the read command without any pre-configured scope.","commands":{"allow":["read"],"deny":[]}},"allow-read-dir":{"identifier":"allow-read-dir","description":"Enables the read_dir command without any pre-configured scope.","commands":{"allow":["read_dir"],"deny":[]}},"allow-read-file":{"identifier":"allow-read-file","description":"Enables the read_file command without any pre-configured scope.","commands":{"allow":["read_file"],"deny":[]}},"allow-read-text-file":{"identifier":"allow-read-text-file","description":"Enables the read_text_file command without any pre-configured scope.","commands":{"allow":["read_text_file"],"deny":[]}},"allow-read-text-file-lines":{"identifier":"allow-read-text-file-lines","description":"Enables the read_text_file_lines command without any pre-configured scope.","commands":{"allow":["read_text_file_lines","read_text_file_lines_next"],"deny":[]}},"allow-read-text-file-lines-next":{"identifier":"allow-read-text-file-lines-next","description":"Enables the read_text_file_lines_next command without any pre-configured scope.","commands":{"allow":["read_text_file_lines_next"],"deny":[]}},"allow-remove":{"identifier":"allow-remove","description":"Enables the remove command without any pre-configured scope.","commands":{"allow":["remove"],"deny":[]}},"allow-rename":{"identifier":"allow-rename","description":"Enables the rename command without any pre-configured scope.","commands":{"allow":["rename"],"deny":[]}},"allow-seek":{"identifier":"allow-seek","description":"Enables the seek command without any pre-configured scope.","commands":{"allow":["seek"],"deny":[]}},"allow-size":{"identifier":"allow-size","description":"Enables the size command without any pre-configured scope.","commands":{"allow":["size"],"deny":[]}},"allow-stat":{"identifier":"allow-stat","description":"Enables the stat command without any pre-configured scope.","commands":{"allow":["stat"],"deny":[]}},"allow-truncate":{"identifier":"allow-truncate","description":"Enables the truncate command without any pre-configured scope.","commands":{"allow":["truncate"],"deny":[]}},"allow-unwatch":{"identifier":"allow-unwatch","description":"Enables the unwatch command without any pre-configured scope.","commands":{"allow":["unwatch"],"deny":[]}},"allow-watch":{"identifier":"allow-watch","description":"Enables the watch command without any pre-configured scope.","commands":{"allow":["watch"],"deny":[]}},"allow-write":{"identifier":"allow-write","description":"Enables the write command without any pre-configured scope.","commands":{"allow":["write"],"deny":[]}},"allow-write-file":{"identifier":"allow-write-file","description":"Enables the write_file command without any pre-configured scope.","commands":{"allow":["write_file","open","write"],"deny":[]}},"allow-write-text-file":{"identifier":"allow-write-text-file","description":"Enables the write_text_file command without any pre-configured scope.","commands":{"allow":["write_text_file"],"deny":[]}},"create-app-specific-dirs":{"identifier":"create-app-specific-dirs","description":"This permissions allows to create the application specific directories.\n","commands":{"allow":["mkdir","scope-app-index"],"deny":[]}},"deny-copy-file":{"identifier":"deny-copy-file","description":"Denies the copy_file command without any pre-configured scope.","commands":{"allow":[],"deny":["copy_file"]}},"deny-create":{"identifier":"deny-create","description":"Denies the create command without any pre-configured scope.","commands":{"allow":[],"deny":["create"]}},"deny-exists":{"identifier":"deny-exists","description":"Denies the exists command without any pre-configured scope.","commands":{"allow":[],"deny":["exists"]}},"deny-fstat":{"identifier":"deny-fstat","description":"Denies the fstat command without any pre-configured scope.","commands":{"allow":[],"deny":["fstat"]}},"deny-ftruncate":{"identifier":"deny-ftruncate","description":"Denies the ftruncate command without any pre-configured scope.","commands":{"allow":[],"deny":["ftruncate"]}},"deny-lstat":{"identifier":"deny-lstat","description":"Denies the lstat command without any pre-configured scope.","commands":{"allow":[],"deny":["lstat"]}},"deny-mkdir":{"identifier":"deny-mkdir","description":"Denies the mkdir command without any pre-configured scope.","commands":{"allow":[],"deny":["mkdir"]}},"deny-open":{"identifier":"deny-open","description":"Denies the open command without any pre-configured scope.","commands":{"allow":[],"deny":["open"]}},"deny-read":{"identifier":"deny-read","description":"Denies the read command without any pre-configured scope.","commands":{"allow":[],"deny":["read"]}},"deny-read-dir":{"identifier":"deny-read-dir","description":"Denies the read_dir command without any pre-configured scope.","commands":{"allow":[],"deny":["read_dir"]}},"deny-read-file":{"identifier":"deny-read-file","description":"Denies the read_file command without any pre-configured scope.","commands":{"allow":[],"deny":["read_file"]}},"deny-read-text-file":{"identifier":"deny-read-text-file","description":"Denies the read_text_file command without any pre-configured scope.","commands":{"allow":[],"deny":["read_text_file"]}},"deny-read-text-file-lines":{"identifier":"deny-read-text-file-lines","description":"Denies the read_text_file_lines command without any pre-configured scope.","commands":{"allow":[],"deny":["read_text_file_lines"]}},"deny-read-text-file-lines-next":{"identifier":"deny-read-text-file-lines-next","description":"Denies the read_text_file_lines_next command without any pre-configured scope.","commands":{"allow":[],"deny":["read_text_file_lines_next"]}},"deny-remove":{"identifier":"deny-remove","description":"Denies the remove command without any pre-configured scope.","commands":{"allow":[],"deny":["remove"]}},"deny-rename":{"identifier":"deny-rename","description":"Denies the rename command without any pre-configured scope.","commands":{"allow":[],"deny":["rename"]}},"deny-seek":{"identifier":"deny-seek","description":"Denies the seek command without any pre-configured scope.","commands":{"allow":[],"deny":["seek"]}},"deny-size":{"identifier":"deny-size","description":"Denies the size command without any pre-configured scope.","commands":{"allow":[],"deny":["size"]}},"deny-stat":{"identifier":"deny-stat","description":"Denies the stat command without any pre-configured scope.","commands":{"allow":[],"deny":["stat"]}},"deny-truncate":{"identifier":"deny-truncate","description":"Denies the truncate command without any pre-configured scope.","commands":{"allow":[],"deny":["truncate"]}},"deny-unwatch":{"identifier":"deny-unwatch","description":"Denies the unwatch command without any pre-configured scope.","commands":{"allow":[],"deny":["unwatch"]}},"deny-watch":{"identifier":"deny-watch","description":"Denies the watch command without any pre-configured scope.","commands":{"allow":[],"deny":["watch"]}},"deny-webview-data-linux":{"identifier":"deny-webview-data-linux","description":"This denies read access to the\n`$APPLOCALDATA` folder on linux as the webview data and configuration values are stored here.\nAllowing access can lead to sensitive information disclosure and should be well considered.","commands":{"allow":[],"deny":[]}},"deny-webview-data-windows":{"identifier":"deny-webview-data-windows","description":"This denies read access to the\n`$APPLOCALDATA/EBWebView` folder on windows as the webview data and configuration values are stored here.\nAllowing access can lead to sensitive information disclosure and should be well considered.","commands":{"allow":[],"deny":[]}},"deny-write":{"identifier":"deny-write","description":"Denies the write command without any pre-configured scope.","commands":{"allow":[],"deny":["write"]}},"deny-write-file":{"identifier":"deny-write-file","description":"Denies the write_file command without any pre-configured scope.","commands":{"allow":[],"deny":["write_file"]}},"deny-write-text-file":{"identifier":"deny-write-text-file","description":"Denies the write_text_file command without any pre-configured scope.","commands":{"allow":[],"deny":["write_text_file"]}},"read-all":{"identifier":"read-all","description":"This enables all read related commands without any pre-configured accessible paths.","commands":{"allow":["read_dir","read_file","read","open","read_text_file","read_text_file_lines","read_text_file_lines_next","seek","stat","lstat","fstat","exists","watch","unwatch"],"deny":[]}},"read-app-specific-dirs-recursive":{"identifier":"read-app-specific-dirs-recursive","description":"This permission allows recursive read functionality on the application\nspecific base directories. \n","commands":{"allow":["read_dir","read_file","read_text_file","read_text_file_lines","read_text_file_lines_next","exists","scope-app-recursive"],"deny":[]}},"read-dirs":{"identifier":"read-dirs","description":"This enables directory read and file metadata related commands without any pre-configured accessible paths.","commands":{"allow":["read_dir","stat","lstat","fstat","exists"],"deny":[]}},"read-files":{"identifier":"read-files","description":"This enables file read related commands without any pre-configured accessible paths.","commands":{"allow":["read_file","read","open","read_text_file","read_text_file_lines","read_text_file_lines_next","seek","stat","lstat","fstat","exists"],"deny":[]}},"read-meta":{"identifier":"read-meta","description":"This enables all index or metadata related commands without any pre-configured accessible paths.","commands":{"allow":["read_dir","stat","lstat","fstat","exists","size"],"deny":[]}},"scope":{"identifier":"scope","description":"An empty permission you can use to modify the global scope.","commands":{"allow":[],"deny":[]}},"scope-app":{"identifier":"scope-app","description":"This scope permits access to all files and list content of top level directories in the application folders.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$APPCONFIG"},{"path":"$APPCONFIG/*"},{"path":"$APPDATA"},{"path":"$APPDATA/*"},{"path":"$APPLOCALDATA"},{"path":"$APPLOCALDATA/*"},{"path":"$APPCACHE"},{"path":"$APPCACHE/*"},{"path":"$APPLOG"},{"path":"$APPLOG/*"}]}},"scope-app-index":{"identifier":"scope-app-index","description":"This scope permits to list all files and folders in the application directories.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$APPCONFIG"},{"path":"$APPDATA"},{"path":"$APPLOCALDATA"},{"path":"$APPCACHE"},{"path":"$APPLOG"}]}},"scope-app-recursive":{"identifier":"scope-app-recursive","description":"This scope permits recursive access to the complete application folders, including sub directories and files.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$APPCONFIG"},{"path":"$APPCONFIG/**"},{"path":"$APPDATA"},{"path":"$APPDATA/**"},{"path":"$APPLOCALDATA"},{"path":"$APPLOCALDATA/**"},{"path":"$APPCACHE"},{"path":"$APPCACHE/**"},{"path":"$APPLOG"},{"path":"$APPLOG/**"}]}},"scope-appcache":{"identifier":"scope-appcache","description":"This scope permits access to all files and list content of top level directories in the `$APPCACHE` folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$APPCACHE"},{"path":"$APPCACHE/*"}]}},"scope-appcache-index":{"identifier":"scope-appcache-index","description":"This scope permits to list all files and folders in the `$APPCACHE`folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$APPCACHE"}]}},"scope-appcache-recursive":{"identifier":"scope-appcache-recursive","description":"This scope permits recursive access to the complete `$APPCACHE` folder, including sub directories and files.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$APPCACHE"},{"path":"$APPCACHE/**"}]}},"scope-appconfig":{"identifier":"scope-appconfig","description":"This scope permits access to all files and list content of top level directories in the `$APPCONFIG` folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$APPCONFIG"},{"path":"$APPCONFIG/*"}]}},"scope-appconfig-index":{"identifier":"scope-appconfig-index","description":"This scope permits to list all files and folders in the `$APPCONFIG`folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$APPCONFIG"}]}},"scope-appconfig-recursive":{"identifier":"scope-appconfig-recursive","description":"This scope permits recursive access to the complete `$APPCONFIG` folder, including sub directories and files.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$APPCONFIG"},{"path":"$APPCONFIG/**"}]}},"scope-appdata":{"identifier":"scope-appdata","description":"This scope permits access to all files and list content of top level directories in the `$APPDATA` folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$APPDATA"},{"path":"$APPDATA/*"}]}},"scope-appdata-index":{"identifier":"scope-appdata-index","description":"This scope permits to list all files and folders in the `$APPDATA`folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$APPDATA"}]}},"scope-appdata-recursive":{"identifier":"scope-appdata-recursive","description":"This scope permits recursive access to the complete `$APPDATA` folder, including sub directories and files.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$APPDATA"},{"path":"$APPDATA/**"}]}},"scope-applocaldata":{"identifier":"scope-applocaldata","description":"This scope permits access to all files and list content of top level directories in the `$APPLOCALDATA` folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$APPLOCALDATA"},{"path":"$APPLOCALDATA/*"}]}},"scope-applocaldata-index":{"identifier":"scope-applocaldata-index","description":"This scope permits to list all files and folders in the `$APPLOCALDATA`folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$APPLOCALDATA"}]}},"scope-applocaldata-recursive":{"identifier":"scope-applocaldata-recursive","description":"This scope permits recursive access to the complete `$APPLOCALDATA` folder, including sub directories and files.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$APPLOCALDATA"},{"path":"$APPLOCALDATA/**"}]}},"scope-applog":{"identifier":"scope-applog","description":"This scope permits access to all files and list content of top level directories in the `$APPLOG` folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$APPLOG"},{"path":"$APPLOG/*"}]}},"scope-applog-index":{"identifier":"scope-applog-index","description":"This scope permits to list all files and folders in the `$APPLOG`folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$APPLOG"}]}},"scope-applog-recursive":{"identifier":"scope-applog-recursive","description":"This scope permits recursive access to the complete `$APPLOG` folder, including sub directories and files.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$APPLOG"},{"path":"$APPLOG/**"}]}},"scope-audio":{"identifier":"scope-audio","description":"This scope permits access to all files and list content of top level directories in the `$AUDIO` folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$AUDIO"},{"path":"$AUDIO/*"}]}},"scope-audio-index":{"identifier":"scope-audio-index","description":"This scope permits to list all files and folders in the `$AUDIO`folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$AUDIO"}]}},"scope-audio-recursive":{"identifier":"scope-audio-recursive","description":"This scope permits recursive access to the complete `$AUDIO` folder, including sub directories and files.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$AUDIO"},{"path":"$AUDIO/**"}]}},"scope-cache":{"identifier":"scope-cache","description":"This scope permits access to all files and list content of top level directories in the `$CACHE` folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$CACHE"},{"path":"$CACHE/*"}]}},"scope-cache-index":{"identifier":"scope-cache-index","description":"This scope permits to list all files and folders in the `$CACHE`folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$CACHE"}]}},"scope-cache-recursive":{"identifier":"scope-cache-recursive","description":"This scope permits recursive access to the complete `$CACHE` folder, including sub directories and files.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$CACHE"},{"path":"$CACHE/**"}]}},"scope-config":{"identifier":"scope-config","description":"This scope permits access to all files and list content of top level directories in the `$CONFIG` folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$CONFIG"},{"path":"$CONFIG/*"}]}},"scope-config-index":{"identifier":"scope-config-index","description":"This scope permits to list all files and folders in the `$CONFIG`folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$CONFIG"}]}},"scope-config-recursive":{"identifier":"scope-config-recursive","description":"This scope permits recursive access to the complete `$CONFIG` folder, including sub directories and files.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$CONFIG"},{"path":"$CONFIG/**"}]}},"scope-data":{"identifier":"scope-data","description":"This scope permits access to all files and list content of top level directories in the `$DATA` folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$DATA"},{"path":"$DATA/*"}]}},"scope-data-index":{"identifier":"scope-data-index","description":"This scope permits to list all files and folders in the `$DATA`folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$DATA"}]}},"scope-data-recursive":{"identifier":"scope-data-recursive","description":"This scope permits recursive access to the complete `$DATA` folder, including sub directories and files.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$DATA"},{"path":"$DATA/**"}]}},"scope-desktop":{"identifier":"scope-desktop","description":"This scope permits access to all files and list content of top level directories in the `$DESKTOP` folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$DESKTOP"},{"path":"$DESKTOP/*"}]}},"scope-desktop-index":{"identifier":"scope-desktop-index","description":"This scope permits to list all files and folders in the `$DESKTOP`folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$DESKTOP"}]}},"scope-desktop-recursive":{"identifier":"scope-desktop-recursive","description":"This scope permits recursive access to the complete `$DESKTOP` folder, including sub directories and files.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$DESKTOP"},{"path":"$DESKTOP/**"}]}},"scope-document":{"identifier":"scope-document","description":"This scope permits access to all files and list content of top level directories in the `$DOCUMENT` folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$DOCUMENT"},{"path":"$DOCUMENT/*"}]}},"scope-document-index":{"identifier":"scope-document-index","description":"This scope permits to list all files and folders in the `$DOCUMENT`folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$DOCUMENT"}]}},"scope-document-recursive":{"identifier":"scope-document-recursive","description":"This scope permits recursive access to the complete `$DOCUMENT` folder, including sub directories and files.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$DOCUMENT"},{"path":"$DOCUMENT/**"}]}},"scope-download":{"identifier":"scope-download","description":"This scope permits access to all files and list content of top level directories in the `$DOWNLOAD` folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$DOWNLOAD"},{"path":"$DOWNLOAD/*"}]}},"scope-download-index":{"identifier":"scope-download-index","description":"This scope permits to list all files and folders in the `$DOWNLOAD`folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$DOWNLOAD"}]}},"scope-download-recursive":{"identifier":"scope-download-recursive","description":"This scope permits recursive access to the complete `$DOWNLOAD` folder, including sub directories and files.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$DOWNLOAD"},{"path":"$DOWNLOAD/**"}]}},"scope-exe":{"identifier":"scope-exe","description":"This scope permits access to all files and list content of top level directories in the `$EXE` folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$EXE"},{"path":"$EXE/*"}]}},"scope-exe-index":{"identifier":"scope-exe-index","description":"This scope permits to list all files and folders in the `$EXE`folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$EXE"}]}},"scope-exe-recursive":{"identifier":"scope-exe-recursive","description":"This scope permits recursive access to the complete `$EXE` folder, including sub directories and files.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$EXE"},{"path":"$EXE/**"}]}},"scope-font":{"identifier":"scope-font","description":"This scope permits access to all files and list content of top level directories in the `$FONT` folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$FONT"},{"path":"$FONT/*"}]}},"scope-font-index":{"identifier":"scope-font-index","description":"This scope permits to list all files and folders in the `$FONT`folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$FONT"}]}},"scope-font-recursive":{"identifier":"scope-font-recursive","description":"This scope permits recursive access to the complete `$FONT` folder, including sub directories and files.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$FONT"},{"path":"$FONT/**"}]}},"scope-home":{"identifier":"scope-home","description":"This scope permits access to all files and list content of top level directories in the `$HOME` folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$HOME"},{"path":"$HOME/*"}]}},"scope-home-index":{"identifier":"scope-home-index","description":"This scope permits to list all files and folders in the `$HOME`folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$HOME"}]}},"scope-home-recursive":{"identifier":"scope-home-recursive","description":"This scope permits recursive access to the complete `$HOME` folder, including sub directories and files.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$HOME"},{"path":"$HOME/**"}]}},"scope-localdata":{"identifier":"scope-localdata","description":"This scope permits access to all files and list content of top level directories in the `$LOCALDATA` folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$LOCALDATA"},{"path":"$LOCALDATA/*"}]}},"scope-localdata-index":{"identifier":"scope-localdata-index","description":"This scope permits to list all files and folders in the `$LOCALDATA`folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$LOCALDATA"}]}},"scope-localdata-recursive":{"identifier":"scope-localdata-recursive","description":"This scope permits recursive access to the complete `$LOCALDATA` folder, including sub directories and files.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$LOCALDATA"},{"path":"$LOCALDATA/**"}]}},"scope-log":{"identifier":"scope-log","description":"This scope permits access to all files and list content of top level directories in the `$LOG` folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$LOG"},{"path":"$LOG/*"}]}},"scope-log-index":{"identifier":"scope-log-index","description":"This scope permits to list all files and folders in the `$LOG`folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$LOG"}]}},"scope-log-recursive":{"identifier":"scope-log-recursive","description":"This scope permits recursive access to the complete `$LOG` folder, including sub directories and files.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$LOG"},{"path":"$LOG/**"}]}},"scope-picture":{"identifier":"scope-picture","description":"This scope permits access to all files and list content of top level directories in the `$PICTURE` folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$PICTURE"},{"path":"$PICTURE/*"}]}},"scope-picture-index":{"identifier":"scope-picture-index","description":"This scope permits to list all files and folders in the `$PICTURE`folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$PICTURE"}]}},"scope-picture-recursive":{"identifier":"scope-picture-recursive","description":"This scope permits recursive access to the complete `$PICTURE` folder, including sub directories and files.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$PICTURE"},{"path":"$PICTURE/**"}]}},"scope-public":{"identifier":"scope-public","description":"This scope permits access to all files and list content of top level directories in the `$PUBLIC` folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$PUBLIC"},{"path":"$PUBLIC/*"}]}},"scope-public-index":{"identifier":"scope-public-index","description":"This scope permits to list all files and folders in the `$PUBLIC`folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$PUBLIC"}]}},"scope-public-recursive":{"identifier":"scope-public-recursive","description":"This scope permits recursive access to the complete `$PUBLIC` folder, including sub directories and files.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$PUBLIC"},{"path":"$PUBLIC/**"}]}},"scope-resource":{"identifier":"scope-resource","description":"This scope permits access to all files and list content of top level directories in the `$RESOURCE` folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$RESOURCE"},{"path":"$RESOURCE/*"}]}},"scope-resource-index":{"identifier":"scope-resource-index","description":"This scope permits to list all files and folders in the `$RESOURCE`folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$RESOURCE"}]}},"scope-resource-recursive":{"identifier":"scope-resource-recursive","description":"This scope permits recursive access to the complete `$RESOURCE` folder, including sub directories and files.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$RESOURCE"},{"path":"$RESOURCE/**"}]}},"scope-runtime":{"identifier":"scope-runtime","description":"This scope permits access to all files and list content of top level directories in the `$RUNTIME` folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$RUNTIME"},{"path":"$RUNTIME/*"}]}},"scope-runtime-index":{"identifier":"scope-runtime-index","description":"This scope permits to list all files and folders in the `$RUNTIME`folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$RUNTIME"}]}},"scope-runtime-recursive":{"identifier":"scope-runtime-recursive","description":"This scope permits recursive access to the complete `$RUNTIME` folder, including sub directories and files.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$RUNTIME"},{"path":"$RUNTIME/**"}]}},"scope-temp":{"identifier":"scope-temp","description":"This scope permits access to all files and list content of top level directories in the `$TEMP` folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$TEMP"},{"path":"$TEMP/*"}]}},"scope-temp-index":{"identifier":"scope-temp-index","description":"This scope permits to list all files and folders in the `$TEMP`folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$TEMP"}]}},"scope-temp-recursive":{"identifier":"scope-temp-recursive","description":"This scope permits recursive access to the complete `$TEMP` folder, including sub directories and files.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$TEMP"},{"path":"$TEMP/**"}]}},"scope-template":{"identifier":"scope-template","description":"This scope permits access to all files and list content of top level directories in the `$TEMPLATE` folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$TEMPLATE"},{"path":"$TEMPLATE/*"}]}},"scope-template-index":{"identifier":"scope-template-index","description":"This scope permits to list all files and folders in the `$TEMPLATE`folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$TEMPLATE"}]}},"scope-template-recursive":{"identifier":"scope-template-recursive","description":"This scope permits recursive access to the complete `$TEMPLATE` folder, including sub directories and files.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$TEMPLATE"},{"path":"$TEMPLATE/**"}]}},"scope-video":{"identifier":"scope-video","description":"This scope permits access to all files and list content of top level directories in the `$VIDEO` folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$VIDEO"},{"path":"$VIDEO/*"}]}},"scope-video-index":{"identifier":"scope-video-index","description":"This scope permits to list all files and folders in the `$VIDEO`folder.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$VIDEO"}]}},"scope-video-recursive":{"identifier":"scope-video-recursive","description":"This scope permits recursive access to the complete `$VIDEO` folder, including sub directories and files.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"path":"$VIDEO"},{"path":"$VIDEO/**"}]}},"write-all":{"identifier":"write-all","description":"This enables all write related commands without any pre-configured accessible paths.","commands":{"allow":["mkdir","create","copy_file","remove","rename","truncate","ftruncate","write","write_file","write_text_file"],"deny":[]}},"write-files":{"identifier":"write-files","description":"This enables all file write related commands without any pre-configured accessible paths.","commands":{"allow":["create","copy_file","remove","rename","truncate","ftruncate","write","write_file","write_text_file"],"deny":[]}}},"permission_sets":{"allow-app-meta":{"identifier":"allow-app-meta","description":"This allows non-recursive read access to metadata of the application folders, including file listing and statistics.","permissions":["read-meta","scope-app-index"]},"allow-app-meta-recursive":{"identifier":"allow-app-meta-recursive","description":"This allows full recursive read access to metadata of the application folders, including file listing and statistics.","permissions":["read-meta","scope-app-recursive"]},"allow-app-read":{"identifier":"allow-app-read","description":"This allows non-recursive read access to the application folders.","permissions":["read-all","scope-app"]},"allow-app-read-recursive":{"identifier":"allow-app-read-recursive","description":"This allows full recursive read access to the complete application folders, files and subdirectories.","permissions":["read-all","scope-app-recursive"]},"allow-app-write":{"identifier":"allow-app-write","description":"This allows non-recursive write access to the application folders.","permissions":["write-all","scope-app"]},"allow-app-write-recursive":{"identifier":"allow-app-write-recursive","description":"This allows full recursive write access to the complete application folders, files and subdirectories.","permissions":["write-all","scope-app-recursive"]},"allow-appcache-meta":{"identifier":"allow-appcache-meta","description":"This allows non-recursive read access to metadata of the `$APPCACHE` folder, including file listing and statistics.","permissions":["read-meta","scope-appcache-index"]},"allow-appcache-meta-recursive":{"identifier":"allow-appcache-meta-recursive","description":"This allows full recursive read access to metadata of the `$APPCACHE` folder, including file listing and statistics.","permissions":["read-meta","scope-appcache-recursive"]},"allow-appcache-read":{"identifier":"allow-appcache-read","description":"This allows non-recursive read access to the `$APPCACHE` folder.","permissions":["read-all","scope-appcache"]},"allow-appcache-read-recursive":{"identifier":"allow-appcache-read-recursive","description":"This allows full recursive read access to the complete `$APPCACHE` folder, files and subdirectories.","permissions":["read-all","scope-appcache-recursive"]},"allow-appcache-write":{"identifier":"allow-appcache-write","description":"This allows non-recursive write access to the `$APPCACHE` folder.","permissions":["write-all","scope-appcache"]},"allow-appcache-write-recursive":{"identifier":"allow-appcache-write-recursive","description":"This allows full recursive write access to the complete `$APPCACHE` folder, files and subdirectories.","permissions":["write-all","scope-appcache-recursive"]},"allow-appconfig-meta":{"identifier":"allow-appconfig-meta","description":"This allows non-recursive read access to metadata of the `$APPCONFIG` folder, including file listing and statistics.","permissions":["read-meta","scope-appconfig-index"]},"allow-appconfig-meta-recursive":{"identifier":"allow-appconfig-meta-recursive","description":"This allows full recursive read access to metadata of the `$APPCONFIG` folder, including file listing and statistics.","permissions":["read-meta","scope-appconfig-recursive"]},"allow-appconfig-read":{"identifier":"allow-appconfig-read","description":"This allows non-recursive read access to the `$APPCONFIG` folder.","permissions":["read-all","scope-appconfig"]},"allow-appconfig-read-recursive":{"identifier":"allow-appconfig-read-recursive","description":"This allows full recursive read access to the complete `$APPCONFIG` folder, files and subdirectories.","permissions":["read-all","scope-appconfig-recursive"]},"allow-appconfig-write":{"identifier":"allow-appconfig-write","description":"This allows non-recursive write access to the `$APPCONFIG` folder.","permissions":["write-all","scope-appconfig"]},"allow-appconfig-write-recursive":{"identifier":"allow-appconfig-write-recursive","description":"This allows full recursive write access to the complete `$APPCONFIG` folder, files and subdirectories.","permissions":["write-all","scope-appconfig-recursive"]},"allow-appdata-meta":{"identifier":"allow-appdata-meta","description":"This allows non-recursive read access to metadata of the `$APPDATA` folder, including file listing and statistics.","permissions":["read-meta","scope-appdata-index"]},"allow-appdata-meta-recursive":{"identifier":"allow-appdata-meta-recursive","description":"This allows full recursive read access to metadata of the `$APPDATA` folder, including file listing and statistics.","permissions":["read-meta","scope-appdata-recursive"]},"allow-appdata-read":{"identifier":"allow-appdata-read","description":"This allows non-recursive read access to the `$APPDATA` folder.","permissions":["read-all","scope-appdata"]},"allow-appdata-read-recursive":{"identifier":"allow-appdata-read-recursive","description":"This allows full recursive read access to the complete `$APPDATA` folder, files and subdirectories.","permissions":["read-all","scope-appdata-recursive"]},"allow-appdata-write":{"identifier":"allow-appdata-write","description":"This allows non-recursive write access to the `$APPDATA` folder.","permissions":["write-all","scope-appdata"]},"allow-appdata-write-recursive":{"identifier":"allow-appdata-write-recursive","description":"This allows full recursive write access to the complete `$APPDATA` folder, files and subdirectories.","permissions":["write-all","scope-appdata-recursive"]},"allow-applocaldata-meta":{"identifier":"allow-applocaldata-meta","description":"This allows non-recursive read access to metadata of the `$APPLOCALDATA` folder, including file listing and statistics.","permissions":["read-meta","scope-applocaldata-index"]},"allow-applocaldata-meta-recursive":{"identifier":"allow-applocaldata-meta-recursive","description":"This allows full recursive read access to metadata of the `$APPLOCALDATA` folder, including file listing and statistics.","permissions":["read-meta","scope-applocaldata-recursive"]},"allow-applocaldata-read":{"identifier":"allow-applocaldata-read","description":"This allows non-recursive read access to the `$APPLOCALDATA` folder.","permissions":["read-all","scope-applocaldata"]},"allow-applocaldata-read-recursive":{"identifier":"allow-applocaldata-read-recursive","description":"This allows full recursive read access to the complete `$APPLOCALDATA` folder, files and subdirectories.","permissions":["read-all","scope-applocaldata-recursive"]},"allow-applocaldata-write":{"identifier":"allow-applocaldata-write","description":"This allows non-recursive write access to the `$APPLOCALDATA` folder.","permissions":["write-all","scope-applocaldata"]},"allow-applocaldata-write-recursive":{"identifier":"allow-applocaldata-write-recursive","description":"This allows full recursive write access to the complete `$APPLOCALDATA` folder, files and subdirectories.","permissions":["write-all","scope-applocaldata-recursive"]},"allow-applog-meta":{"identifier":"allow-applog-meta","description":"This allows non-recursive read access to metadata of the `$APPLOG` folder, including file listing and statistics.","permissions":["read-meta","scope-applog-index"]},"allow-applog-meta-recursive":{"identifier":"allow-applog-meta-recursive","description":"This allows full recursive read access to metadata of the `$APPLOG` folder, including file listing and statistics.","permissions":["read-meta","scope-applog-recursive"]},"allow-applog-read":{"identifier":"allow-applog-read","description":"This allows non-recursive read access to the `$APPLOG` folder.","permissions":["read-all","scope-applog"]},"allow-applog-read-recursive":{"identifier":"allow-applog-read-recursive","description":"This allows full recursive read access to the complete `$APPLOG` folder, files and subdirectories.","permissions":["read-all","scope-applog-recursive"]},"allow-applog-write":{"identifier":"allow-applog-write","description":"This allows non-recursive write access to the `$APPLOG` folder.","permissions":["write-all","scope-applog"]},"allow-applog-write-recursive":{"identifier":"allow-applog-write-recursive","description":"This allows full recursive write access to the complete `$APPLOG` folder, files and subdirectories.","permissions":["write-all","scope-applog-recursive"]},"allow-audio-meta":{"identifier":"allow-audio-meta","description":"This allows non-recursive read access to metadata of the `$AUDIO` folder, including file listing and statistics.","permissions":["read-meta","scope-audio-index"]},"allow-audio-meta-recursive":{"identifier":"allow-audio-meta-recursive","description":"This allows full recursive read access to metadata of the `$AUDIO` folder, including file listing and statistics.","permissions":["read-meta","scope-audio-recursive"]},"allow-audio-read":{"identifier":"allow-audio-read","description":"This allows non-recursive read access to the `$AUDIO` folder.","permissions":["read-all","scope-audio"]},"allow-audio-read-recursive":{"identifier":"allow-audio-read-recursive","description":"This allows full recursive read access to the complete `$AUDIO` folder, files and subdirectories.","permissions":["read-all","scope-audio-recursive"]},"allow-audio-write":{"identifier":"allow-audio-write","description":"This allows non-recursive write access to the `$AUDIO` folder.","permissions":["write-all","scope-audio"]},"allow-audio-write-recursive":{"identifier":"allow-audio-write-recursive","description":"This allows full recursive write access to the complete `$AUDIO` folder, files and subdirectories.","permissions":["write-all","scope-audio-recursive"]},"allow-cache-meta":{"identifier":"allow-cache-meta","description":"This allows non-recursive read access to metadata of the `$CACHE` folder, including file listing and statistics.","permissions":["read-meta","scope-cache-index"]},"allow-cache-meta-recursive":{"identifier":"allow-cache-meta-recursive","description":"This allows full recursive read access to metadata of the `$CACHE` folder, including file listing and statistics.","permissions":["read-meta","scope-cache-recursive"]},"allow-cache-read":{"identifier":"allow-cache-read","description":"This allows non-recursive read access to the `$CACHE` folder.","permissions":["read-all","scope-cache"]},"allow-cache-read-recursive":{"identifier":"allow-cache-read-recursive","description":"This allows full recursive read access to the complete `$CACHE` folder, files and subdirectories.","permissions":["read-all","scope-cache-recursive"]},"allow-cache-write":{"identifier":"allow-cache-write","description":"This allows non-recursive write access to the `$CACHE` folder.","permissions":["write-all","scope-cache"]},"allow-cache-write-recursive":{"identifier":"allow-cache-write-recursive","description":"This allows full recursive write access to the complete `$CACHE` folder, files and subdirectories.","permissions":["write-all","scope-cache-recursive"]},"allow-config-meta":{"identifier":"allow-config-meta","description":"This allows non-recursive read access to metadata of the `$CONFIG` folder, including file listing and statistics.","permissions":["read-meta","scope-config-index"]},"allow-config-meta-recursive":{"identifier":"allow-config-meta-recursive","description":"This allows full recursive read access to metadata of the `$CONFIG` folder, including file listing and statistics.","permissions":["read-meta","scope-config-recursive"]},"allow-config-read":{"identifier":"allow-config-read","description":"This allows non-recursive read access to the `$CONFIG` folder.","permissions":["read-all","scope-config"]},"allow-config-read-recursive":{"identifier":"allow-config-read-recursive","description":"This allows full recursive read access to the complete `$CONFIG` folder, files and subdirectories.","permissions":["read-all","scope-config-recursive"]},"allow-config-write":{"identifier":"allow-config-write","description":"This allows non-recursive write access to the `$CONFIG` folder.","permissions":["write-all","scope-config"]},"allow-config-write-recursive":{"identifier":"allow-config-write-recursive","description":"This allows full recursive write access to the complete `$CONFIG` folder, files and subdirectories.","permissions":["write-all","scope-config-recursive"]},"allow-data-meta":{"identifier":"allow-data-meta","description":"This allows non-recursive read access to metadata of the `$DATA` folder, including file listing and statistics.","permissions":["read-meta","scope-data-index"]},"allow-data-meta-recursive":{"identifier":"allow-data-meta-recursive","description":"This allows full recursive read access to metadata of the `$DATA` folder, including file listing and statistics.","permissions":["read-meta","scope-data-recursive"]},"allow-data-read":{"identifier":"allow-data-read","description":"This allows non-recursive read access to the `$DATA` folder.","permissions":["read-all","scope-data"]},"allow-data-read-recursive":{"identifier":"allow-data-read-recursive","description":"This allows full recursive read access to the complete `$DATA` folder, files and subdirectories.","permissions":["read-all","scope-data-recursive"]},"allow-data-write":{"identifier":"allow-data-write","description":"This allows non-recursive write access to the `$DATA` folder.","permissions":["write-all","scope-data"]},"allow-data-write-recursive":{"identifier":"allow-data-write-recursive","description":"This allows full recursive write access to the complete `$DATA` folder, files and subdirectories.","permissions":["write-all","scope-data-recursive"]},"allow-desktop-meta":{"identifier":"allow-desktop-meta","description":"This allows non-recursive read access to metadata of the `$DESKTOP` folder, including file listing and statistics.","permissions":["read-meta","scope-desktop-index"]},"allow-desktop-meta-recursive":{"identifier":"allow-desktop-meta-recursive","description":"This allows full recursive read access to metadata of the `$DESKTOP` folder, including file listing and statistics.","permissions":["read-meta","scope-desktop-recursive"]},"allow-desktop-read":{"identifier":"allow-desktop-read","description":"This allows non-recursive read access to the `$DESKTOP` folder.","permissions":["read-all","scope-desktop"]},"allow-desktop-read-recursive":{"identifier":"allow-desktop-read-recursive","description":"This allows full recursive read access to the complete `$DESKTOP` folder, files and subdirectories.","permissions":["read-all","scope-desktop-recursive"]},"allow-desktop-write":{"identifier":"allow-desktop-write","description":"This allows non-recursive write access to the `$DESKTOP` folder.","permissions":["write-all","scope-desktop"]},"allow-desktop-write-recursive":{"identifier":"allow-desktop-write-recursive","description":"This allows full recursive write access to the complete `$DESKTOP` folder, files and subdirectories.","permissions":["write-all","scope-desktop-recursive"]},"allow-document-meta":{"identifier":"allow-document-meta","description":"This allows non-recursive read access to metadata of the `$DOCUMENT` folder, including file listing and statistics.","permissions":["read-meta","scope-document-index"]},"allow-document-meta-recursive":{"identifier":"allow-document-meta-recursive","description":"This allows full recursive read access to metadata of the `$DOCUMENT` folder, including file listing and statistics.","permissions":["read-meta","scope-document-recursive"]},"allow-document-read":{"identifier":"allow-document-read","description":"This allows non-recursive read access to the `$DOCUMENT` folder.","permissions":["read-all","scope-document"]},"allow-document-read-recursive":{"identifier":"allow-document-read-recursive","description":"This allows full recursive read access to the complete `$DOCUMENT` folder, files and subdirectories.","permissions":["read-all","scope-document-recursive"]},"allow-document-write":{"identifier":"allow-document-write","description":"This allows non-recursive write access to the `$DOCUMENT` folder.","permissions":["write-all","scope-document"]},"allow-document-write-recursive":{"identifier":"allow-document-write-recursive","description":"This allows full recursive write access to the complete `$DOCUMENT` folder, files and subdirectories.","permissions":["write-all","scope-document-recursive"]},"allow-download-meta":{"identifier":"allow-download-meta","description":"This allows non-recursive read access to metadata of the `$DOWNLOAD` folder, including file listing and statistics.","permissions":["read-meta","scope-download-index"]},"allow-download-meta-recursive":{"identifier":"allow-download-meta-recursive","description":"This allows full recursive read access to metadata of the `$DOWNLOAD` folder, including file listing and statistics.","permissions":["read-meta","scope-download-recursive"]},"allow-download-read":{"identifier":"allow-download-read","description":"This allows non-recursive read access to the `$DOWNLOAD` folder.","permissions":["read-all","scope-download"]},"allow-download-read-recursive":{"identifier":"allow-download-read-recursive","description":"This allows full recursive read access to the complete `$DOWNLOAD` folder, files and subdirectories.","permissions":["read-all","scope-download-recursive"]},"allow-download-write":{"identifier":"allow-download-write","description":"This allows non-recursive write access to the `$DOWNLOAD` folder.","permissions":["write-all","scope-download"]},"allow-download-write-recursive":{"identifier":"allow-download-write-recursive","description":"This allows full recursive write access to the complete `$DOWNLOAD` folder, files and subdirectories.","permissions":["write-all","scope-download-recursive"]},"allow-exe-meta":{"identifier":"allow-exe-meta","description":"This allows non-recursive read access to metadata of the `$EXE` folder, including file listing and statistics.","permissions":["read-meta","scope-exe-index"]},"allow-exe-meta-recursive":{"identifier":"allow-exe-meta-recursive","description":"This allows full recursive read access to metadata of the `$EXE` folder, including file listing and statistics.","permissions":["read-meta","scope-exe-recursive"]},"allow-exe-read":{"identifier":"allow-exe-read","description":"This allows non-recursive read access to the `$EXE` folder.","permissions":["read-all","scope-exe"]},"allow-exe-read-recursive":{"identifier":"allow-exe-read-recursive","description":"This allows full recursive read access to the complete `$EXE` folder, files and subdirectories.","permissions":["read-all","scope-exe-recursive"]},"allow-exe-write":{"identifier":"allow-exe-write","description":"This allows non-recursive write access to the `$EXE` folder.","permissions":["write-all","scope-exe"]},"allow-exe-write-recursive":{"identifier":"allow-exe-write-recursive","description":"This allows full recursive write access to the complete `$EXE` folder, files and subdirectories.","permissions":["write-all","scope-exe-recursive"]},"allow-font-meta":{"identifier":"allow-font-meta","description":"This allows non-recursive read access to metadata of the `$FONT` folder, including file listing and statistics.","permissions":["read-meta","scope-font-index"]},"allow-font-meta-recursive":{"identifier":"allow-font-meta-recursive","description":"This allows full recursive read access to metadata of the `$FONT` folder, including file listing and statistics.","permissions":["read-meta","scope-font-recursive"]},"allow-font-read":{"identifier":"allow-font-read","description":"This allows non-recursive read access to the `$FONT` folder.","permissions":["read-all","scope-font"]},"allow-font-read-recursive":{"identifier":"allow-font-read-recursive","description":"This allows full recursive read access to the complete `$FONT` folder, files and subdirectories.","permissions":["read-all","scope-font-recursive"]},"allow-font-write":{"identifier":"allow-font-write","description":"This allows non-recursive write access to the `$FONT` folder.","permissions":["write-all","scope-font"]},"allow-font-write-recursive":{"identifier":"allow-font-write-recursive","description":"This allows full recursive write access to the complete `$FONT` folder, files and subdirectories.","permissions":["write-all","scope-font-recursive"]},"allow-home-meta":{"identifier":"allow-home-meta","description":"This allows non-recursive read access to metadata of the `$HOME` folder, including file listing and statistics.","permissions":["read-meta","scope-home-index"]},"allow-home-meta-recursive":{"identifier":"allow-home-meta-recursive","description":"This allows full recursive read access to metadata of the `$HOME` folder, including file listing and statistics.","permissions":["read-meta","scope-home-recursive"]},"allow-home-read":{"identifier":"allow-home-read","description":"This allows non-recursive read access to the `$HOME` folder.","permissions":["read-all","scope-home"]},"allow-home-read-recursive":{"identifier":"allow-home-read-recursive","description":"This allows full recursive read access to the complete `$HOME` folder, files and subdirectories.","permissions":["read-all","scope-home-recursive"]},"allow-home-write":{"identifier":"allow-home-write","description":"This allows non-recursive write access to the `$HOME` folder.","permissions":["write-all","scope-home"]},"allow-home-write-recursive":{"identifier":"allow-home-write-recursive","description":"This allows full recursive write access to the complete `$HOME` folder, files and subdirectories.","permissions":["write-all","scope-home-recursive"]},"allow-localdata-meta":{"identifier":"allow-localdata-meta","description":"This allows non-recursive read access to metadata of the `$LOCALDATA` folder, including file listing and statistics.","permissions":["read-meta","scope-localdata-index"]},"allow-localdata-meta-recursive":{"identifier":"allow-localdata-meta-recursive","description":"This allows full recursive read access to metadata of the `$LOCALDATA` folder, including file listing and statistics.","permissions":["read-meta","scope-localdata-recursive"]},"allow-localdata-read":{"identifier":"allow-localdata-read","description":"This allows non-recursive read access to the `$LOCALDATA` folder.","permissions":["read-all","scope-localdata"]},"allow-localdata-read-recursive":{"identifier":"allow-localdata-read-recursive","description":"This allows full recursive read access to the complete `$LOCALDATA` folder, files and subdirectories.","permissions":["read-all","scope-localdata-recursive"]},"allow-localdata-write":{"identifier":"allow-localdata-write","description":"This allows non-recursive write access to the `$LOCALDATA` folder.","permissions":["write-all","scope-localdata"]},"allow-localdata-write-recursive":{"identifier":"allow-localdata-write-recursive","description":"This allows full recursive write access to the complete `$LOCALDATA` folder, files and subdirectories.","permissions":["write-all","scope-localdata-recursive"]},"allow-log-meta":{"identifier":"allow-log-meta","description":"This allows non-recursive read access to metadata of the `$LOG` folder, including file listing and statistics.","permissions":["read-meta","scope-log-index"]},"allow-log-meta-recursive":{"identifier":"allow-log-meta-recursive","description":"This allows full recursive read access to metadata of the `$LOG` folder, including file listing and statistics.","permissions":["read-meta","scope-log-recursive"]},"allow-log-read":{"identifier":"allow-log-read","description":"This allows non-recursive read access to the `$LOG` folder.","permissions":["read-all","scope-log"]},"allow-log-read-recursive":{"identifier":"allow-log-read-recursive","description":"This allows full recursive read access to the complete `$LOG` folder, files and subdirectories.","permissions":["read-all","scope-log-recursive"]},"allow-log-write":{"identifier":"allow-log-write","description":"This allows non-recursive write access to the `$LOG` folder.","permissions":["write-all","scope-log"]},"allow-log-write-recursive":{"identifier":"allow-log-write-recursive","description":"This allows full recursive write access to the complete `$LOG` folder, files and subdirectories.","permissions":["write-all","scope-log-recursive"]},"allow-picture-meta":{"identifier":"allow-picture-meta","description":"This allows non-recursive read access to metadata of the `$PICTURE` folder, including file listing and statistics.","permissions":["read-meta","scope-picture-index"]},"allow-picture-meta-recursive":{"identifier":"allow-picture-meta-recursive","description":"This allows full recursive read access to metadata of the `$PICTURE` folder, including file listing and statistics.","permissions":["read-meta","scope-picture-recursive"]},"allow-picture-read":{"identifier":"allow-picture-read","description":"This allows non-recursive read access to the `$PICTURE` folder.","permissions":["read-all","scope-picture"]},"allow-picture-read-recursive":{"identifier":"allow-picture-read-recursive","description":"This allows full recursive read access to the complete `$PICTURE` folder, files and subdirectories.","permissions":["read-all","scope-picture-recursive"]},"allow-picture-write":{"identifier":"allow-picture-write","description":"This allows non-recursive write access to the `$PICTURE` folder.","permissions":["write-all","scope-picture"]},"allow-picture-write-recursive":{"identifier":"allow-picture-write-recursive","description":"This allows full recursive write access to the complete `$PICTURE` folder, files and subdirectories.","permissions":["write-all","scope-picture-recursive"]},"allow-public-meta":{"identifier":"allow-public-meta","description":"This allows non-recursive read access to metadata of the `$PUBLIC` folder, including file listing and statistics.","permissions":["read-meta","scope-public-index"]},"allow-public-meta-recursive":{"identifier":"allow-public-meta-recursive","description":"This allows full recursive read access to metadata of the `$PUBLIC` folder, including file listing and statistics.","permissions":["read-meta","scope-public-recursive"]},"allow-public-read":{"identifier":"allow-public-read","description":"This allows non-recursive read access to the `$PUBLIC` folder.","permissions":["read-all","scope-public"]},"allow-public-read-recursive":{"identifier":"allow-public-read-recursive","description":"This allows full recursive read access to the complete `$PUBLIC` folder, files and subdirectories.","permissions":["read-all","scope-public-recursive"]},"allow-public-write":{"identifier":"allow-public-write","description":"This allows non-recursive write access to the `$PUBLIC` folder.","permissions":["write-all","scope-public"]},"allow-public-write-recursive":{"identifier":"allow-public-write-recursive","description":"This allows full recursive write access to the complete `$PUBLIC` folder, files and subdirectories.","permissions":["write-all","scope-public-recursive"]},"allow-resource-meta":{"identifier":"allow-resource-meta","description":"This allows non-recursive read access to metadata of the `$RESOURCE` folder, including file listing and statistics.","permissions":["read-meta","scope-resource-index"]},"allow-resource-meta-recursive":{"identifier":"allow-resource-meta-recursive","description":"This allows full recursive read access to metadata of the `$RESOURCE` folder, including file listing and statistics.","permissions":["read-meta","scope-resource-recursive"]},"allow-resource-read":{"identifier":"allow-resource-read","description":"This allows non-recursive read access to the `$RESOURCE` folder.","permissions":["read-all","scope-resource"]},"allow-resource-read-recursive":{"identifier":"allow-resource-read-recursive","description":"This allows full recursive read access to the complete `$RESOURCE` folder, files and subdirectories.","permissions":["read-all","scope-resource-recursive"]},"allow-resource-write":{"identifier":"allow-resource-write","description":"This allows non-recursive write access to the `$RESOURCE` folder.","permissions":["write-all","scope-resource"]},"allow-resource-write-recursive":{"identifier":"allow-resource-write-recursive","description":"This allows full recursive write access to the complete `$RESOURCE` folder, files and subdirectories.","permissions":["write-all","scope-resource-recursive"]},"allow-runtime-meta":{"identifier":"allow-runtime-meta","description":"This allows non-recursive read access to metadata of the `$RUNTIME` folder, including file listing and statistics.","permissions":["read-meta","scope-runtime-index"]},"allow-runtime-meta-recursive":{"identifier":"allow-runtime-meta-recursive","description":"This allows full recursive read access to metadata of the `$RUNTIME` folder, including file listing and statistics.","permissions":["read-meta","scope-runtime-recursive"]},"allow-runtime-read":{"identifier":"allow-runtime-read","description":"This allows non-recursive read access to the `$RUNTIME` folder.","permissions":["read-all","scope-runtime"]},"allow-runtime-read-recursive":{"identifier":"allow-runtime-read-recursive","description":"This allows full recursive read access to the complete `$RUNTIME` folder, files and subdirectories.","permissions":["read-all","scope-runtime-recursive"]},"allow-runtime-write":{"identifier":"allow-runtime-write","description":"This allows non-recursive write access to the `$RUNTIME` folder.","permissions":["write-all","scope-runtime"]},"allow-runtime-write-recursive":{"identifier":"allow-runtime-write-recursive","description":"This allows full recursive write access to the complete `$RUNTIME` folder, files and subdirectories.","permissions":["write-all","scope-runtime-recursive"]},"allow-temp-meta":{"identifier":"allow-temp-meta","description":"This allows non-recursive read access to metadata of the `$TEMP` folder, including file listing and statistics.","permissions":["read-meta","scope-temp-index"]},"allow-temp-meta-recursive":{"identifier":"allow-temp-meta-recursive","description":"This allows full recursive read access to metadata of the `$TEMP` folder, including file listing and statistics.","permissions":["read-meta","scope-temp-recursive"]},"allow-temp-read":{"identifier":"allow-temp-read","description":"This allows non-recursive read access to the `$TEMP` folder.","permissions":["read-all","scope-temp"]},"allow-temp-read-recursive":{"identifier":"allow-temp-read-recursive","description":"This allows full recursive read access to the complete `$TEMP` folder, files and subdirectories.","permissions":["read-all","scope-temp-recursive"]},"allow-temp-write":{"identifier":"allow-temp-write","description":"This allows non-recursive write access to the `$TEMP` folder.","permissions":["write-all","scope-temp"]},"allow-temp-write-recursive":{"identifier":"allow-temp-write-recursive","description":"This allows full recursive write access to the complete `$TEMP` folder, files and subdirectories.","permissions":["write-all","scope-temp-recursive"]},"allow-template-meta":{"identifier":"allow-template-meta","description":"This allows non-recursive read access to metadata of the `$TEMPLATE` folder, including file listing and statistics.","permissions":["read-meta","scope-template-index"]},"allow-template-meta-recursive":{"identifier":"allow-template-meta-recursive","description":"This allows full recursive read access to metadata of the `$TEMPLATE` folder, including file listing and statistics.","permissions":["read-meta","scope-template-recursive"]},"allow-template-read":{"identifier":"allow-template-read","description":"This allows non-recursive read access to the `$TEMPLATE` folder.","permissions":["read-all","scope-template"]},"allow-template-read-recursive":{"identifier":"allow-template-read-recursive","description":"This allows full recursive read access to the complete `$TEMPLATE` folder, files and subdirectories.","permissions":["read-all","scope-template-recursive"]},"allow-template-write":{"identifier":"allow-template-write","description":"This allows non-recursive write access to the `$TEMPLATE` folder.","permissions":["write-all","scope-template"]},"allow-template-write-recursive":{"identifier":"allow-template-write-recursive","description":"This allows full recursive write access to the complete `$TEMPLATE` folder, files and subdirectories.","permissions":["write-all","scope-template-recursive"]},"allow-video-meta":{"identifier":"allow-video-meta","description":"This allows non-recursive read access to metadata of the `$VIDEO` folder, including file listing and statistics.","permissions":["read-meta","scope-video-index"]},"allow-video-meta-recursive":{"identifier":"allow-video-meta-recursive","description":"This allows full recursive read access to metadata of the `$VIDEO` folder, including file listing and statistics.","permissions":["read-meta","scope-video-recursive"]},"allow-video-read":{"identifier":"allow-video-read","description":"This allows non-recursive read access to the `$VIDEO` folder.","permissions":["read-all","scope-video"]},"allow-video-read-recursive":{"identifier":"allow-video-read-recursive","description":"This allows full recursive read access to the complete `$VIDEO` folder, files and subdirectories.","permissions":["read-all","scope-video-recursive"]},"allow-video-write":{"identifier":"allow-video-write","description":"This allows non-recursive write access to the `$VIDEO` folder.","permissions":["write-all","scope-video"]},"allow-video-write-recursive":{"identifier":"allow-video-write-recursive","description":"This allows full recursive write access to the complete `$VIDEO` folder, files and subdirectories.","permissions":["write-all","scope-video-recursive"]},"deny-default":{"identifier":"deny-default","description":"This denies access to dangerous Tauri relevant files and folders by default.","permissions":["deny-webview-data-linux","deny-webview-data-windows"]}},"global_scope_schema":{"$schema":"http://json-schema.org/draft-07/schema#","anyOf":[{"description":"A path that can be accessed by the webview when using the fs APIs. FS scope path pattern.\n\nThe pattern can start with a variable that resolves to a system base directory. The variables are: `$AUDIO`, `$CACHE`, `$CONFIG`, `$DATA`, `$LOCALDATA`, `$DESKTOP`, `$DOCUMENT`, `$DOWNLOAD`, `$EXE`, `$FONT`, `$HOME`, `$PICTURE`, `$PUBLIC`, `$RUNTIME`, `$TEMPLATE`, `$VIDEO`, `$RESOURCE`, `$APP`, `$LOG`, `$TEMP`, `$APPCONFIG`, `$APPDATA`, `$APPLOCALDATA`, `$APPCACHE`, `$APPLOG`.","type":"string"},{"properties":{"path":{"description":"A path that can be accessed by the webview when using the fs APIs.\n\nThe pattern can start with a variable that resolves to a system base directory. The variables are: `$AUDIO`, `$CACHE`, `$CONFIG`, `$DATA`, `$LOCALDATA`, `$DESKTOP`, `$DOCUMENT`, `$DOWNLOAD`, `$EXE`, `$FONT`, `$HOME`, `$PICTURE`, `$PUBLIC`, `$RUNTIME`, `$TEMPLATE`, `$VIDEO`, `$RESOURCE`, `$APP`, `$LOG`, `$TEMP`, `$APPCONFIG`, `$APPDATA`, `$APPLOCALDATA`, `$APPCACHE`, `$APPLOG`.","type":"string"}},"required":["path"],"type":"object"}],"description":"FS scope entry.","title":"FsScopeEntry"}},"opener":{"default_permission":{"identifier":"default","description":"This permission set allows opening `mailto:`, `tel:`, `https://` and `http://` urls using their default application\nas well as reveal file in directories using default file explorer","permissions":["allow-open-url","allow-reveal-item-in-dir","allow-default-urls"]},"permissions":{"allow-default-urls":{"identifier":"allow-default-urls","description":"This enables opening `mailto:`, `tel:`, `https://` and `http://` urls using their default application.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"url":"mailto:*"},{"url":"tel:*"},{"url":"http://*"},{"url":"https://*"}]}},"allow-open-path":{"identifier":"allow-open-path","description":"Enables the open_path command without any pre-configured scope.","commands":{"allow":["open_path"],"deny":[]}},"allow-open-url":{"identifier":"allow-open-url","description":"Enables the open_url command without any pre-configured scope.","commands":{"allow":["open_url"],"deny":[]}},"allow-reveal-item-in-dir":{"identifier":"allow-reveal-item-in-dir","description":"Enables the reveal_item_in_dir command without any pre-configured scope.","commands":{"allow":["reveal_item_in_dir"],"deny":[]}},"deny-open-path":{"identifier":"deny-open-path","description":"Denies the open_path command without any pre-configured scope.","commands":{"allow":[],"deny":["open_path"]}},"deny-open-url":{"identifier":"deny-open-url","description":"Denies the open_url command without any pre-configured scope.","commands":{"allow":[],"deny":["open_url"]}},"deny-reveal-item-in-dir":{"identifier":"deny-reveal-item-in-dir","description":"Denies the reveal_item_in_dir command without any pre-configured scope.","commands":{"allow":[],"deny":["reveal_item_in_dir"]}}},"permission_sets":{},"global_scope_schema":{"$schema":"http://json-schema.org/draft-07/schema#","anyOf":[{"properties":{"app":{"allOf":[{"$ref":"#/definitions/Application"}],"description":"An application to open this url with, for example: firefox."},"url":{"description":"A URL that can be opened by the webview when using the Opener APIs.\n\nWildcards can be used following the UNIX glob pattern.\n\nExamples:\n\n- \"https://*\" : allows all HTTPS origin\n\n- \"https://*.github.com/tauri-apps/tauri\": allows any subdomain of \"github.com\" with the \"tauri-apps/api\" path\n\n- \"https://myapi.service.com/users/*\": allows access to any URLs that begins with \"https://myapi.service.com/users/\"","type":"string"}},"required":["url"],"type":"object"},{"properties":{"app":{"allOf":[{"$ref":"#/definitions/Application"}],"description":"An application to open this path with, for example: xdg-open."},"path":{"description":"A path that can be opened by the webview when using the Opener APIs.\n\nThe pattern can start with a variable that resolves to a system base directory. The variables are: `$AUDIO`, `$CACHE`, `$CONFIG`, `$DATA`, `$LOCALDATA`, `$DESKTOP`, `$DOCUMENT`, `$DOWNLOAD`, `$EXE`, `$FONT`, `$HOME`, `$PICTURE`, `$PUBLIC`, `$RUNTIME`, `$TEMPLATE`, `$VIDEO`, `$RESOURCE`, `$APP`, `$LOG`, `$TEMP`, `$APPCONFIG`, `$APPDATA`, `$APPLOCALDATA`, `$APPCACHE`, `$APPLOG`.","type":"string"}},"required":["path"],"type":"object"}],"definitions":{"Application":{"anyOf":[{"description":"Open in default application.","type":"null"},{"description":"If true, allow open with any application.","type":"boolean"},{"description":"Allow specific application to open with.","type":"string"}],"description":"Opener scope application."}},"description":"Opener scope entry.","title":"OpenerScopeEntry"}},"shell":{"default_permission":{"identifier":"default","description":"This permission set configures which\nshell functionality is exposed by default.\n\n#### Granted Permissions\n\nIt allows to use the `open` functionality with a reasonable\nscope pre-configured. It will allow opening `http(s)://`,\n`tel:` and `mailto:` links.\n","permissions":["allow-open"]},"permissions":{"allow-execute":{"identifier":"allow-execute","description":"Enables the execute command without any pre-configured scope.","commands":{"allow":["execute"],"deny":[]}},"allow-kill":{"identifier":"allow-kill","description":"Enables the kill command without any pre-configured scope.","commands":{"allow":["kill"],"deny":[]}},"allow-open":{"identifier":"allow-open","description":"Enables the open command without any pre-configured scope.","commands":{"allow":["open"],"deny":[]}},"allow-spawn":{"identifier":"allow-spawn","description":"Enables the spawn command without any pre-configured scope.","commands":{"allow":["spawn"],"deny":[]}},"allow-stdin-write":{"identifier":"allow-stdin-write","description":"Enables the stdin_write command without any pre-configured scope.","commands":{"allow":["stdin_write"],"deny":[]}},"deny-execute":{"identifier":"deny-execute","description":"Denies the execute command without any pre-configured scope.","commands":{"allow":[],"deny":["execute"]}},"deny-kill":{"identifier":"deny-kill","description":"Denies the kill command without any pre-configured scope.","commands":{"allow":[],"deny":["kill"]}},"deny-open":{"identifier":"deny-open","description":"Denies the open command without any pre-configured scope.","commands":{"allow":[],"deny":["open"]}},"deny-spawn":{"identifier":"deny-spawn","description":"Denies the spawn command without any pre-configured scope.","commands":{"allow":[],"deny":["spawn"]}},"deny-stdin-write":{"identifier":"deny-stdin-write","description":"Denies the stdin_write command without any pre-configured scope.","commands":{"allow":[],"deny":["stdin_write"]}}},"permission_sets":{},"global_scope_schema":{"$schema":"http://json-schema.org/draft-07/schema#","anyOf":[{"additionalProperties":false,"properties":{"args":{"allOf":[{"$ref":"#/definitions/ShellScopeEntryAllowedArgs"}],"description":"The allowed arguments for the command execution."},"cmd":{"description":"The command name. It can start with a variable that resolves to a system base directory. The variables are: `$AUDIO`, `$CACHE`, `$CONFIG`, `$DATA`, `$LOCALDATA`, `$DESKTOP`, `$DOCUMENT`, `$DOWNLOAD`, `$EXE`, `$FONT`, `$HOME`, `$PICTURE`, `$PUBLIC`, `$RUNTIME`, `$TEMPLATE`, `$VIDEO`, `$RESOURCE`, `$LOG`, `$TEMP`, `$APPCONFIG`, `$APPDATA`, `$APPLOCALDATA`, `$APPCACHE`, `$APPLOG`.","type":"string"},"name":{"description":"The name for this allowed shell command configuration.\n\nThis name will be used inside of the webview API to call this command along with any specified arguments.","type":"string"}},"required":["cmd","name"],"type":"object"},{"additionalProperties":false,"properties":{"args":{"allOf":[{"$ref":"#/definitions/ShellScopeEntryAllowedArgs"}],"description":"The allowed arguments for the command execution."},"name":{"description":"The name for this allowed shell command configuration.\n\nThis name will be used inside of the webview API to call this command along with any specified arguments.","type":"string"},"sidecar":{"description":"If this command is a sidecar command.","type":"boolean"}},"required":["name","sidecar"],"type":"object"}],"definitions":{"ShellScopeEntryAllowedArg":{"anyOf":[{"description":"A non-configurable argument that is passed to the command in the order it was specified.","type":"string"},{"additionalProperties":false,"description":"A variable that is set while calling the command from the webview API.","properties":{"raw":{"default":false,"description":"Marks the validator as a raw regex, meaning the plugin should not make any modification at runtime.\n\nThis means the regex will not match on the entire string by default, which might be exploited if your regex allow unexpected input to be considered valid. When using this option, make sure your regex is correct.","type":"boolean"},"validator":{"description":"[regex] validator to require passed values to conform to an expected input.\n\nThis will require the argument value passed to this variable to match the `validator` regex before it will be executed.\n\nThe regex string is by default surrounded by `^...$` to match the full string. For example the `https?://\\w+` regex would be registered as `^https?://\\w+$`.\n\n[regex]: <https://docs.rs/regex/latest/regex/#syntax>","type":"string"}},"required":["validator"],"type":"object"}],"description":"A command argument allowed to be executed by the webview API."},"ShellScopeEntryAllowedArgs":{"anyOf":[{"description":"Use a simple boolean to allow all or disable all arguments to this command configuration.","type":"boolean"},{"description":"A specific set of [`ShellScopeEntryAllowedArg`] that are valid to call for the command configuration.","items":{"$ref":"#/definitions/ShellScopeEntryAllowedArg"},"type":"array"}],"description":"A set of command arguments allowed to be executed by the webview API.\n\nA value of `true` will allow any arguments to be passed to the command. `false` will disable all arguments. A list of [`ShellScopeEntryAllowedArg`] will set those arguments as the only valid arguments to be passed to the attached command configuration."}},"description":"Shell scope entry.","title":"ShellScopeEntry"}}}

//-==================== END OF FILE: src-tauri\gen\schemas\acl-manifests.json ====================-//

//-==================== START OF FILE: src-tauri\gen\schemas\capabilities.json ====================-//

{"default":{"identifier":"default","description":"enables the default permissions","local":true,"windows":["main"],"permissions":["fs:default",{"identifier":"fs:allow-exists","allow":[{"path":"$APPDATA/*"}]},{"identifier":"fs:allow-read","allow":[{"path":"$APPDATA/*"}]},{"identifier":"fs:allow-write","allow":[{"path":"$APPDATA/*"}]},{"identifier":"fs:allow-remove","allow":[{"path":"$APPDATA/*"}]},{"identifier":"fs:scope","allow":[{"path":"$APPDATA"},{"path":"$APPDATA/**"}]},"core:path:default",{"identifier":"core:path:allow-resolve-directory","allow":[{"path":"$APPDATA"},{"path":"$APPDATA/**"}]},"core:event:default","core:event:allow-listen","core:window:default","core:window:allow-close","core:window:allow-maximize","core:window:allow-minimize","core:window:allow-is-maximized","core:window:allow-unmaximize","core:window:allow-start-dragging","shell:allow-open"]}}

//-==================== END OF FILE: src-tauri\gen\schemas\capabilities.json ====================-//

//-==================== START OF FILE: src-tauri\gen\schemas\desktop-schema.json ====================-//

{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "CapabilityFile",
  "description": "Capability formats accepted in a capability file.",
  "anyOf": [
    {
      "description": "A single capability.",
      "allOf": [
        {
          "$ref": "#/definitions/Capability"
        }
      ]
    },
    {
      "description": "A list of capabilities.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Capability"
      }
    },
    {
      "description": "A list of capabilities.",
      "type": "object",
      "required": [
        "capabilities"
      ],
      "properties": {
        "capabilities": {
          "description": "The list of capabilities.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Capability"
          }
        }
      }
    }
  ],
  "definitions": {
    "Capability": {
      "description": "A grouping and boundary mechanism developers can use to isolate access to the IPC layer.\n\nIt controls application windows' and webviews' fine grained access to the Tauri core, application, or plugin commands. If a webview or its window is not matching any capability then it has no access to the IPC layer at all.\n\nThis can be done to create groups of windows, based on their required system access, which can reduce impact of frontend vulnerabilities in less privileged windows. Windows can be added to a capability by exact name (e.g. `main-window`) or glob patterns like `*` or `admin-*`. A Window can have none, one, or multiple associated capabilities.\n\n## Example\n\n```json { \"identifier\": \"main-user-files-write\", \"description\": \"This capability allows the `main` window on macOS and Windows access to `filesystem` write related commands and `dialog` commands to enable programatic access to files selected by the user.\", \"windows\": [ \"main\" ], \"permissions\": [ \"core:default\", \"dialog:open\", { \"identifier\": \"fs:allow-write-text-file\", \"allow\": [{ \"path\": \"$HOME/test.txt\" }] }, ], \"platforms\": [\"macOS\",\"windows\"] } ```",
      "type": "object",
      "required": [
        "identifier",
        "permissions"
      ],
      "properties": {
        "identifier": {
          "description": "Identifier of the capability.\n\n## Example\n\n`main-user-files-write`",
          "type": "string"
        },
        "description": {
          "description": "Description of what the capability is intended to allow on associated windows.\n\nIt should contain a description of what the grouped permissions should allow.\n\n## Example\n\nThis capability allows the `main` window access to `filesystem` write related commands and `dialog` commands to enable programatic access to files selected by the user.",
          "default": "",
          "type": "string"
        },
        "remote": {
          "description": "Configure remote URLs that can use the capability permissions.\n\nThis setting is optional and defaults to not being set, as our default use case is that the content is served from our local application.\n\n:::caution Make sure you understand the security implications of providing remote sources with local system access. :::\n\n## Example\n\n```json { \"urls\": [\"https://*.mydomain.dev\"] } ```",
          "anyOf": [
            {
              "$ref": "#/definitions/CapabilityRemote"
            },
            {
              "type": "null"
            }
          ]
        },
        "local": {
          "description": "Whether this capability is enabled for local app URLs or not. Defaults to `true`.",
          "default": true,
          "type": "boolean"
        },
        "windows": {
          "description": "List of windows that are affected by this capability. Can be a glob pattern.\n\nIf a window label matches any of the patterns in this list, the capability will be enabled on all the webviews of that window, regardless of the value of [`Self::webviews`].\n\nOn multiwebview windows, prefer specifying [`Self::webviews`] and omitting [`Self::windows`] for a fine grained access control.\n\n## Example\n\n`[\"main\"]`",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "webviews": {
          "description": "List of webviews that are affected by this capability. Can be a glob pattern.\n\nThe capability will be enabled on all the webviews whose label matches any of the patterns in this list, regardless of whether the webview's window label matches a pattern in [`Self::windows`].\n\n## Example\n\n`[\"sub-webview-one\", \"sub-webview-two\"]`",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "permissions": {
          "description": "List of permissions attached to this capability.\n\nMust include the plugin name as prefix in the form of `${plugin-name}:${permission-name}`. For commands directly implemented in the application itself only `${permission-name}` is required.\n\n## Example\n\n```json [ \"core:default\", \"shell:allow-open\", \"dialog:open\", { \"identifier\": \"fs:allow-write-text-file\", \"allow\": [{ \"path\": \"$HOME/test.txt\" }] } ] ```",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PermissionEntry"
          },
          "uniqueItems": true
        },
        "platforms": {
          "description": "Limit which target platforms this capability applies to.\n\nBy default all platforms are targeted.\n\n## Example\n\n`[\"macOS\",\"windows\"]`",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/Target"
          }
        }
      }
    },
    "CapabilityRemote": {
      "description": "Configuration for remote URLs that are associated with the capability.",
      "type": "object",
      "required": [
        "urls"
      ],
      "properties": {
        "urls": {
          "description": "Remote domains this capability refers to using the [URLPattern standard](https://urlpattern.spec.whatwg.org/).\n\n## Examples\n\n- \"https://*.mydomain.dev\": allows subdomains of mydomain.dev - \"https://mydomain.dev/api/*\": allows any subpath of mydomain.dev/api",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PermissionEntry": {
      "description": "An entry for a permission value in a [`Capability`] can be either a raw permission [`Identifier`] or an object that references a permission and extends its scope.",
      "anyOf": [
        {
          "description": "Reference a permission or permission set by identifier.",
          "allOf": [
            {
              "$ref": "#/definitions/Identifier"
            }
          ]
        },
        {
          "description": "Reference a permission or permission set by identifier and extends its scope.",
          "type": "object",
          "allOf": [
            {
              "if": {
                "properties": {
                  "identifier": {
                    "anyOf": [
                      {
                        "description": "This set of permissions describes the what kind of\nfile system access the `fs` plugin has enabled or denied by default.\n\n#### Granted Permissions\n\nThis default permission set enables read access to the\napplication specific directories (AppConfig, AppData, AppLocalData, AppCache,\nAppLog) and all files and sub directories created in it.\nThe location of these directories depends on the operating system,\nwhere the application is run.\n\nIn general these directories need to be manually created\nby the application at runtime, before accessing files or folders\nin it is possible.\n\nTherefore, it is also allowed to create all of these folders via\nthe `mkdir` command.\n\n#### Denied Permissions\n\nThis default permission set prevents access to critical components\nof the Tauri application by default.\nOn Windows the webview data folder access is denied.\n\n#### This default permission set includes:\n\n- `create-app-specific-dirs`\n- `read-app-specific-dirs-recursive`\n- `deny-default`",
                        "type": "string",
                        "const": "fs:default",
                        "markdownDescription": "This set of permissions describes the what kind of\nfile system access the `fs` plugin has enabled or denied by default.\n\n#### Granted Permissions\n\nThis default permission set enables read access to the\napplication specific directories (AppConfig, AppData, AppLocalData, AppCache,\nAppLog) and all files and sub directories created in it.\nThe location of these directories depends on the operating system,\nwhere the application is run.\n\nIn general these directories need to be manually created\nby the application at runtime, before accessing files or folders\nin it is possible.\n\nTherefore, it is also allowed to create all of these folders via\nthe `mkdir` command.\n\n#### Denied Permissions\n\nThis default permission set prevents access to critical components\nof the Tauri application by default.\nOn Windows the webview data folder access is denied.\n\n#### This default permission set includes:\n\n- `create-app-specific-dirs`\n- `read-app-specific-dirs-recursive`\n- `deny-default`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the application folders, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-app-index`",
                        "type": "string",
                        "const": "fs:allow-app-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the application folders, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-app-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the application folders, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-app-recursive`",
                        "type": "string",
                        "const": "fs:allow-app-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the application folders, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-app-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the application folders.\n#### This permission set includes:\n\n- `read-all`\n- `scope-app`",
                        "type": "string",
                        "const": "fs:allow-app-read",
                        "markdownDescription": "This allows non-recursive read access to the application folders.\n#### This permission set includes:\n\n- `read-all`\n- `scope-app`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete application folders, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-app-recursive`",
                        "type": "string",
                        "const": "fs:allow-app-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete application folders, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-app-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the application folders.\n#### This permission set includes:\n\n- `write-all`\n- `scope-app`",
                        "type": "string",
                        "const": "fs:allow-app-write",
                        "markdownDescription": "This allows non-recursive write access to the application folders.\n#### This permission set includes:\n\n- `write-all`\n- `scope-app`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete application folders, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-app-recursive`",
                        "type": "string",
                        "const": "fs:allow-app-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete application folders, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-app-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$APPCACHE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appcache-index`",
                        "type": "string",
                        "const": "fs:allow-appcache-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$APPCACHE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appcache-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$APPCACHE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appcache-recursive`",
                        "type": "string",
                        "const": "fs:allow-appcache-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$APPCACHE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appcache-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$APPCACHE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appcache`",
                        "type": "string",
                        "const": "fs:allow-appcache-read",
                        "markdownDescription": "This allows non-recursive read access to the `$APPCACHE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appcache`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$APPCACHE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appcache-recursive`",
                        "type": "string",
                        "const": "fs:allow-appcache-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$APPCACHE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appcache-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$APPCACHE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appcache`",
                        "type": "string",
                        "const": "fs:allow-appcache-write",
                        "markdownDescription": "This allows non-recursive write access to the `$APPCACHE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appcache`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$APPCACHE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appcache-recursive`",
                        "type": "string",
                        "const": "fs:allow-appcache-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$APPCACHE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appcache-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$APPCONFIG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appconfig-index`",
                        "type": "string",
                        "const": "fs:allow-appconfig-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$APPCONFIG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appconfig-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$APPCONFIG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appconfig-recursive`",
                        "type": "string",
                        "const": "fs:allow-appconfig-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$APPCONFIG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appconfig-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$APPCONFIG` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appconfig`",
                        "type": "string",
                        "const": "fs:allow-appconfig-read",
                        "markdownDescription": "This allows non-recursive read access to the `$APPCONFIG` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appconfig`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$APPCONFIG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appconfig-recursive`",
                        "type": "string",
                        "const": "fs:allow-appconfig-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$APPCONFIG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appconfig-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$APPCONFIG` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appconfig`",
                        "type": "string",
                        "const": "fs:allow-appconfig-write",
                        "markdownDescription": "This allows non-recursive write access to the `$APPCONFIG` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appconfig`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$APPCONFIG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appconfig-recursive`",
                        "type": "string",
                        "const": "fs:allow-appconfig-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$APPCONFIG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appconfig-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$APPDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appdata-index`",
                        "type": "string",
                        "const": "fs:allow-appdata-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$APPDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appdata-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$APPDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appdata-recursive`",
                        "type": "string",
                        "const": "fs:allow-appdata-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$APPDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appdata-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$APPDATA` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appdata`",
                        "type": "string",
                        "const": "fs:allow-appdata-read",
                        "markdownDescription": "This allows non-recursive read access to the `$APPDATA` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appdata`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$APPDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appdata-recursive`",
                        "type": "string",
                        "const": "fs:allow-appdata-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$APPDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appdata-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$APPDATA` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appdata`",
                        "type": "string",
                        "const": "fs:allow-appdata-write",
                        "markdownDescription": "This allows non-recursive write access to the `$APPDATA` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appdata`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$APPDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appdata-recursive`",
                        "type": "string",
                        "const": "fs:allow-appdata-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$APPDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appdata-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$APPLOCALDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-applocaldata-index`",
                        "type": "string",
                        "const": "fs:allow-applocaldata-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$APPLOCALDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-applocaldata-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$APPLOCALDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-applocaldata-recursive`",
                        "type": "string",
                        "const": "fs:allow-applocaldata-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$APPLOCALDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-applocaldata-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$APPLOCALDATA` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-applocaldata`",
                        "type": "string",
                        "const": "fs:allow-applocaldata-read",
                        "markdownDescription": "This allows non-recursive read access to the `$APPLOCALDATA` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-applocaldata`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$APPLOCALDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-applocaldata-recursive`",
                        "type": "string",
                        "const": "fs:allow-applocaldata-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$APPLOCALDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-applocaldata-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$APPLOCALDATA` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-applocaldata`",
                        "type": "string",
                        "const": "fs:allow-applocaldata-write",
                        "markdownDescription": "This allows non-recursive write access to the `$APPLOCALDATA` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-applocaldata`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$APPLOCALDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-applocaldata-recursive`",
                        "type": "string",
                        "const": "fs:allow-applocaldata-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$APPLOCALDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-applocaldata-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$APPLOG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-applog-index`",
                        "type": "string",
                        "const": "fs:allow-applog-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$APPLOG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-applog-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$APPLOG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-applog-recursive`",
                        "type": "string",
                        "const": "fs:allow-applog-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$APPLOG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-applog-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$APPLOG` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-applog`",
                        "type": "string",
                        "const": "fs:allow-applog-read",
                        "markdownDescription": "This allows non-recursive read access to the `$APPLOG` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-applog`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$APPLOG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-applog-recursive`",
                        "type": "string",
                        "const": "fs:allow-applog-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$APPLOG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-applog-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$APPLOG` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-applog`",
                        "type": "string",
                        "const": "fs:allow-applog-write",
                        "markdownDescription": "This allows non-recursive write access to the `$APPLOG` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-applog`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$APPLOG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-applog-recursive`",
                        "type": "string",
                        "const": "fs:allow-applog-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$APPLOG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-applog-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$AUDIO` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-audio-index`",
                        "type": "string",
                        "const": "fs:allow-audio-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$AUDIO` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-audio-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$AUDIO` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-audio-recursive`",
                        "type": "string",
                        "const": "fs:allow-audio-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$AUDIO` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-audio-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$AUDIO` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-audio`",
                        "type": "string",
                        "const": "fs:allow-audio-read",
                        "markdownDescription": "This allows non-recursive read access to the `$AUDIO` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-audio`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$AUDIO` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-audio-recursive`",
                        "type": "string",
                        "const": "fs:allow-audio-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$AUDIO` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-audio-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$AUDIO` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-audio`",
                        "type": "string",
                        "const": "fs:allow-audio-write",
                        "markdownDescription": "This allows non-recursive write access to the `$AUDIO` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-audio`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$AUDIO` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-audio-recursive`",
                        "type": "string",
                        "const": "fs:allow-audio-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$AUDIO` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-audio-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$CACHE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-cache-index`",
                        "type": "string",
                        "const": "fs:allow-cache-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$CACHE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-cache-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$CACHE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-cache-recursive`",
                        "type": "string",
                        "const": "fs:allow-cache-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$CACHE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-cache-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$CACHE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-cache`",
                        "type": "string",
                        "const": "fs:allow-cache-read",
                        "markdownDescription": "This allows non-recursive read access to the `$CACHE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-cache`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$CACHE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-cache-recursive`",
                        "type": "string",
                        "const": "fs:allow-cache-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$CACHE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-cache-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$CACHE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-cache`",
                        "type": "string",
                        "const": "fs:allow-cache-write",
                        "markdownDescription": "This allows non-recursive write access to the `$CACHE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-cache`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$CACHE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-cache-recursive`",
                        "type": "string",
                        "const": "fs:allow-cache-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$CACHE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-cache-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$CONFIG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-config-index`",
                        "type": "string",
                        "const": "fs:allow-config-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$CONFIG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-config-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$CONFIG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-config-recursive`",
                        "type": "string",
                        "const": "fs:allow-config-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$CONFIG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-config-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$CONFIG` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-config`",
                        "type": "string",
                        "const": "fs:allow-config-read",
                        "markdownDescription": "This allows non-recursive read access to the `$CONFIG` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-config`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$CONFIG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-config-recursive`",
                        "type": "string",
                        "const": "fs:allow-config-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$CONFIG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-config-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$CONFIG` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-config`",
                        "type": "string",
                        "const": "fs:allow-config-write",
                        "markdownDescription": "This allows non-recursive write access to the `$CONFIG` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-config`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$CONFIG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-config-recursive`",
                        "type": "string",
                        "const": "fs:allow-config-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$CONFIG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-config-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$DATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-data-index`",
                        "type": "string",
                        "const": "fs:allow-data-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$DATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-data-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$DATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-data-recursive`",
                        "type": "string",
                        "const": "fs:allow-data-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$DATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-data-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$DATA` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-data`",
                        "type": "string",
                        "const": "fs:allow-data-read",
                        "markdownDescription": "This allows non-recursive read access to the `$DATA` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-data`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$DATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-data-recursive`",
                        "type": "string",
                        "const": "fs:allow-data-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$DATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-data-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$DATA` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-data`",
                        "type": "string",
                        "const": "fs:allow-data-write",
                        "markdownDescription": "This allows non-recursive write access to the `$DATA` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-data`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$DATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-data-recursive`",
                        "type": "string",
                        "const": "fs:allow-data-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$DATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-data-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$DESKTOP` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-desktop-index`",
                        "type": "string",
                        "const": "fs:allow-desktop-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$DESKTOP` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-desktop-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$DESKTOP` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-desktop-recursive`",
                        "type": "string",
                        "const": "fs:allow-desktop-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$DESKTOP` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-desktop-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$DESKTOP` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-desktop`",
                        "type": "string",
                        "const": "fs:allow-desktop-read",
                        "markdownDescription": "This allows non-recursive read access to the `$DESKTOP` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-desktop`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$DESKTOP` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-desktop-recursive`",
                        "type": "string",
                        "const": "fs:allow-desktop-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$DESKTOP` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-desktop-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$DESKTOP` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-desktop`",
                        "type": "string",
                        "const": "fs:allow-desktop-write",
                        "markdownDescription": "This allows non-recursive write access to the `$DESKTOP` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-desktop`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$DESKTOP` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-desktop-recursive`",
                        "type": "string",
                        "const": "fs:allow-desktop-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$DESKTOP` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-desktop-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$DOCUMENT` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-document-index`",
                        "type": "string",
                        "const": "fs:allow-document-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$DOCUMENT` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-document-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$DOCUMENT` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-document-recursive`",
                        "type": "string",
                        "const": "fs:allow-document-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$DOCUMENT` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-document-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$DOCUMENT` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-document`",
                        "type": "string",
                        "const": "fs:allow-document-read",
                        "markdownDescription": "This allows non-recursive read access to the `$DOCUMENT` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-document`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$DOCUMENT` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-document-recursive`",
                        "type": "string",
                        "const": "fs:allow-document-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$DOCUMENT` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-document-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$DOCUMENT` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-document`",
                        "type": "string",
                        "const": "fs:allow-document-write",
                        "markdownDescription": "This allows non-recursive write access to the `$DOCUMENT` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-document`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$DOCUMENT` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-document-recursive`",
                        "type": "string",
                        "const": "fs:allow-document-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$DOCUMENT` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-document-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$DOWNLOAD` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-download-index`",
                        "type": "string",
                        "const": "fs:allow-download-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$DOWNLOAD` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-download-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$DOWNLOAD` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-download-recursive`",
                        "type": "string",
                        "const": "fs:allow-download-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$DOWNLOAD` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-download-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$DOWNLOAD` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-download`",
                        "type": "string",
                        "const": "fs:allow-download-read",
                        "markdownDescription": "This allows non-recursive read access to the `$DOWNLOAD` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-download`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$DOWNLOAD` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-download-recursive`",
                        "type": "string",
                        "const": "fs:allow-download-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$DOWNLOAD` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-download-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$DOWNLOAD` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-download`",
                        "type": "string",
                        "const": "fs:allow-download-write",
                        "markdownDescription": "This allows non-recursive write access to the `$DOWNLOAD` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-download`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$DOWNLOAD` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-download-recursive`",
                        "type": "string",
                        "const": "fs:allow-download-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$DOWNLOAD` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-download-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$EXE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-exe-index`",
                        "type": "string",
                        "const": "fs:allow-exe-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$EXE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-exe-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$EXE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-exe-recursive`",
                        "type": "string",
                        "const": "fs:allow-exe-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$EXE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-exe-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$EXE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-exe`",
                        "type": "string",
                        "const": "fs:allow-exe-read",
                        "markdownDescription": "This allows non-recursive read access to the `$EXE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-exe`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$EXE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-exe-recursive`",
                        "type": "string",
                        "const": "fs:allow-exe-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$EXE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-exe-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$EXE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-exe`",
                        "type": "string",
                        "const": "fs:allow-exe-write",
                        "markdownDescription": "This allows non-recursive write access to the `$EXE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-exe`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$EXE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-exe-recursive`",
                        "type": "string",
                        "const": "fs:allow-exe-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$EXE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-exe-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$FONT` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-font-index`",
                        "type": "string",
                        "const": "fs:allow-font-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$FONT` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-font-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$FONT` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-font-recursive`",
                        "type": "string",
                        "const": "fs:allow-font-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$FONT` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-font-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$FONT` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-font`",
                        "type": "string",
                        "const": "fs:allow-font-read",
                        "markdownDescription": "This allows non-recursive read access to the `$FONT` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-font`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$FONT` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-font-recursive`",
                        "type": "string",
                        "const": "fs:allow-font-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$FONT` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-font-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$FONT` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-font`",
                        "type": "string",
                        "const": "fs:allow-font-write",
                        "markdownDescription": "This allows non-recursive write access to the `$FONT` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-font`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$FONT` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-font-recursive`",
                        "type": "string",
                        "const": "fs:allow-font-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$FONT` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-font-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$HOME` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-home-index`",
                        "type": "string",
                        "const": "fs:allow-home-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$HOME` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-home-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$HOME` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-home-recursive`",
                        "type": "string",
                        "const": "fs:allow-home-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$HOME` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-home-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$HOME` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-home`",
                        "type": "string",
                        "const": "fs:allow-home-read",
                        "markdownDescription": "This allows non-recursive read access to the `$HOME` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-home`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$HOME` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-home-recursive`",
                        "type": "string",
                        "const": "fs:allow-home-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$HOME` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-home-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$HOME` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-home`",
                        "type": "string",
                        "const": "fs:allow-home-write",
                        "markdownDescription": "This allows non-recursive write access to the `$HOME` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-home`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$HOME` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-home-recursive`",
                        "type": "string",
                        "const": "fs:allow-home-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$HOME` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-home-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$LOCALDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-localdata-index`",
                        "type": "string",
                        "const": "fs:allow-localdata-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$LOCALDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-localdata-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$LOCALDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-localdata-recursive`",
                        "type": "string",
                        "const": "fs:allow-localdata-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$LOCALDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-localdata-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$LOCALDATA` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-localdata`",
                        "type": "string",
                        "const": "fs:allow-localdata-read",
                        "markdownDescription": "This allows non-recursive read access to the `$LOCALDATA` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-localdata`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$LOCALDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-localdata-recursive`",
                        "type": "string",
                        "const": "fs:allow-localdata-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$LOCALDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-localdata-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$LOCALDATA` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-localdata`",
                        "type": "string",
                        "const": "fs:allow-localdata-write",
                        "markdownDescription": "This allows non-recursive write access to the `$LOCALDATA` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-localdata`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$LOCALDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-localdata-recursive`",
                        "type": "string",
                        "const": "fs:allow-localdata-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$LOCALDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-localdata-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$LOG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-log-index`",
                        "type": "string",
                        "const": "fs:allow-log-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$LOG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-log-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$LOG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-log-recursive`",
                        "type": "string",
                        "const": "fs:allow-log-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$LOG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-log-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$LOG` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-log`",
                        "type": "string",
                        "const": "fs:allow-log-read",
                        "markdownDescription": "This allows non-recursive read access to the `$LOG` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-log`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$LOG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-log-recursive`",
                        "type": "string",
                        "const": "fs:allow-log-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$LOG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-log-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$LOG` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-log`",
                        "type": "string",
                        "const": "fs:allow-log-write",
                        "markdownDescription": "This allows non-recursive write access to the `$LOG` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-log`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$LOG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-log-recursive`",
                        "type": "string",
                        "const": "fs:allow-log-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$LOG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-log-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$PICTURE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-picture-index`",
                        "type": "string",
                        "const": "fs:allow-picture-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$PICTURE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-picture-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$PICTURE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-picture-recursive`",
                        "type": "string",
                        "const": "fs:allow-picture-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$PICTURE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-picture-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$PICTURE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-picture`",
                        "type": "string",
                        "const": "fs:allow-picture-read",
                        "markdownDescription": "This allows non-recursive read access to the `$PICTURE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-picture`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$PICTURE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-picture-recursive`",
                        "type": "string",
                        "const": "fs:allow-picture-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$PICTURE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-picture-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$PICTURE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-picture`",
                        "type": "string",
                        "const": "fs:allow-picture-write",
                        "markdownDescription": "This allows non-recursive write access to the `$PICTURE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-picture`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$PICTURE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-picture-recursive`",
                        "type": "string",
                        "const": "fs:allow-picture-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$PICTURE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-picture-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$PUBLIC` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-public-index`",
                        "type": "string",
                        "const": "fs:allow-public-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$PUBLIC` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-public-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$PUBLIC` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-public-recursive`",
                        "type": "string",
                        "const": "fs:allow-public-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$PUBLIC` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-public-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$PUBLIC` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-public`",
                        "type": "string",
                        "const": "fs:allow-public-read",
                        "markdownDescription": "This allows non-recursive read access to the `$PUBLIC` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-public`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$PUBLIC` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-public-recursive`",
                        "type": "string",
                        "const": "fs:allow-public-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$PUBLIC` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-public-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$PUBLIC` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-public`",
                        "type": "string",
                        "const": "fs:allow-public-write",
                        "markdownDescription": "This allows non-recursive write access to the `$PUBLIC` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-public`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$PUBLIC` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-public-recursive`",
                        "type": "string",
                        "const": "fs:allow-public-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$PUBLIC` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-public-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$RESOURCE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-resource-index`",
                        "type": "string",
                        "const": "fs:allow-resource-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$RESOURCE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-resource-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$RESOURCE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-resource-recursive`",
                        "type": "string",
                        "const": "fs:allow-resource-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$RESOURCE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-resource-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$RESOURCE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-resource`",
                        "type": "string",
                        "const": "fs:allow-resource-read",
                        "markdownDescription": "This allows non-recursive read access to the `$RESOURCE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-resource`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$RESOURCE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-resource-recursive`",
                        "type": "string",
                        "const": "fs:allow-resource-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$RESOURCE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-resource-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$RESOURCE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-resource`",
                        "type": "string",
                        "const": "fs:allow-resource-write",
                        "markdownDescription": "This allows non-recursive write access to the `$RESOURCE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-resource`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$RESOURCE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-resource-recursive`",
                        "type": "string",
                        "const": "fs:allow-resource-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$RESOURCE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-resource-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$RUNTIME` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-runtime-index`",
                        "type": "string",
                        "const": "fs:allow-runtime-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$RUNTIME` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-runtime-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$RUNTIME` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-runtime-recursive`",
                        "type": "string",
                        "const": "fs:allow-runtime-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$RUNTIME` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-runtime-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$RUNTIME` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-runtime`",
                        "type": "string",
                        "const": "fs:allow-runtime-read",
                        "markdownDescription": "This allows non-recursive read access to the `$RUNTIME` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-runtime`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$RUNTIME` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-runtime-recursive`",
                        "type": "string",
                        "const": "fs:allow-runtime-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$RUNTIME` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-runtime-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$RUNTIME` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-runtime`",
                        "type": "string",
                        "const": "fs:allow-runtime-write",
                        "markdownDescription": "This allows non-recursive write access to the `$RUNTIME` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-runtime`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$RUNTIME` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-runtime-recursive`",
                        "type": "string",
                        "const": "fs:allow-runtime-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$RUNTIME` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-runtime-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$TEMP` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-temp-index`",
                        "type": "string",
                        "const": "fs:allow-temp-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$TEMP` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-temp-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$TEMP` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-temp-recursive`",
                        "type": "string",
                        "const": "fs:allow-temp-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$TEMP` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-temp-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$TEMP` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-temp`",
                        "type": "string",
                        "const": "fs:allow-temp-read",
                        "markdownDescription": "This allows non-recursive read access to the `$TEMP` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-temp`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$TEMP` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-temp-recursive`",
                        "type": "string",
                        "const": "fs:allow-temp-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$TEMP` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-temp-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$TEMP` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-temp`",
                        "type": "string",
                        "const": "fs:allow-temp-write",
                        "markdownDescription": "This allows non-recursive write access to the `$TEMP` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-temp`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$TEMP` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-temp-recursive`",
                        "type": "string",
                        "const": "fs:allow-temp-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$TEMP` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-temp-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$TEMPLATE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-template-index`",
                        "type": "string",
                        "const": "fs:allow-template-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$TEMPLATE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-template-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$TEMPLATE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-template-recursive`",
                        "type": "string",
                        "const": "fs:allow-template-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$TEMPLATE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-template-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$TEMPLATE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-template`",
                        "type": "string",
                        "const": "fs:allow-template-read",
                        "markdownDescription": "This allows non-recursive read access to the `$TEMPLATE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-template`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$TEMPLATE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-template-recursive`",
                        "type": "string",
                        "const": "fs:allow-template-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$TEMPLATE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-template-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$TEMPLATE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-template`",
                        "type": "string",
                        "const": "fs:allow-template-write",
                        "markdownDescription": "This allows non-recursive write access to the `$TEMPLATE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-template`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$TEMPLATE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-template-recursive`",
                        "type": "string",
                        "const": "fs:allow-template-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$TEMPLATE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-template-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$VIDEO` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-video-index`",
                        "type": "string",
                        "const": "fs:allow-video-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$VIDEO` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-video-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$VIDEO` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-video-recursive`",
                        "type": "string",
                        "const": "fs:allow-video-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$VIDEO` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-video-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$VIDEO` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-video`",
                        "type": "string",
                        "const": "fs:allow-video-read",
                        "markdownDescription": "This allows non-recursive read access to the `$VIDEO` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-video`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$VIDEO` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-video-recursive`",
                        "type": "string",
                        "const": "fs:allow-video-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$VIDEO` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-video-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$VIDEO` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-video`",
                        "type": "string",
                        "const": "fs:allow-video-write",
                        "markdownDescription": "This allows non-recursive write access to the `$VIDEO` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-video`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$VIDEO` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-video-recursive`",
                        "type": "string",
                        "const": "fs:allow-video-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$VIDEO` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-video-recursive`"
                      },
                      {
                        "description": "This denies access to dangerous Tauri relevant files and folders by default.\n#### This permission set includes:\n\n- `deny-webview-data-linux`\n- `deny-webview-data-windows`",
                        "type": "string",
                        "const": "fs:deny-default",
                        "markdownDescription": "This denies access to dangerous Tauri relevant files and folders by default.\n#### This permission set includes:\n\n- `deny-webview-data-linux`\n- `deny-webview-data-windows`"
                      },
                      {
                        "description": "Enables the copy_file command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-copy-file",
                        "markdownDescription": "Enables the copy_file command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the create command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-create",
                        "markdownDescription": "Enables the create command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the exists command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-exists",
                        "markdownDescription": "Enables the exists command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the fstat command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-fstat",
                        "markdownDescription": "Enables the fstat command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the ftruncate command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-ftruncate",
                        "markdownDescription": "Enables the ftruncate command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the lstat command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-lstat",
                        "markdownDescription": "Enables the lstat command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the mkdir command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-mkdir",
                        "markdownDescription": "Enables the mkdir command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the open command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-open",
                        "markdownDescription": "Enables the open command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the read command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-read",
                        "markdownDescription": "Enables the read command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the read_dir command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-read-dir",
                        "markdownDescription": "Enables the read_dir command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the read_file command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-read-file",
                        "markdownDescription": "Enables the read_file command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the read_text_file command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-read-text-file",
                        "markdownDescription": "Enables the read_text_file command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the read_text_file_lines command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-read-text-file-lines",
                        "markdownDescription": "Enables the read_text_file_lines command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the read_text_file_lines_next command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-read-text-file-lines-next",
                        "markdownDescription": "Enables the read_text_file_lines_next command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the remove command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-remove",
                        "markdownDescription": "Enables the remove command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the rename command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-rename",
                        "markdownDescription": "Enables the rename command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the seek command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-seek",
                        "markdownDescription": "Enables the seek command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the size command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-size",
                        "markdownDescription": "Enables the size command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the stat command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-stat",
                        "markdownDescription": "Enables the stat command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the truncate command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-truncate",
                        "markdownDescription": "Enables the truncate command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the unwatch command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-unwatch",
                        "markdownDescription": "Enables the unwatch command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the watch command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-watch",
                        "markdownDescription": "Enables the watch command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the write command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-write",
                        "markdownDescription": "Enables the write command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the write_file command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-write-file",
                        "markdownDescription": "Enables the write_file command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the write_text_file command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-write-text-file",
                        "markdownDescription": "Enables the write_text_file command without any pre-configured scope."
                      },
                      {
                        "description": "This permissions allows to create the application specific directories.\n",
                        "type": "string",
                        "const": "fs:create-app-specific-dirs",
                        "markdownDescription": "This permissions allows to create the application specific directories.\n"
                      },
                      {
                        "description": "Denies the copy_file command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-copy-file",
                        "markdownDescription": "Denies the copy_file command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the create command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-create",
                        "markdownDescription": "Denies the create command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the exists command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-exists",
                        "markdownDescription": "Denies the exists command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the fstat command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-fstat",
                        "markdownDescription": "Denies the fstat command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the ftruncate command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-ftruncate",
                        "markdownDescription": "Denies the ftruncate command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the lstat command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-lstat",
                        "markdownDescription": "Denies the lstat command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the mkdir command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-mkdir",
                        "markdownDescription": "Denies the mkdir command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the open command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-open",
                        "markdownDescription": "Denies the open command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the read command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-read",
                        "markdownDescription": "Denies the read command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the read_dir command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-read-dir",
                        "markdownDescription": "Denies the read_dir command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the read_file command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-read-file",
                        "markdownDescription": "Denies the read_file command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the read_text_file command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-read-text-file",
                        "markdownDescription": "Denies the read_text_file command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the read_text_file_lines command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-read-text-file-lines",
                        "markdownDescription": "Denies the read_text_file_lines command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the read_text_file_lines_next command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-read-text-file-lines-next",
                        "markdownDescription": "Denies the read_text_file_lines_next command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the remove command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-remove",
                        "markdownDescription": "Denies the remove command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the rename command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-rename",
                        "markdownDescription": "Denies the rename command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the seek command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-seek",
                        "markdownDescription": "Denies the seek command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the size command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-size",
                        "markdownDescription": "Denies the size command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the stat command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-stat",
                        "markdownDescription": "Denies the stat command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the truncate command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-truncate",
                        "markdownDescription": "Denies the truncate command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the unwatch command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-unwatch",
                        "markdownDescription": "Denies the unwatch command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the watch command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-watch",
                        "markdownDescription": "Denies the watch command without any pre-configured scope."
                      },
                      {
                        "description": "This denies read access to the\n`$APPLOCALDATA` folder on linux as the webview data and configuration values are stored here.\nAllowing access can lead to sensitive information disclosure and should be well considered.",
                        "type": "string",
                        "const": "fs:deny-webview-data-linux",
                        "markdownDescription": "This denies read access to the\n`$APPLOCALDATA` folder on linux as the webview data and configuration values are stored here.\nAllowing access can lead to sensitive information disclosure and should be well considered."
                      },
                      {
                        "description": "This denies read access to the\n`$APPLOCALDATA/EBWebView` folder on windows as the webview data and configuration values are stored here.\nAllowing access can lead to sensitive information disclosure and should be well considered.",
                        "type": "string",
                        "const": "fs:deny-webview-data-windows",
                        "markdownDescription": "This denies read access to the\n`$APPLOCALDATA/EBWebView` folder on windows as the webview data and configuration values are stored here.\nAllowing access can lead to sensitive information disclosure and should be well considered."
                      },
                      {
                        "description": "Denies the write command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-write",
                        "markdownDescription": "Denies the write command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the write_file command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-write-file",
                        "markdownDescription": "Denies the write_file command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the write_text_file command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-write-text-file",
                        "markdownDescription": "Denies the write_text_file command without any pre-configured scope."
                      },
                      {
                        "description": "This enables all read related commands without any pre-configured accessible paths.",
                        "type": "string",
                        "const": "fs:read-all",
                        "markdownDescription": "This enables all read related commands without any pre-configured accessible paths."
                      },
                      {
                        "description": "This permission allows recursive read functionality on the application\nspecific base directories. \n",
                        "type": "string",
                        "const": "fs:read-app-specific-dirs-recursive",
                        "markdownDescription": "This permission allows recursive read functionality on the application\nspecific base directories. \n"
                      },
                      {
                        "description": "This enables directory read and file metadata related commands without any pre-configured accessible paths.",
                        "type": "string",
                        "const": "fs:read-dirs",
                        "markdownDescription": "This enables directory read and file metadata related commands without any pre-configured accessible paths."
                      },
                      {
                        "description": "This enables file read related commands without any pre-configured accessible paths.",
                        "type": "string",
                        "const": "fs:read-files",
                        "markdownDescription": "This enables file read related commands without any pre-configured accessible paths."
                      },
                      {
                        "description": "This enables all index or metadata related commands without any pre-configured accessible paths.",
                        "type": "string",
                        "const": "fs:read-meta",
                        "markdownDescription": "This enables all index or metadata related commands without any pre-configured accessible paths."
                      },
                      {
                        "description": "An empty permission you can use to modify the global scope.",
                        "type": "string",
                        "const": "fs:scope",
                        "markdownDescription": "An empty permission you can use to modify the global scope."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the application folders.",
                        "type": "string",
                        "const": "fs:scope-app",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the application folders."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the application directories.",
                        "type": "string",
                        "const": "fs:scope-app-index",
                        "markdownDescription": "This scope permits to list all files and folders in the application directories."
                      },
                      {
                        "description": "This scope permits recursive access to the complete application folders, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-app-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete application folders, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$APPCACHE` folder.",
                        "type": "string",
                        "const": "fs:scope-appcache",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$APPCACHE` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$APPCACHE`folder.",
                        "type": "string",
                        "const": "fs:scope-appcache-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$APPCACHE`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$APPCACHE` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-appcache-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$APPCACHE` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$APPCONFIG` folder.",
                        "type": "string",
                        "const": "fs:scope-appconfig",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$APPCONFIG` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$APPCONFIG`folder.",
                        "type": "string",
                        "const": "fs:scope-appconfig-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$APPCONFIG`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$APPCONFIG` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-appconfig-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$APPCONFIG` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$APPDATA` folder.",
                        "type": "string",
                        "const": "fs:scope-appdata",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$APPDATA` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$APPDATA`folder.",
                        "type": "string",
                        "const": "fs:scope-appdata-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$APPDATA`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$APPDATA` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-appdata-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$APPDATA` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$APPLOCALDATA` folder.",
                        "type": "string",
                        "const": "fs:scope-applocaldata",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$APPLOCALDATA` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$APPLOCALDATA`folder.",
                        "type": "string",
                        "const": "fs:scope-applocaldata-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$APPLOCALDATA`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$APPLOCALDATA` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-applocaldata-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$APPLOCALDATA` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$APPLOG` folder.",
                        "type": "string",
                        "const": "fs:scope-applog",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$APPLOG` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$APPLOG`folder.",
                        "type": "string",
                        "const": "fs:scope-applog-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$APPLOG`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$APPLOG` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-applog-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$APPLOG` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$AUDIO` folder.",
                        "type": "string",
                        "const": "fs:scope-audio",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$AUDIO` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$AUDIO`folder.",
                        "type": "string",
                        "const": "fs:scope-audio-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$AUDIO`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$AUDIO` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-audio-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$AUDIO` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$CACHE` folder.",
                        "type": "string",
                        "const": "fs:scope-cache",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$CACHE` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$CACHE`folder.",
                        "type": "string",
                        "const": "fs:scope-cache-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$CACHE`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$CACHE` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-cache-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$CACHE` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$CONFIG` folder.",
                        "type": "string",
                        "const": "fs:scope-config",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$CONFIG` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$CONFIG`folder.",
                        "type": "string",
                        "const": "fs:scope-config-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$CONFIG`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$CONFIG` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-config-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$CONFIG` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$DATA` folder.",
                        "type": "string",
                        "const": "fs:scope-data",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$DATA` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$DATA`folder.",
                        "type": "string",
                        "const": "fs:scope-data-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$DATA`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$DATA` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-data-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$DATA` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$DESKTOP` folder.",
                        "type": "string",
                        "const": "fs:scope-desktop",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$DESKTOP` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$DESKTOP`folder.",
                        "type": "string",
                        "const": "fs:scope-desktop-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$DESKTOP`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$DESKTOP` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-desktop-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$DESKTOP` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$DOCUMENT` folder.",
                        "type": "string",
                        "const": "fs:scope-document",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$DOCUMENT` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$DOCUMENT`folder.",
                        "type": "string",
                        "const": "fs:scope-document-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$DOCUMENT`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$DOCUMENT` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-document-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$DOCUMENT` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$DOWNLOAD` folder.",
                        "type": "string",
                        "const": "fs:scope-download",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$DOWNLOAD` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$DOWNLOAD`folder.",
                        "type": "string",
                        "const": "fs:scope-download-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$DOWNLOAD`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$DOWNLOAD` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-download-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$DOWNLOAD` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$EXE` folder.",
                        "type": "string",
                        "const": "fs:scope-exe",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$EXE` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$EXE`folder.",
                        "type": "string",
                        "const": "fs:scope-exe-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$EXE`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$EXE` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-exe-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$EXE` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$FONT` folder.",
                        "type": "string",
                        "const": "fs:scope-font",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$FONT` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$FONT`folder.",
                        "type": "string",
                        "const": "fs:scope-font-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$FONT`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$FONT` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-font-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$FONT` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$HOME` folder.",
                        "type": "string",
                        "const": "fs:scope-home",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$HOME` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$HOME`folder.",
                        "type": "string",
                        "const": "fs:scope-home-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$HOME`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$HOME` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-home-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$HOME` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$LOCALDATA` folder.",
                        "type": "string",
                        "const": "fs:scope-localdata",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$LOCALDATA` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$LOCALDATA`folder.",
                        "type": "string",
                        "const": "fs:scope-localdata-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$LOCALDATA`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$LOCALDATA` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-localdata-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$LOCALDATA` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$LOG` folder.",
                        "type": "string",
                        "const": "fs:scope-log",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$LOG` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$LOG`folder.",
                        "type": "string",
                        "const": "fs:scope-log-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$LOG`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$LOG` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-log-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$LOG` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$PICTURE` folder.",
                        "type": "string",
                        "const": "fs:scope-picture",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$PICTURE` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$PICTURE`folder.",
                        "type": "string",
                        "const": "fs:scope-picture-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$PICTURE`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$PICTURE` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-picture-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$PICTURE` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$PUBLIC` folder.",
                        "type": "string",
                        "const": "fs:scope-public",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$PUBLIC` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$PUBLIC`folder.",
                        "type": "string",
                        "const": "fs:scope-public-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$PUBLIC`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$PUBLIC` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-public-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$PUBLIC` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$RESOURCE` folder.",
                        "type": "string",
                        "const": "fs:scope-resource",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$RESOURCE` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$RESOURCE`folder.",
                        "type": "string",
                        "const": "fs:scope-resource-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$RESOURCE`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$RESOURCE` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-resource-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$RESOURCE` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$RUNTIME` folder.",
                        "type": "string",
                        "const": "fs:scope-runtime",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$RUNTIME` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$RUNTIME`folder.",
                        "type": "string",
                        "const": "fs:scope-runtime-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$RUNTIME`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$RUNTIME` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-runtime-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$RUNTIME` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$TEMP` folder.",
                        "type": "string",
                        "const": "fs:scope-temp",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$TEMP` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$TEMP`folder.",
                        "type": "string",
                        "const": "fs:scope-temp-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$TEMP`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$TEMP` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-temp-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$TEMP` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$TEMPLATE` folder.",
                        "type": "string",
                        "const": "fs:scope-template",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$TEMPLATE` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$TEMPLATE`folder.",
                        "type": "string",
                        "const": "fs:scope-template-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$TEMPLATE`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$TEMPLATE` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-template-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$TEMPLATE` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$VIDEO` folder.",
                        "type": "string",
                        "const": "fs:scope-video",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$VIDEO` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$VIDEO`folder.",
                        "type": "string",
                        "const": "fs:scope-video-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$VIDEO`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$VIDEO` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-video-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$VIDEO` folder, including sub directories and files."
                      },
                      {
                        "description": "This enables all write related commands without any pre-configured accessible paths.",
                        "type": "string",
                        "const": "fs:write-all",
                        "markdownDescription": "This enables all write related commands without any pre-configured accessible paths."
                      },
                      {
                        "description": "This enables all file write related commands without any pre-configured accessible paths.",
                        "type": "string",
                        "const": "fs:write-files",
                        "markdownDescription": "This enables all file write related commands without any pre-configured accessible paths."
                      }
                    ]
                  }
                }
              },
              "then": {
                "properties": {
                  "allow": {
                    "items": {
                      "title": "FsScopeEntry",
                      "description": "FS scope entry.",
                      "anyOf": [
                        {
                          "description": "A path that can be accessed by the webview when using the fs APIs. FS scope path pattern.\n\nThe pattern can start with a variable that resolves to a system base directory. The variables are: `$AUDIO`, `$CACHE`, `$CONFIG`, `$DATA`, `$LOCALDATA`, `$DESKTOP`, `$DOCUMENT`, `$DOWNLOAD`, `$EXE`, `$FONT`, `$HOME`, `$PICTURE`, `$PUBLIC`, `$RUNTIME`, `$TEMPLATE`, `$VIDEO`, `$RESOURCE`, `$APP`, `$LOG`, `$TEMP`, `$APPCONFIG`, `$APPDATA`, `$APPLOCALDATA`, `$APPCACHE`, `$APPLOG`.",
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "required": [
                            "path"
                          ],
                          "properties": {
                            "path": {
                              "description": "A path that can be accessed by the webview when using the fs APIs.\n\nThe pattern can start with a variable that resolves to a system base directory. The variables are: `$AUDIO`, `$CACHE`, `$CONFIG`, `$DATA`, `$LOCALDATA`, `$DESKTOP`, `$DOCUMENT`, `$DOWNLOAD`, `$EXE`, `$FONT`, `$HOME`, `$PICTURE`, `$PUBLIC`, `$RUNTIME`, `$TEMPLATE`, `$VIDEO`, `$RESOURCE`, `$APP`, `$LOG`, `$TEMP`, `$APPCONFIG`, `$APPDATA`, `$APPLOCALDATA`, `$APPCACHE`, `$APPLOG`.",
                              "type": "string"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "deny": {
                    "items": {
                      "title": "FsScopeEntry",
                      "description": "FS scope entry.",
                      "anyOf": [
                        {
                          "description": "A path that can be accessed by the webview when using the fs APIs. FS scope path pattern.\n\nThe pattern can start with a variable that resolves to a system base directory. The variables are: `$AUDIO`, `$CACHE`, `$CONFIG`, `$DATA`, `$LOCALDATA`, `$DESKTOP`, `$DOCUMENT`, `$DOWNLOAD`, `$EXE`, `$FONT`, `$HOME`, `$PICTURE`, `$PUBLIC`, `$RUNTIME`, `$TEMPLATE`, `$VIDEO`, `$RESOURCE`, `$APP`, `$LOG`, `$TEMP`, `$APPCONFIG`, `$APPDATA`, `$APPLOCALDATA`, `$APPCACHE`, `$APPLOG`.",
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "required": [
                            "path"
                          ],
                          "properties": {
                            "path": {
                              "description": "A path that can be accessed by the webview when using the fs APIs.\n\nThe pattern can start with a variable that resolves to a system base directory. The variables are: `$AUDIO`, `$CACHE`, `$CONFIG`, `$DATA`, `$LOCALDATA`, `$DESKTOP`, `$DOCUMENT`, `$DOWNLOAD`, `$EXE`, `$FONT`, `$HOME`, `$PICTURE`, `$PUBLIC`, `$RUNTIME`, `$TEMPLATE`, `$VIDEO`, `$RESOURCE`, `$APP`, `$LOG`, `$TEMP`, `$APPCONFIG`, `$APPDATA`, `$APPLOCALDATA`, `$APPCACHE`, `$APPLOG`.",
                              "type": "string"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              "properties": {
                "identifier": {
                  "description": "Identifier of the permission or permission set.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Identifier"
                    }
                  ]
                }
              }
            },
            {
              "if": {
                "properties": {
                  "identifier": {
                    "anyOf": [
                      {
                        "description": "This permission set allows opening `mailto:`, `tel:`, `https://` and `http://` urls using their default application\nas well as reveal file in directories using default file explorer\n#### This default permission set includes:\n\n- `allow-open-url`\n- `allow-reveal-item-in-dir`\n- `allow-default-urls`",
                        "type": "string",
                        "const": "opener:default",
                        "markdownDescription": "This permission set allows opening `mailto:`, `tel:`, `https://` and `http://` urls using their default application\nas well as reveal file in directories using default file explorer\n#### This default permission set includes:\n\n- `allow-open-url`\n- `allow-reveal-item-in-dir`\n- `allow-default-urls`"
                      },
                      {
                        "description": "This enables opening `mailto:`, `tel:`, `https://` and `http://` urls using their default application.",
                        "type": "string",
                        "const": "opener:allow-default-urls",
                        "markdownDescription": "This enables opening `mailto:`, `tel:`, `https://` and `http://` urls using their default application."
                      },
                      {
                        "description": "Enables the open_path command without any pre-configured scope.",
                        "type": "string",
                        "const": "opener:allow-open-path",
                        "markdownDescription": "Enables the open_path command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the open_url command without any pre-configured scope.",
                        "type": "string",
                        "const": "opener:allow-open-url",
                        "markdownDescription": "Enables the open_url command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the reveal_item_in_dir command without any pre-configured scope.",
                        "type": "string",
                        "const": "opener:allow-reveal-item-in-dir",
                        "markdownDescription": "Enables the reveal_item_in_dir command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the open_path command without any pre-configured scope.",
                        "type": "string",
                        "const": "opener:deny-open-path",
                        "markdownDescription": "Denies the open_path command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the open_url command without any pre-configured scope.",
                        "type": "string",
                        "const": "opener:deny-open-url",
                        "markdownDescription": "Denies the open_url command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the reveal_item_in_dir command without any pre-configured scope.",
                        "type": "string",
                        "const": "opener:deny-reveal-item-in-dir",
                        "markdownDescription": "Denies the reveal_item_in_dir command without any pre-configured scope."
                      }
                    ]
                  }
                }
              },
              "then": {
                "properties": {
                  "allow": {
                    "items": {
                      "title": "OpenerScopeEntry",
                      "description": "Opener scope entry.",
                      "anyOf": [
                        {
                          "type": "object",
                          "required": [
                            "url"
                          ],
                          "properties": {
                            "app": {
                              "description": "An application to open this url with, for example: firefox.",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/Application"
                                }
                              ]
                            },
                            "url": {
                              "description": "A URL that can be opened by the webview when using the Opener APIs.\n\nWildcards can be used following the UNIX glob pattern.\n\nExamples:\n\n- \"https://*\" : allows all HTTPS origin\n\n- \"https://*.github.com/tauri-apps/tauri\": allows any subdomain of \"github.com\" with the \"tauri-apps/api\" path\n\n- \"https://myapi.service.com/users/*\": allows access to any URLs that begins with \"https://myapi.service.com/users/\"",
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": [
                            "path"
                          ],
                          "properties": {
                            "app": {
                              "description": "An application to open this path with, for example: xdg-open.",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/Application"
                                }
                              ]
                            },
                            "path": {
                              "description": "A path that can be opened by the webview when using the Opener APIs.\n\nThe pattern can start with a variable that resolves to a system base directory. The variables are: `$AUDIO`, `$CACHE`, `$CONFIG`, `$DATA`, `$LOCALDATA`, `$DESKTOP`, `$DOCUMENT`, `$DOWNLOAD`, `$EXE`, `$FONT`, `$HOME`, `$PICTURE`, `$PUBLIC`, `$RUNTIME`, `$TEMPLATE`, `$VIDEO`, `$RESOURCE`, `$APP`, `$LOG`, `$TEMP`, `$APPCONFIG`, `$APPDATA`, `$APPLOCALDATA`, `$APPCACHE`, `$APPLOG`.",
                              "type": "string"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "deny": {
                    "items": {
                      "title": "OpenerScopeEntry",
                      "description": "Opener scope entry.",
                      "anyOf": [
                        {
                          "type": "object",
                          "required": [
                            "url"
                          ],
                          "properties": {
                            "app": {
                              "description": "An application to open this url with, for example: firefox.",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/Application"
                                }
                              ]
                            },
                            "url": {
                              "description": "A URL that can be opened by the webview when using the Opener APIs.\n\nWildcards can be used following the UNIX glob pattern.\n\nExamples:\n\n- \"https://*\" : allows all HTTPS origin\n\n- \"https://*.github.com/tauri-apps/tauri\": allows any subdomain of \"github.com\" with the \"tauri-apps/api\" path\n\n- \"https://myapi.service.com/users/*\": allows access to any URLs that begins with \"https://myapi.service.com/users/\"",
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": [
                            "path"
                          ],
                          "properties": {
                            "app": {
                              "description": "An application to open this path with, for example: xdg-open.",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/Application"
                                }
                              ]
                            },
                            "path": {
                              "description": "A path that can be opened by the webview when using the Opener APIs.\n\nThe pattern can start with a variable that resolves to a system base directory. The variables are: `$AUDIO`, `$CACHE`, `$CONFIG`, `$DATA`, `$LOCALDATA`, `$DESKTOP`, `$DOCUMENT`, `$DOWNLOAD`, `$EXE`, `$FONT`, `$HOME`, `$PICTURE`, `$PUBLIC`, `$RUNTIME`, `$TEMPLATE`, `$VIDEO`, `$RESOURCE`, `$APP`, `$LOG`, `$TEMP`, `$APPCONFIG`, `$APPDATA`, `$APPLOCALDATA`, `$APPCACHE`, `$APPLOG`.",
                              "type": "string"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              "properties": {
                "identifier": {
                  "description": "Identifier of the permission or permission set.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Identifier"
                    }
                  ]
                }
              }
            },
            {
              "if": {
                "properties": {
                  "identifier": {
                    "anyOf": [
                      {
                        "description": "This permission set configures which\nshell functionality is exposed by default.\n\n#### Granted Permissions\n\nIt allows to use the `open` functionality with a reasonable\nscope pre-configured. It will allow opening `http(s)://`,\n`tel:` and `mailto:` links.\n\n#### This default permission set includes:\n\n- `allow-open`",
                        "type": "string",
                        "const": "shell:default",
                        "markdownDescription": "This permission set configures which\nshell functionality is exposed by default.\n\n#### Granted Permissions\n\nIt allows to use the `open` functionality with a reasonable\nscope pre-configured. It will allow opening `http(s)://`,\n`tel:` and `mailto:` links.\n\n#### This default permission set includes:\n\n- `allow-open`"
                      },
                      {
                        "description": "Enables the execute command without any pre-configured scope.",
                        "type": "string",
                        "const": "shell:allow-execute",
                        "markdownDescription": "Enables the execute command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the kill command without any pre-configured scope.",
                        "type": "string",
                        "const": "shell:allow-kill",
                        "markdownDescription": "Enables the kill command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the open command without any pre-configured scope.",
                        "type": "string",
                        "const": "shell:allow-open",
                        "markdownDescription": "Enables the open command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the spawn command without any pre-configured scope.",
                        "type": "string",
                        "const": "shell:allow-spawn",
                        "markdownDescription": "Enables the spawn command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the stdin_write command without any pre-configured scope.",
                        "type": "string",
                        "const": "shell:allow-stdin-write",
                        "markdownDescription": "Enables the stdin_write command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the execute command without any pre-configured scope.",
                        "type": "string",
                        "const": "shell:deny-execute",
                        "markdownDescription": "Denies the execute command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the kill command without any pre-configured scope.",
                        "type": "string",
                        "const": "shell:deny-kill",
                        "markdownDescription": "Denies the kill command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the open command without any pre-configured scope.",
                        "type": "string",
                        "const": "shell:deny-open",
                        "markdownDescription": "Denies the open command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the spawn command without any pre-configured scope.",
                        "type": "string",
                        "const": "shell:deny-spawn",
                        "markdownDescription": "Denies the spawn command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the stdin_write command without any pre-configured scope.",
                        "type": "string",
                        "const": "shell:deny-stdin-write",
                        "markdownDescription": "Denies the stdin_write command without any pre-configured scope."
                      }
                    ]
                  }
                }
              },
              "then": {
                "properties": {
                  "allow": {
                    "items": {
                      "title": "ShellScopeEntry",
                      "description": "Shell scope entry.",
                      "anyOf": [
                        {
                          "type": "object",
                          "required": [
                            "cmd",
                            "name"
                          ],
                          "properties": {
                            "args": {
                              "description": "The allowed arguments for the command execution.",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/ShellScopeEntryAllowedArgs"
                                }
                              ]
                            },
                            "cmd": {
                              "description": "The command name. It can start with a variable that resolves to a system base directory. The variables are: `$AUDIO`, `$CACHE`, `$CONFIG`, `$DATA`, `$LOCALDATA`, `$DESKTOP`, `$DOCUMENT`, `$DOWNLOAD`, `$EXE`, `$FONT`, `$HOME`, `$PICTURE`, `$PUBLIC`, `$RUNTIME`, `$TEMPLATE`, `$VIDEO`, `$RESOURCE`, `$LOG`, `$TEMP`, `$APPCONFIG`, `$APPDATA`, `$APPLOCALDATA`, `$APPCACHE`, `$APPLOG`.",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name for this allowed shell command configuration.\n\nThis name will be used inside of the webview API to call this command along with any specified arguments.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "required": [
                            "name",
                            "sidecar"
                          ],
                          "properties": {
                            "args": {
                              "description": "The allowed arguments for the command execution.",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/ShellScopeEntryAllowedArgs"
                                }
                              ]
                            },
                            "name": {
                              "description": "The name for this allowed shell command configuration.\n\nThis name will be used inside of the webview API to call this command along with any specified arguments.",
                              "type": "string"
                            },
                            "sidecar": {
                              "description": "If this command is a sidecar command.",
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        }
                      ]
                    }
                  },
                  "deny": {
                    "items": {
                      "title": "ShellScopeEntry",
                      "description": "Shell scope entry.",
                      "anyOf": [
                        {
                          "type": "object",
                          "required": [
                            "cmd",
                            "name"
                          ],
                          "properties": {
                            "args": {
                              "description": "The allowed arguments for the command execution.",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/ShellScopeEntryAllowedArgs"
                                }
                              ]
                            },
                            "cmd": {
                              "description": "The command name. It can start with a variable that resolves to a system base directory. The variables are: `$AUDIO`, `$CACHE`, `$CONFIG`, `$DATA`, `$LOCALDATA`, `$DESKTOP`, `$DOCUMENT`, `$DOWNLOAD`, `$EXE`, `$FONT`, `$HOME`, `$PICTURE`, `$PUBLIC`, `$RUNTIME`, `$TEMPLATE`, `$VIDEO`, `$RESOURCE`, `$LOG`, `$TEMP`, `$APPCONFIG`, `$APPDATA`, `$APPLOCALDATA`, `$APPCACHE`, `$APPLOG`.",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name for this allowed shell command configuration.\n\nThis name will be used inside of the webview API to call this command along with any specified arguments.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "required": [
                            "name",
                            "sidecar"
                          ],
                          "properties": {
                            "args": {
                              "description": "The allowed arguments for the command execution.",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/ShellScopeEntryAllowedArgs"
                                }
                              ]
                            },
                            "name": {
                              "description": "The name for this allowed shell command configuration.\n\nThis name will be used inside of the webview API to call this command along with any specified arguments.",
                              "type": "string"
                            },
                            "sidecar": {
                              "description": "If this command is a sidecar command.",
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        }
                      ]
                    }
                  }
                }
              },
              "properties": {
                "identifier": {
                  "description": "Identifier of the permission or permission set.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Identifier"
                    }
                  ]
                }
              }
            },
            {
              "properties": {
                "identifier": {
                  "description": "Identifier of the permission or permission set.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Identifier"
                    }
                  ]
                },
                "allow": {
                  "description": "Data that defines what is allowed by the scope.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "$ref": "#/definitions/Value"
                  }
                },
                "deny": {
                  "description": "Data that defines what is denied by the scope. This should be prioritized by validation logic.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "$ref": "#/definitions/Value"
                  }
                }
              }
            }
          ],
          "required": [
            "identifier"
          ]
        }
      ]
    },
    "Identifier": {
      "description": "Permission identifier",
      "oneOf": [
        {
          "description": "Default core plugins set.\n#### This default permission set includes:\n\n- `core:path:default`\n- `core:event:default`\n- `core:window:default`\n- `core:webview:default`\n- `core:app:default`\n- `core:image:default`\n- `core:resources:default`\n- `core:menu:default`\n- `core:tray:default`",
          "type": "string",
          "const": "core:default",
          "markdownDescription": "Default core plugins set.\n#### This default permission set includes:\n\n- `core:path:default`\n- `core:event:default`\n- `core:window:default`\n- `core:webview:default`\n- `core:app:default`\n- `core:image:default`\n- `core:resources:default`\n- `core:menu:default`\n- `core:tray:default`"
        },
        {
          "description": "Default permissions for the plugin.\n#### This default permission set includes:\n\n- `allow-version`\n- `allow-name`\n- `allow-tauri-version`\n- `allow-identifier`",
          "type": "string",
          "const": "core:app:default",
          "markdownDescription": "Default permissions for the plugin.\n#### This default permission set includes:\n\n- `allow-version`\n- `allow-name`\n- `allow-tauri-version`\n- `allow-identifier`"
        },
        {
          "description": "Enables the app_hide command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-app-hide",
          "markdownDescription": "Enables the app_hide command without any pre-configured scope."
        },
        {
          "description": "Enables the app_show command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-app-show",
          "markdownDescription": "Enables the app_show command without any pre-configured scope."
        },
        {
          "description": "Enables the default_window_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-default-window-icon",
          "markdownDescription": "Enables the default_window_icon command without any pre-configured scope."
        },
        {
          "description": "Enables the fetch_data_store_identifiers command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-fetch-data-store-identifiers",
          "markdownDescription": "Enables the fetch_data_store_identifiers command without any pre-configured scope."
        },
        {
          "description": "Enables the identifier command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-identifier",
          "markdownDescription": "Enables the identifier command without any pre-configured scope."
        },
        {
          "description": "Enables the name command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-name",
          "markdownDescription": "Enables the name command without any pre-configured scope."
        },
        {
          "description": "Enables the remove_data_store command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-remove-data-store",
          "markdownDescription": "Enables the remove_data_store command without any pre-configured scope."
        },
        {
          "description": "Enables the set_app_theme command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-set-app-theme",
          "markdownDescription": "Enables the set_app_theme command without any pre-configured scope."
        },
        {
          "description": "Enables the set_dock_visibility command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-set-dock-visibility",
          "markdownDescription": "Enables the set_dock_visibility command without any pre-configured scope."
        },
        {
          "description": "Enables the tauri_version command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-tauri-version",
          "markdownDescription": "Enables the tauri_version command without any pre-configured scope."
        },
        {
          "description": "Enables the version command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-version",
          "markdownDescription": "Enables the version command without any pre-configured scope."
        },
        {
          "description": "Denies the app_hide command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-app-hide",
          "markdownDescription": "Denies the app_hide command without any pre-configured scope."
        },
        {
          "description": "Denies the app_show command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-app-show",
          "markdownDescription": "Denies the app_show command without any pre-configured scope."
        },
        {
          "description": "Denies the default_window_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-default-window-icon",
          "markdownDescription": "Denies the default_window_icon command without any pre-configured scope."
        },
        {
          "description": "Denies the fetch_data_store_identifiers command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-fetch-data-store-identifiers",
          "markdownDescription": "Denies the fetch_data_store_identifiers command without any pre-configured scope."
        },
        {
          "description": "Denies the identifier command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-identifier",
          "markdownDescription": "Denies the identifier command without any pre-configured scope."
        },
        {
          "description": "Denies the name command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-name",
          "markdownDescription": "Denies the name command without any pre-configured scope."
        },
        {
          "description": "Denies the remove_data_store command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-remove-data-store",
          "markdownDescription": "Denies the remove_data_store command without any pre-configured scope."
        },
        {
          "description": "Denies the set_app_theme command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-set-app-theme",
          "markdownDescription": "Denies the set_app_theme command without any pre-configured scope."
        },
        {
          "description": "Denies the set_dock_visibility command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-set-dock-visibility",
          "markdownDescription": "Denies the set_dock_visibility command without any pre-configured scope."
        },
        {
          "description": "Denies the tauri_version command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-tauri-version",
          "markdownDescription": "Denies the tauri_version command without any pre-configured scope."
        },
        {
          "description": "Denies the version command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-version",
          "markdownDescription": "Denies the version command without any pre-configured scope."
        },
        {
          "description": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-listen`\n- `allow-unlisten`\n- `allow-emit`\n- `allow-emit-to`",
          "type": "string",
          "const": "core:event:default",
          "markdownDescription": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-listen`\n- `allow-unlisten`\n- `allow-emit`\n- `allow-emit-to`"
        },
        {
          "description": "Enables the emit command without any pre-configured scope.",
          "type": "string",
          "const": "core:event:allow-emit",
          "markdownDescription": "Enables the emit command without any pre-configured scope."
        },
        {
          "description": "Enables the emit_to command without any pre-configured scope.",
          "type": "string",
          "const": "core:event:allow-emit-to",
          "markdownDescription": "Enables the emit_to command without any pre-configured scope."
        },
        {
          "description": "Enables the listen command without any pre-configured scope.",
          "type": "string",
          "const": "core:event:allow-listen",
          "markdownDescription": "Enables the listen command without any pre-configured scope."
        },
        {
          "description": "Enables the unlisten command without any pre-configured scope.",
          "type": "string",
          "const": "core:event:allow-unlisten",
          "markdownDescription": "Enables the unlisten command without any pre-configured scope."
        },
        {
          "description": "Denies the emit command without any pre-configured scope.",
          "type": "string",
          "const": "core:event:deny-emit",
          "markdownDescription": "Denies the emit command without any pre-configured scope."
        },
        {
          "description": "Denies the emit_to command without any pre-configured scope.",
          "type": "string",
          "const": "core:event:deny-emit-to",
          "markdownDescription": "Denies the emit_to command without any pre-configured scope."
        },
        {
          "description": "Denies the listen command without any pre-configured scope.",
          "type": "string",
          "const": "core:event:deny-listen",
          "markdownDescription": "Denies the listen command without any pre-configured scope."
        },
        {
          "description": "Denies the unlisten command without any pre-configured scope.",
          "type": "string",
          "const": "core:event:deny-unlisten",
          "markdownDescription": "Denies the unlisten command without any pre-configured scope."
        },
        {
          "description": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-new`\n- `allow-from-bytes`\n- `allow-from-path`\n- `allow-rgba`\n- `allow-size`",
          "type": "string",
          "const": "core:image:default",
          "markdownDescription": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-new`\n- `allow-from-bytes`\n- `allow-from-path`\n- `allow-rgba`\n- `allow-size`"
        },
        {
          "description": "Enables the from_bytes command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:allow-from-bytes",
          "markdownDescription": "Enables the from_bytes command without any pre-configured scope."
        },
        {
          "description": "Enables the from_path command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:allow-from-path",
          "markdownDescription": "Enables the from_path command without any pre-configured scope."
        },
        {
          "description": "Enables the new command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:allow-new",
          "markdownDescription": "Enables the new command without any pre-configured scope."
        },
        {
          "description": "Enables the rgba command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:allow-rgba",
          "markdownDescription": "Enables the rgba command without any pre-configured scope."
        },
        {
          "description": "Enables the size command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:allow-size",
          "markdownDescription": "Enables the size command without any pre-configured scope."
        },
        {
          "description": "Denies the from_bytes command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:deny-from-bytes",
          "markdownDescription": "Denies the from_bytes command without any pre-configured scope."
        },
        {
          "description": "Denies the from_path command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:deny-from-path",
          "markdownDescription": "Denies the from_path command without any pre-configured scope."
        },
        {
          "description": "Denies the new command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:deny-new",
          "markdownDescription": "Denies the new command without any pre-configured scope."
        },
        {
          "description": "Denies the rgba command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:deny-rgba",
          "markdownDescription": "Denies the rgba command without any pre-configured scope."
        },
        {
          "description": "Denies the size command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:deny-size",
          "markdownDescription": "Denies the size command without any pre-configured scope."
        },
        {
          "description": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-new`\n- `allow-append`\n- `allow-prepend`\n- `allow-insert`\n- `allow-remove`\n- `allow-remove-at`\n- `allow-items`\n- `allow-get`\n- `allow-popup`\n- `allow-create-default`\n- `allow-set-as-app-menu`\n- `allow-set-as-window-menu`\n- `allow-text`\n- `allow-set-text`\n- `allow-is-enabled`\n- `allow-set-enabled`\n- `allow-set-accelerator`\n- `allow-set-as-windows-menu-for-nsapp`\n- `allow-set-as-help-menu-for-nsapp`\n- `allow-is-checked`\n- `allow-set-checked`\n- `allow-set-icon`",
          "type": "string",
          "const": "core:menu:default",
          "markdownDescription": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-new`\n- `allow-append`\n- `allow-prepend`\n- `allow-insert`\n- `allow-remove`\n- `allow-remove-at`\n- `allow-items`\n- `allow-get`\n- `allow-popup`\n- `allow-create-default`\n- `allow-set-as-app-menu`\n- `allow-set-as-window-menu`\n- `allow-text`\n- `allow-set-text`\n- `allow-is-enabled`\n- `allow-set-enabled`\n- `allow-set-accelerator`\n- `allow-set-as-windows-menu-for-nsapp`\n- `allow-set-as-help-menu-for-nsapp`\n- `allow-is-checked`\n- `allow-set-checked`\n- `allow-set-icon`"
        },
        {
          "description": "Enables the append command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-append",
          "markdownDescription": "Enables the append command without any pre-configured scope."
        },
        {
          "description": "Enables the create_default command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-create-default",
          "markdownDescription": "Enables the create_default command without any pre-configured scope."
        },
        {
          "description": "Enables the get command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-get",
          "markdownDescription": "Enables the get command without any pre-configured scope."
        },
        {
          "description": "Enables the insert command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-insert",
          "markdownDescription": "Enables the insert command without any pre-configured scope."
        },
        {
          "description": "Enables the is_checked command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-is-checked",
          "markdownDescription": "Enables the is_checked command without any pre-configured scope."
        },
        {
          "description": "Enables the is_enabled command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-is-enabled",
          "markdownDescription": "Enables the is_enabled command without any pre-configured scope."
        },
        {
          "description": "Enables the items command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-items",
          "markdownDescription": "Enables the items command without any pre-configured scope."
        },
        {
          "description": "Enables the new command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-new",
          "markdownDescription": "Enables the new command without any pre-configured scope."
        },
        {
          "description": "Enables the popup command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-popup",
          "markdownDescription": "Enables the popup command without any pre-configured scope."
        },
        {
          "description": "Enables the prepend command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-prepend",
          "markdownDescription": "Enables the prepend command without any pre-configured scope."
        },
        {
          "description": "Enables the remove command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-remove",
          "markdownDescription": "Enables the remove command without any pre-configured scope."
        },
        {
          "description": "Enables the remove_at command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-remove-at",
          "markdownDescription": "Enables the remove_at command without any pre-configured scope."
        },
        {
          "description": "Enables the set_accelerator command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-set-accelerator",
          "markdownDescription": "Enables the set_accelerator command without any pre-configured scope."
        },
        {
          "description": "Enables the set_as_app_menu command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-set-as-app-menu",
          "markdownDescription": "Enables the set_as_app_menu command without any pre-configured scope."
        },
        {
          "description": "Enables the set_as_help_menu_for_nsapp command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-set-as-help-menu-for-nsapp",
          "markdownDescription": "Enables the set_as_help_menu_for_nsapp command without any pre-configured scope."
        },
        {
          "description": "Enables the set_as_window_menu command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-set-as-window-menu",
          "markdownDescription": "Enables the set_as_window_menu command without any pre-configured scope."
        },
        {
          "description": "Enables the set_as_windows_menu_for_nsapp command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-set-as-windows-menu-for-nsapp",
          "markdownDescription": "Enables the set_as_windows_menu_for_nsapp command without any pre-configured scope."
        },
        {
          "description": "Enables the set_checked command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-set-checked",
          "markdownDescription": "Enables the set_checked command without any pre-configured scope."
        },
        {
          "description": "Enables the set_enabled command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-set-enabled",
          "markdownDescription": "Enables the set_enabled command without any pre-configured scope."
        },
        {
          "description": "Enables the set_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-set-icon",
          "markdownDescription": "Enables the set_icon command without any pre-configured scope."
        },
        {
          "description": "Enables the set_text command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-set-text",
          "markdownDescription": "Enables the set_text command without any pre-configured scope."
        },
        {
          "description": "Enables the text command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-text",
          "markdownDescription": "Enables the text command without any pre-configured scope."
        },
        {
          "description": "Denies the append command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-append",
          "markdownDescription": "Denies the append command without any pre-configured scope."
        },
        {
          "description": "Denies the create_default command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-create-default",
          "markdownDescription": "Denies the create_default command without any pre-configured scope."
        },
        {
          "description": "Denies the get command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-get",
          "markdownDescription": "Denies the get command without any pre-configured scope."
        },
        {
          "description": "Denies the insert command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-insert",
          "markdownDescription": "Denies the insert command without any pre-configured scope."
        },
        {
          "description": "Denies the is_checked command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-is-checked",
          "markdownDescription": "Denies the is_checked command without any pre-configured scope."
        },
        {
          "description": "Denies the is_enabled command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-is-enabled",
          "markdownDescription": "Denies the is_enabled command without any pre-configured scope."
        },
        {
          "description": "Denies the items command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-items",
          "markdownDescription": "Denies the items command without any pre-configured scope."
        },
        {
          "description": "Denies the new command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-new",
          "markdownDescription": "Denies the new command without any pre-configured scope."
        },
        {
          "description": "Denies the popup command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-popup",
          "markdownDescription": "Denies the popup command without any pre-configured scope."
        },
        {
          "description": "Denies the prepend command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-prepend",
          "markdownDescription": "Denies the prepend command without any pre-configured scope."
        },
        {
          "description": "Denies the remove command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-remove",
          "markdownDescription": "Denies the remove command without any pre-configured scope."
        },
        {
          "description": "Denies the remove_at command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-remove-at",
          "markdownDescription": "Denies the remove_at command without any pre-configured scope."
        },
        {
          "description": "Denies the set_accelerator command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-set-accelerator",
          "markdownDescription": "Denies the set_accelerator command without any pre-configured scope."
        },
        {
          "description": "Denies the set_as_app_menu command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-set-as-app-menu",
          "markdownDescription": "Denies the set_as_app_menu command without any pre-configured scope."
        },
        {
          "description": "Denies the set_as_help_menu_for_nsapp command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-set-as-help-menu-for-nsapp",
          "markdownDescription": "Denies the set_as_help_menu_for_nsapp command without any pre-configured scope."
        },
        {
          "description": "Denies the set_as_window_menu command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-set-as-window-menu",
          "markdownDescription": "Denies the set_as_window_menu command without any pre-configured scope."
        },
        {
          "description": "Denies the set_as_windows_menu_for_nsapp command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-set-as-windows-menu-for-nsapp",
          "markdownDescription": "Denies the set_as_windows_menu_for_nsapp command without any pre-configured scope."
        },
        {
          "description": "Denies the set_checked command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-set-checked",
          "markdownDescription": "Denies the set_checked command without any pre-configured scope."
        },
        {
          "description": "Denies the set_enabled command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-set-enabled",
          "markdownDescription": "Denies the set_enabled command without any pre-configured scope."
        },
        {
          "description": "Denies the set_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-set-icon",
          "markdownDescription": "Denies the set_icon command without any pre-configured scope."
        },
        {
          "description": "Denies the set_text command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-set-text",
          "markdownDescription": "Denies the set_text command without any pre-configured scope."
        },
        {
          "description": "Denies the text command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-text",
          "markdownDescription": "Denies the text command without any pre-configured scope."
        },
        {
          "description": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-resolve-directory`\n- `allow-resolve`\n- `allow-normalize`\n- `allow-join`\n- `allow-dirname`\n- `allow-extname`\n- `allow-basename`\n- `allow-is-absolute`",
          "type": "string",
          "const": "core:path:default",
          "markdownDescription": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-resolve-directory`\n- `allow-resolve`\n- `allow-normalize`\n- `allow-join`\n- `allow-dirname`\n- `allow-extname`\n- `allow-basename`\n- `allow-is-absolute`"
        },
        {
          "description": "Enables the basename command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:allow-basename",
          "markdownDescription": "Enables the basename command without any pre-configured scope."
        },
        {
          "description": "Enables the dirname command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:allow-dirname",
          "markdownDescription": "Enables the dirname command without any pre-configured scope."
        },
        {
          "description": "Enables the extname command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:allow-extname",
          "markdownDescription": "Enables the extname command without any pre-configured scope."
        },
        {
          "description": "Enables the is_absolute command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:allow-is-absolute",
          "markdownDescription": "Enables the is_absolute command without any pre-configured scope."
        },
        {
          "description": "Enables the join command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:allow-join",
          "markdownDescription": "Enables the join command without any pre-configured scope."
        },
        {
          "description": "Enables the normalize command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:allow-normalize",
          "markdownDescription": "Enables the normalize command without any pre-configured scope."
        },
        {
          "description": "Enables the resolve command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:allow-resolve",
          "markdownDescription": "Enables the resolve command without any pre-configured scope."
        },
        {
          "description": "Enables the resolve_directory command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:allow-resolve-directory",
          "markdownDescription": "Enables the resolve_directory command without any pre-configured scope."
        },
        {
          "description": "Denies the basename command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:deny-basename",
          "markdownDescription": "Denies the basename command without any pre-configured scope."
        },
        {
          "description": "Denies the dirname command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:deny-dirname",
          "markdownDescription": "Denies the dirname command without any pre-configured scope."
        },
        {
          "description": "Denies the extname command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:deny-extname",
          "markdownDescription": "Denies the extname command without any pre-configured scope."
        },
        {
          "description": "Denies the is_absolute command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:deny-is-absolute",
          "markdownDescription": "Denies the is_absolute command without any pre-configured scope."
        },
        {
          "description": "Denies the join command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:deny-join",
          "markdownDescription": "Denies the join command without any pre-configured scope."
        },
        {
          "description": "Denies the normalize command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:deny-normalize",
          "markdownDescription": "Denies the normalize command without any pre-configured scope."
        },
        {
          "description": "Denies the resolve command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:deny-resolve",
          "markdownDescription": "Denies the resolve command without any pre-configured scope."
        },
        {
          "description": "Denies the resolve_directory command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:deny-resolve-directory",
          "markdownDescription": "Denies the resolve_directory command without any pre-configured scope."
        },
        {
          "description": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-close`",
          "type": "string",
          "const": "core:resources:default",
          "markdownDescription": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-close`"
        },
        {
          "description": "Enables the close command without any pre-configured scope.",
          "type": "string",
          "const": "core:resources:allow-close",
          "markdownDescription": "Enables the close command without any pre-configured scope."
        },
        {
          "description": "Denies the close command without any pre-configured scope.",
          "type": "string",
          "const": "core:resources:deny-close",
          "markdownDescription": "Denies the close command without any pre-configured scope."
        },
        {
          "description": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-new`\n- `allow-get-by-id`\n- `allow-remove-by-id`\n- `allow-set-icon`\n- `allow-set-menu`\n- `allow-set-tooltip`\n- `allow-set-title`\n- `allow-set-visible`\n- `allow-set-temp-dir-path`\n- `allow-set-icon-as-template`\n- `allow-set-show-menu-on-left-click`",
          "type": "string",
          "const": "core:tray:default",
          "markdownDescription": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-new`\n- `allow-get-by-id`\n- `allow-remove-by-id`\n- `allow-set-icon`\n- `allow-set-menu`\n- `allow-set-tooltip`\n- `allow-set-title`\n- `allow-set-visible`\n- `allow-set-temp-dir-path`\n- `allow-set-icon-as-template`\n- `allow-set-show-menu-on-left-click`"
        },
        {
          "description": "Enables the get_by_id command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-get-by-id",
          "markdownDescription": "Enables the get_by_id command without any pre-configured scope."
        },
        {
          "description": "Enables the new command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-new",
          "markdownDescription": "Enables the new command without any pre-configured scope."
        },
        {
          "description": "Enables the remove_by_id command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-remove-by-id",
          "markdownDescription": "Enables the remove_by_id command without any pre-configured scope."
        },
        {
          "description": "Enables the set_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-set-icon",
          "markdownDescription": "Enables the set_icon command without any pre-configured scope."
        },
        {
          "description": "Enables the set_icon_as_template command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-set-icon-as-template",
          "markdownDescription": "Enables the set_icon_as_template command without any pre-configured scope."
        },
        {
          "description": "Enables the set_menu command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-set-menu",
          "markdownDescription": "Enables the set_menu command without any pre-configured scope."
        },
        {
          "description": "Enables the set_show_menu_on_left_click command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-set-show-menu-on-left-click",
          "markdownDescription": "Enables the set_show_menu_on_left_click command without any pre-configured scope."
        },
        {
          "description": "Enables the set_temp_dir_path command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-set-temp-dir-path",
          "markdownDescription": "Enables the set_temp_dir_path command without any pre-configured scope."
        },
        {
          "description": "Enables the set_title command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-set-title",
          "markdownDescription": "Enables the set_title command without any pre-configured scope."
        },
        {
          "description": "Enables the set_tooltip command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-set-tooltip",
          "markdownDescription": "Enables the set_tooltip command without any pre-configured scope."
        },
        {
          "description": "Enables the set_visible command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-set-visible",
          "markdownDescription": "Enables the set_visible command without any pre-configured scope."
        },
        {
          "description": "Denies the get_by_id command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-get-by-id",
          "markdownDescription": "Denies the get_by_id command without any pre-configured scope."
        },
        {
          "description": "Denies the new command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-new",
          "markdownDescription": "Denies the new command without any pre-configured scope."
        },
        {
          "description": "Denies the remove_by_id command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-remove-by-id",
          "markdownDescription": "Denies the remove_by_id command without any pre-configured scope."
        },
        {
          "description": "Denies the set_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-set-icon",
          "markdownDescription": "Denies the set_icon command without any pre-configured scope."
        },
        {
          "description": "Denies the set_icon_as_template command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-set-icon-as-template",
          "markdownDescription": "Denies the set_icon_as_template command without any pre-configured scope."
        },
        {
          "description": "Denies the set_menu command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-set-menu",
          "markdownDescription": "Denies the set_menu command without any pre-configured scope."
        },
        {
          "description": "Denies the set_show_menu_on_left_click command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-set-show-menu-on-left-click",
          "markdownDescription": "Denies the set_show_menu_on_left_click command without any pre-configured scope."
        },
        {
          "description": "Denies the set_temp_dir_path command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-set-temp-dir-path",
          "markdownDescription": "Denies the set_temp_dir_path command without any pre-configured scope."
        },
        {
          "description": "Denies the set_title command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-set-title",
          "markdownDescription": "Denies the set_title command without any pre-configured scope."
        },
        {
          "description": "Denies the set_tooltip command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-set-tooltip",
          "markdownDescription": "Denies the set_tooltip command without any pre-configured scope."
        },
        {
          "description": "Denies the set_visible command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-set-visible",
          "markdownDescription": "Denies the set_visible command without any pre-configured scope."
        },
        {
          "description": "Default permissions for the plugin.\n#### This default permission set includes:\n\n- `allow-get-all-webviews`\n- `allow-webview-position`\n- `allow-webview-size`\n- `allow-internal-toggle-devtools`",
          "type": "string",
          "const": "core:webview:default",
          "markdownDescription": "Default permissions for the plugin.\n#### This default permission set includes:\n\n- `allow-get-all-webviews`\n- `allow-webview-position`\n- `allow-webview-size`\n- `allow-internal-toggle-devtools`"
        },
        {
          "description": "Enables the clear_all_browsing_data command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-clear-all-browsing-data",
          "markdownDescription": "Enables the clear_all_browsing_data command without any pre-configured scope."
        },
        {
          "description": "Enables the create_webview command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-create-webview",
          "markdownDescription": "Enables the create_webview command without any pre-configured scope."
        },
        {
          "description": "Enables the create_webview_window command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-create-webview-window",
          "markdownDescription": "Enables the create_webview_window command without any pre-configured scope."
        },
        {
          "description": "Enables the get_all_webviews command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-get-all-webviews",
          "markdownDescription": "Enables the get_all_webviews command without any pre-configured scope."
        },
        {
          "description": "Enables the internal_toggle_devtools command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-internal-toggle-devtools",
          "markdownDescription": "Enables the internal_toggle_devtools command without any pre-configured scope."
        },
        {
          "description": "Enables the print command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-print",
          "markdownDescription": "Enables the print command without any pre-configured scope."
        },
        {
          "description": "Enables the reparent command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-reparent",
          "markdownDescription": "Enables the reparent command without any pre-configured scope."
        },
        {
          "description": "Enables the set_webview_background_color command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-set-webview-background-color",
          "markdownDescription": "Enables the set_webview_background_color command without any pre-configured scope."
        },
        {
          "description": "Enables the set_webview_focus command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-set-webview-focus",
          "markdownDescription": "Enables the set_webview_focus command without any pre-configured scope."
        },
        {
          "description": "Enables the set_webview_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-set-webview-position",
          "markdownDescription": "Enables the set_webview_position command without any pre-configured scope."
        },
        {
          "description": "Enables the set_webview_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-set-webview-size",
          "markdownDescription": "Enables the set_webview_size command without any pre-configured scope."
        },
        {
          "description": "Enables the set_webview_zoom command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-set-webview-zoom",
          "markdownDescription": "Enables the set_webview_zoom command without any pre-configured scope."
        },
        {
          "description": "Enables the webview_close command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-webview-close",
          "markdownDescription": "Enables the webview_close command without any pre-configured scope."
        },
        {
          "description": "Enables the webview_hide command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-webview-hide",
          "markdownDescription": "Enables the webview_hide command without any pre-configured scope."
        },
        {
          "description": "Enables the webview_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-webview-position",
          "markdownDescription": "Enables the webview_position command without any pre-configured scope."
        },
        {
          "description": "Enables the webview_show command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-webview-show",
          "markdownDescription": "Enables the webview_show command without any pre-configured scope."
        },
        {
          "description": "Enables the webview_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-webview-size",
          "markdownDescription": "Enables the webview_size command without any pre-configured scope."
        },
        {
          "description": "Denies the clear_all_browsing_data command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-clear-all-browsing-data",
          "markdownDescription": "Denies the clear_all_browsing_data command without any pre-configured scope."
        },
        {
          "description": "Denies the create_webview command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-create-webview",
          "markdownDescription": "Denies the create_webview command without any pre-configured scope."
        },
        {
          "description": "Denies the create_webview_window command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-create-webview-window",
          "markdownDescription": "Denies the create_webview_window command without any pre-configured scope."
        },
        {
          "description": "Denies the get_all_webviews command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-get-all-webviews",
          "markdownDescription": "Denies the get_all_webviews command without any pre-configured scope."
        },
        {
          "description": "Denies the internal_toggle_devtools command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-internal-toggle-devtools",
          "markdownDescription": "Denies the internal_toggle_devtools command without any pre-configured scope."
        },
        {
          "description": "Denies the print command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-print",
          "markdownDescription": "Denies the print command without any pre-configured scope."
        },
        {
          "description": "Denies the reparent command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-reparent",
          "markdownDescription": "Denies the reparent command without any pre-configured scope."
        },
        {
          "description": "Denies the set_webview_background_color command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-set-webview-background-color",
          "markdownDescription": "Denies the set_webview_background_color command without any pre-configured scope."
        },
        {
          "description": "Denies the set_webview_focus command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-set-webview-focus",
          "markdownDescription": "Denies the set_webview_focus command without any pre-configured scope."
        },
        {
          "description": "Denies the set_webview_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-set-webview-position",
          "markdownDescription": "Denies the set_webview_position command without any pre-configured scope."
        },
        {
          "description": "Denies the set_webview_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-set-webview-size",
          "markdownDescription": "Denies the set_webview_size command without any pre-configured scope."
        },
        {
          "description": "Denies the set_webview_zoom command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-set-webview-zoom",
          "markdownDescription": "Denies the set_webview_zoom command without any pre-configured scope."
        },
        {
          "description": "Denies the webview_close command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-webview-close",
          "markdownDescription": "Denies the webview_close command without any pre-configured scope."
        },
        {
          "description": "Denies the webview_hide command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-webview-hide",
          "markdownDescription": "Denies the webview_hide command without any pre-configured scope."
        },
        {
          "description": "Denies the webview_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-webview-position",
          "markdownDescription": "Denies the webview_position command without any pre-configured scope."
        },
        {
          "description": "Denies the webview_show command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-webview-show",
          "markdownDescription": "Denies the webview_show command without any pre-configured scope."
        },
        {
          "description": "Denies the webview_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-webview-size",
          "markdownDescription": "Denies the webview_size command without any pre-configured scope."
        },
        {
          "description": "Default permissions for the plugin.\n#### This default permission set includes:\n\n- `allow-get-all-windows`\n- `allow-scale-factor`\n- `allow-inner-position`\n- `allow-outer-position`\n- `allow-inner-size`\n- `allow-outer-size`\n- `allow-is-fullscreen`\n- `allow-is-minimized`\n- `allow-is-maximized`\n- `allow-is-focused`\n- `allow-is-decorated`\n- `allow-is-resizable`\n- `allow-is-maximizable`\n- `allow-is-minimizable`\n- `allow-is-closable`\n- `allow-is-visible`\n- `allow-is-enabled`\n- `allow-title`\n- `allow-current-monitor`\n- `allow-primary-monitor`\n- `allow-monitor-from-point`\n- `allow-available-monitors`\n- `allow-cursor-position`\n- `allow-theme`\n- `allow-is-always-on-top`\n- `allow-internal-toggle-maximize`",
          "type": "string",
          "const": "core:window:default",
          "markdownDescription": "Default permissions for the plugin.\n#### This default permission set includes:\n\n- `allow-get-all-windows`\n- `allow-scale-factor`\n- `allow-inner-position`\n- `allow-outer-position`\n- `allow-inner-size`\n- `allow-outer-size`\n- `allow-is-fullscreen`\n- `allow-is-minimized`\n- `allow-is-maximized`\n- `allow-is-focused`\n- `allow-is-decorated`\n- `allow-is-resizable`\n- `allow-is-maximizable`\n- `allow-is-minimizable`\n- `allow-is-closable`\n- `allow-is-visible`\n- `allow-is-enabled`\n- `allow-title`\n- `allow-current-monitor`\n- `allow-primary-monitor`\n- `allow-monitor-from-point`\n- `allow-available-monitors`\n- `allow-cursor-position`\n- `allow-theme`\n- `allow-is-always-on-top`\n- `allow-internal-toggle-maximize`"
        },
        {
          "description": "Enables the available_monitors command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-available-monitors",
          "markdownDescription": "Enables the available_monitors command without any pre-configured scope."
        },
        {
          "description": "Enables the center command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-center",
          "markdownDescription": "Enables the center command without any pre-configured scope."
        },
        {
          "description": "Enables the close command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-close",
          "markdownDescription": "Enables the close command without any pre-configured scope."
        },
        {
          "description": "Enables the create command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-create",
          "markdownDescription": "Enables the create command without any pre-configured scope."
        },
        {
          "description": "Enables the current_monitor command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-current-monitor",
          "markdownDescription": "Enables the current_monitor command without any pre-configured scope."
        },
        {
          "description": "Enables the cursor_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-cursor-position",
          "markdownDescription": "Enables the cursor_position command without any pre-configured scope."
        },
        {
          "description": "Enables the destroy command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-destroy",
          "markdownDescription": "Enables the destroy command without any pre-configured scope."
        },
        {
          "description": "Enables the get_all_windows command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-get-all-windows",
          "markdownDescription": "Enables the get_all_windows command without any pre-configured scope."
        },
        {
          "description": "Enables the hide command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-hide",
          "markdownDescription": "Enables the hide command without any pre-configured scope."
        },
        {
          "description": "Enables the inner_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-inner-position",
          "markdownDescription": "Enables the inner_position command without any pre-configured scope."
        },
        {
          "description": "Enables the inner_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-inner-size",
          "markdownDescription": "Enables the inner_size command without any pre-configured scope."
        },
        {
          "description": "Enables the internal_toggle_maximize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-internal-toggle-maximize",
          "markdownDescription": "Enables the internal_toggle_maximize command without any pre-configured scope."
        },
        {
          "description": "Enables the is_always_on_top command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-always-on-top",
          "markdownDescription": "Enables the is_always_on_top command without any pre-configured scope."
        },
        {
          "description": "Enables the is_closable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-closable",
          "markdownDescription": "Enables the is_closable command without any pre-configured scope."
        },
        {
          "description": "Enables the is_decorated command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-decorated",
          "markdownDescription": "Enables the is_decorated command without any pre-configured scope."
        },
        {
          "description": "Enables the is_enabled command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-enabled",
          "markdownDescription": "Enables the is_enabled command without any pre-configured scope."
        },
        {
          "description": "Enables the is_focused command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-focused",
          "markdownDescription": "Enables the is_focused command without any pre-configured scope."
        },
        {
          "description": "Enables the is_fullscreen command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-fullscreen",
          "markdownDescription": "Enables the is_fullscreen command without any pre-configured scope."
        },
        {
          "description": "Enables the is_maximizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-maximizable",
          "markdownDescription": "Enables the is_maximizable command without any pre-configured scope."
        },
        {
          "description": "Enables the is_maximized command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-maximized",
          "markdownDescription": "Enables the is_maximized command without any pre-configured scope."
        },
        {
          "description": "Enables the is_minimizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-minimizable",
          "markdownDescription": "Enables the is_minimizable command without any pre-configured scope."
        },
        {
          "description": "Enables the is_minimized command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-minimized",
          "markdownDescription": "Enables the is_minimized command without any pre-configured scope."
        },
        {
          "description": "Enables the is_resizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-resizable",
          "markdownDescription": "Enables the is_resizable command without any pre-configured scope."
        },
        {
          "description": "Enables the is_visible command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-visible",
          "markdownDescription": "Enables the is_visible command without any pre-configured scope."
        },
        {
          "description": "Enables the maximize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-maximize",
          "markdownDescription": "Enables the maximize command without any pre-configured scope."
        },
        {
          "description": "Enables the minimize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-minimize",
          "markdownDescription": "Enables the minimize command without any pre-configured scope."
        },
        {
          "description": "Enables the monitor_from_point command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-monitor-from-point",
          "markdownDescription": "Enables the monitor_from_point command without any pre-configured scope."
        },
        {
          "description": "Enables the outer_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-outer-position",
          "markdownDescription": "Enables the outer_position command without any pre-configured scope."
        },
        {
          "description": "Enables the outer_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-outer-size",
          "markdownDescription": "Enables the outer_size command without any pre-configured scope."
        },
        {
          "description": "Enables the primary_monitor command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-primary-monitor",
          "markdownDescription": "Enables the primary_monitor command without any pre-configured scope."
        },
        {
          "description": "Enables the request_user_attention command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-request-user-attention",
          "markdownDescription": "Enables the request_user_attention command without any pre-configured scope."
        },
        {
          "description": "Enables the scale_factor command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-scale-factor",
          "markdownDescription": "Enables the scale_factor command without any pre-configured scope."
        },
        {
          "description": "Enables the set_always_on_bottom command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-always-on-bottom",
          "markdownDescription": "Enables the set_always_on_bottom command without any pre-configured scope."
        },
        {
          "description": "Enables the set_always_on_top command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-always-on-top",
          "markdownDescription": "Enables the set_always_on_top command without any pre-configured scope."
        },
        {
          "description": "Enables the set_background_color command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-background-color",
          "markdownDescription": "Enables the set_background_color command without any pre-configured scope."
        },
        {
          "description": "Enables the set_badge_count command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-badge-count",
          "markdownDescription": "Enables the set_badge_count command without any pre-configured scope."
        },
        {
          "description": "Enables the set_badge_label command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-badge-label",
          "markdownDescription": "Enables the set_badge_label command without any pre-configured scope."
        },
        {
          "description": "Enables the set_closable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-closable",
          "markdownDescription": "Enables the set_closable command without any pre-configured scope."
        },
        {
          "description": "Enables the set_content_protected command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-content-protected",
          "markdownDescription": "Enables the set_content_protected command without any pre-configured scope."
        },
        {
          "description": "Enables the set_cursor_grab command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-cursor-grab",
          "markdownDescription": "Enables the set_cursor_grab command without any pre-configured scope."
        },
        {
          "description": "Enables the set_cursor_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-cursor-icon",
          "markdownDescription": "Enables the set_cursor_icon command without any pre-configured scope."
        },
        {
          "description": "Enables the set_cursor_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-cursor-position",
          "markdownDescription": "Enables the set_cursor_position command without any pre-configured scope."
        },
        {
          "description": "Enables the set_cursor_visible command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-cursor-visible",
          "markdownDescription": "Enables the set_cursor_visible command without any pre-configured scope."
        },
        {
          "description": "Enables the set_decorations command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-decorations",
          "markdownDescription": "Enables the set_decorations command without any pre-configured scope."
        },
        {
          "description": "Enables the set_effects command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-effects",
          "markdownDescription": "Enables the set_effects command without any pre-configured scope."
        },
        {
          "description": "Enables the set_enabled command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-enabled",
          "markdownDescription": "Enables the set_enabled command without any pre-configured scope."
        },
        {
          "description": "Enables the set_focus command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-focus",
          "markdownDescription": "Enables the set_focus command without any pre-configured scope."
        },
        {
          "description": "Enables the set_fullscreen command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-fullscreen",
          "markdownDescription": "Enables the set_fullscreen command without any pre-configured scope."
        },
        {
          "description": "Enables the set_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-icon",
          "markdownDescription": "Enables the set_icon command without any pre-configured scope."
        },
        {
          "description": "Enables the set_ignore_cursor_events command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-ignore-cursor-events",
          "markdownDescription": "Enables the set_ignore_cursor_events command without any pre-configured scope."
        },
        {
          "description": "Enables the set_max_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-max-size",
          "markdownDescription": "Enables the set_max_size command without any pre-configured scope."
        },
        {
          "description": "Enables the set_maximizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-maximizable",
          "markdownDescription": "Enables the set_maximizable command without any pre-configured scope."
        },
        {
          "description": "Enables the set_min_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-min-size",
          "markdownDescription": "Enables the set_min_size command without any pre-configured scope."
        },
        {
          "description": "Enables the set_minimizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-minimizable",
          "markdownDescription": "Enables the set_minimizable command without any pre-configured scope."
        },
        {
          "description": "Enables the set_overlay_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-overlay-icon",
          "markdownDescription": "Enables the set_overlay_icon command without any pre-configured scope."
        },
        {
          "description": "Enables the set_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-position",
          "markdownDescription": "Enables the set_position command without any pre-configured scope."
        },
        {
          "description": "Enables the set_progress_bar command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-progress-bar",
          "markdownDescription": "Enables the set_progress_bar command without any pre-configured scope."
        },
        {
          "description": "Enables the set_resizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-resizable",
          "markdownDescription": "Enables the set_resizable command without any pre-configured scope."
        },
        {
          "description": "Enables the set_shadow command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-shadow",
          "markdownDescription": "Enables the set_shadow command without any pre-configured scope."
        },
        {
          "description": "Enables the set_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-size",
          "markdownDescription": "Enables the set_size command without any pre-configured scope."
        },
        {
          "description": "Enables the set_size_constraints command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-size-constraints",
          "markdownDescription": "Enables the set_size_constraints command without any pre-configured scope."
        },
        {
          "description": "Enables the set_skip_taskbar command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-skip-taskbar",
          "markdownDescription": "Enables the set_skip_taskbar command without any pre-configured scope."
        },
        {
          "description": "Enables the set_theme command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-theme",
          "markdownDescription": "Enables the set_theme command without any pre-configured scope."
        },
        {
          "description": "Enables the set_title command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-title",
          "markdownDescription": "Enables the set_title command without any pre-configured scope."
        },
        {
          "description": "Enables the set_title_bar_style command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-title-bar-style",
          "markdownDescription": "Enables the set_title_bar_style command without any pre-configured scope."
        },
        {
          "description": "Enables the set_visible_on_all_workspaces command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-visible-on-all-workspaces",
          "markdownDescription": "Enables the set_visible_on_all_workspaces command without any pre-configured scope."
        },
        {
          "description": "Enables the show command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-show",
          "markdownDescription": "Enables the show command without any pre-configured scope."
        },
        {
          "description": "Enables the start_dragging command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-start-dragging",
          "markdownDescription": "Enables the start_dragging command without any pre-configured scope."
        },
        {
          "description": "Enables the start_resize_dragging command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-start-resize-dragging",
          "markdownDescription": "Enables the start_resize_dragging command without any pre-configured scope."
        },
        {
          "description": "Enables the theme command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-theme",
          "markdownDescription": "Enables the theme command without any pre-configured scope."
        },
        {
          "description": "Enables the title command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-title",
          "markdownDescription": "Enables the title command without any pre-configured scope."
        },
        {
          "description": "Enables the toggle_maximize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-toggle-maximize",
          "markdownDescription": "Enables the toggle_maximize command without any pre-configured scope."
        },
        {
          "description": "Enables the unmaximize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-unmaximize",
          "markdownDescription": "Enables the unmaximize command without any pre-configured scope."
        },
        {
          "description": "Enables the unminimize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-unminimize",
          "markdownDescription": "Enables the unminimize command without any pre-configured scope."
        },
        {
          "description": "Denies the available_monitors command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-available-monitors",
          "markdownDescription": "Denies the available_monitors command without any pre-configured scope."
        },
        {
          "description": "Denies the center command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-center",
          "markdownDescription": "Denies the center command without any pre-configured scope."
        },
        {
          "description": "Denies the close command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-close",
          "markdownDescription": "Denies the close command without any pre-configured scope."
        },
        {
          "description": "Denies the create command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-create",
          "markdownDescription": "Denies the create command without any pre-configured scope."
        },
        {
          "description": "Denies the current_monitor command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-current-monitor",
          "markdownDescription": "Denies the current_monitor command without any pre-configured scope."
        },
        {
          "description": "Denies the cursor_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-cursor-position",
          "markdownDescription": "Denies the cursor_position command without any pre-configured scope."
        },
        {
          "description": "Denies the destroy command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-destroy",
          "markdownDescription": "Denies the destroy command without any pre-configured scope."
        },
        {
          "description": "Denies the get_all_windows command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-get-all-windows",
          "markdownDescription": "Denies the get_all_windows command without any pre-configured scope."
        },
        {
          "description": "Denies the hide command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-hide",
          "markdownDescription": "Denies the hide command without any pre-configured scope."
        },
        {
          "description": "Denies the inner_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-inner-position",
          "markdownDescription": "Denies the inner_position command without any pre-configured scope."
        },
        {
          "description": "Denies the inner_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-inner-size",
          "markdownDescription": "Denies the inner_size command without any pre-configured scope."
        },
        {
          "description": "Denies the internal_toggle_maximize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-internal-toggle-maximize",
          "markdownDescription": "Denies the internal_toggle_maximize command without any pre-configured scope."
        },
        {
          "description": "Denies the is_always_on_top command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-always-on-top",
          "markdownDescription": "Denies the is_always_on_top command without any pre-configured scope."
        },
        {
          "description": "Denies the is_closable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-closable",
          "markdownDescription": "Denies the is_closable command without any pre-configured scope."
        },
        {
          "description": "Denies the is_decorated command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-decorated",
          "markdownDescription": "Denies the is_decorated command without any pre-configured scope."
        },
        {
          "description": "Denies the is_enabled command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-enabled",
          "markdownDescription": "Denies the is_enabled command without any pre-configured scope."
        },
        {
          "description": "Denies the is_focused command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-focused",
          "markdownDescription": "Denies the is_focused command without any pre-configured scope."
        },
        {
          "description": "Denies the is_fullscreen command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-fullscreen",
          "markdownDescription": "Denies the is_fullscreen command without any pre-configured scope."
        },
        {
          "description": "Denies the is_maximizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-maximizable",
          "markdownDescription": "Denies the is_maximizable command without any pre-configured scope."
        },
        {
          "description": "Denies the is_maximized command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-maximized",
          "markdownDescription": "Denies the is_maximized command without any pre-configured scope."
        },
        {
          "description": "Denies the is_minimizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-minimizable",
          "markdownDescription": "Denies the is_minimizable command without any pre-configured scope."
        },
        {
          "description": "Denies the is_minimized command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-minimized",
          "markdownDescription": "Denies the is_minimized command without any pre-configured scope."
        },
        {
          "description": "Denies the is_resizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-resizable",
          "markdownDescription": "Denies the is_resizable command without any pre-configured scope."
        },
        {
          "description": "Denies the is_visible command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-visible",
          "markdownDescription": "Denies the is_visible command without any pre-configured scope."
        },
        {
          "description": "Denies the maximize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-maximize",
          "markdownDescription": "Denies the maximize command without any pre-configured scope."
        },
        {
          "description": "Denies the minimize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-minimize",
          "markdownDescription": "Denies the minimize command without any pre-configured scope."
        },
        {
          "description": "Denies the monitor_from_point command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-monitor-from-point",
          "markdownDescription": "Denies the monitor_from_point command without any pre-configured scope."
        },
        {
          "description": "Denies the outer_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-outer-position",
          "markdownDescription": "Denies the outer_position command without any pre-configured scope."
        },
        {
          "description": "Denies the outer_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-outer-size",
          "markdownDescription": "Denies the outer_size command without any pre-configured scope."
        },
        {
          "description": "Denies the primary_monitor command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-primary-monitor",
          "markdownDescription": "Denies the primary_monitor command without any pre-configured scope."
        },
        {
          "description": "Denies the request_user_attention command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-request-user-attention",
          "markdownDescription": "Denies the request_user_attention command without any pre-configured scope."
        },
        {
          "description": "Denies the scale_factor command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-scale-factor",
          "markdownDescription": "Denies the scale_factor command without any pre-configured scope."
        },
        {
          "description": "Denies the set_always_on_bottom command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-always-on-bottom",
          "markdownDescription": "Denies the set_always_on_bottom command without any pre-configured scope."
        },
        {
          "description": "Denies the set_always_on_top command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-always-on-top",
          "markdownDescription": "Denies the set_always_on_top command without any pre-configured scope."
        },
        {
          "description": "Denies the set_background_color command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-background-color",
          "markdownDescription": "Denies the set_background_color command without any pre-configured scope."
        },
        {
          "description": "Denies the set_badge_count command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-badge-count",
          "markdownDescription": "Denies the set_badge_count command without any pre-configured scope."
        },
        {
          "description": "Denies the set_badge_label command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-badge-label",
          "markdownDescription": "Denies the set_badge_label command without any pre-configured scope."
        },
        {
          "description": "Denies the set_closable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-closable",
          "markdownDescription": "Denies the set_closable command without any pre-configured scope."
        },
        {
          "description": "Denies the set_content_protected command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-content-protected",
          "markdownDescription": "Denies the set_content_protected command without any pre-configured scope."
        },
        {
          "description": "Denies the set_cursor_grab command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-cursor-grab",
          "markdownDescription": "Denies the set_cursor_grab command without any pre-configured scope."
        },
        {
          "description": "Denies the set_cursor_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-cursor-icon",
          "markdownDescription": "Denies the set_cursor_icon command without any pre-configured scope."
        },
        {
          "description": "Denies the set_cursor_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-cursor-position",
          "markdownDescription": "Denies the set_cursor_position command without any pre-configured scope."
        },
        {
          "description": "Denies the set_cursor_visible command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-cursor-visible",
          "markdownDescription": "Denies the set_cursor_visible command without any pre-configured scope."
        },
        {
          "description": "Denies the set_decorations command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-decorations",
          "markdownDescription": "Denies the set_decorations command without any pre-configured scope."
        },
        {
          "description": "Denies the set_effects command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-effects",
          "markdownDescription": "Denies the set_effects command without any pre-configured scope."
        },
        {
          "description": "Denies the set_enabled command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-enabled",
          "markdownDescription": "Denies the set_enabled command without any pre-configured scope."
        },
        {
          "description": "Denies the set_focus command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-focus",
          "markdownDescription": "Denies the set_focus command without any pre-configured scope."
        },
        {
          "description": "Denies the set_fullscreen command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-fullscreen",
          "markdownDescription": "Denies the set_fullscreen command without any pre-configured scope."
        },
        {
          "description": "Denies the set_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-icon",
          "markdownDescription": "Denies the set_icon command without any pre-configured scope."
        },
        {
          "description": "Denies the set_ignore_cursor_events command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-ignore-cursor-events",
          "markdownDescription": "Denies the set_ignore_cursor_events command without any pre-configured scope."
        },
        {
          "description": "Denies the set_max_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-max-size",
          "markdownDescription": "Denies the set_max_size command without any pre-configured scope."
        },
        {
          "description": "Denies the set_maximizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-maximizable",
          "markdownDescription": "Denies the set_maximizable command without any pre-configured scope."
        },
        {
          "description": "Denies the set_min_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-min-size",
          "markdownDescription": "Denies the set_min_size command without any pre-configured scope."
        },
        {
          "description": "Denies the set_minimizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-minimizable",
          "markdownDescription": "Denies the set_minimizable command without any pre-configured scope."
        },
        {
          "description": "Denies the set_overlay_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-overlay-icon",
          "markdownDescription": "Denies the set_overlay_icon command without any pre-configured scope."
        },
        {
          "description": "Denies the set_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-position",
          "markdownDescription": "Denies the set_position command without any pre-configured scope."
        },
        {
          "description": "Denies the set_progress_bar command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-progress-bar",
          "markdownDescription": "Denies the set_progress_bar command without any pre-configured scope."
        },
        {
          "description": "Denies the set_resizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-resizable",
          "markdownDescription": "Denies the set_resizable command without any pre-configured scope."
        },
        {
          "description": "Denies the set_shadow command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-shadow",
          "markdownDescription": "Denies the set_shadow command without any pre-configured scope."
        },
        {
          "description": "Denies the set_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-size",
          "markdownDescription": "Denies the set_size command without any pre-configured scope."
        },
        {
          "description": "Denies the set_size_constraints command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-size-constraints",
          "markdownDescription": "Denies the set_size_constraints command without any pre-configured scope."
        },
        {
          "description": "Denies the set_skip_taskbar command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-skip-taskbar",
          "markdownDescription": "Denies the set_skip_taskbar command without any pre-configured scope."
        },
        {
          "description": "Denies the set_theme command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-theme",
          "markdownDescription": "Denies the set_theme command without any pre-configured scope."
        },
        {
          "description": "Denies the set_title command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-title",
          "markdownDescription": "Denies the set_title command without any pre-configured scope."
        },
        {
          "description": "Denies the set_title_bar_style command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-title-bar-style",
          "markdownDescription": "Denies the set_title_bar_style command without any pre-configured scope."
        },
        {
          "description": "Denies the set_visible_on_all_workspaces command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-visible-on-all-workspaces",
          "markdownDescription": "Denies the set_visible_on_all_workspaces command without any pre-configured scope."
        },
        {
          "description": "Denies the show command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-show",
          "markdownDescription": "Denies the show command without any pre-configured scope."
        },
        {
          "description": "Denies the start_dragging command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-start-dragging",
          "markdownDescription": "Denies the start_dragging command without any pre-configured scope."
        },
        {
          "description": "Denies the start_resize_dragging command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-start-resize-dragging",
          "markdownDescription": "Denies the start_resize_dragging command without any pre-configured scope."
        },
        {
          "description": "Denies the theme command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-theme",
          "markdownDescription": "Denies the theme command without any pre-configured scope."
        },
        {
          "description": "Denies the title command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-title",
          "markdownDescription": "Denies the title command without any pre-configured scope."
        },
        {
          "description": "Denies the toggle_maximize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-toggle-maximize",
          "markdownDescription": "Denies the toggle_maximize command without any pre-configured scope."
        },
        {
          "description": "Denies the unmaximize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-unmaximize",
          "markdownDescription": "Denies the unmaximize command without any pre-configured scope."
        },
        {
          "description": "Denies the unminimize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-unminimize",
          "markdownDescription": "Denies the unminimize command without any pre-configured scope."
        },
        {
          "description": "This set of permissions describes the what kind of\nfile system access the `fs` plugin has enabled or denied by default.\n\n#### Granted Permissions\n\nThis default permission set enables read access to the\napplication specific directories (AppConfig, AppData, AppLocalData, AppCache,\nAppLog) and all files and sub directories created in it.\nThe location of these directories depends on the operating system,\nwhere the application is run.\n\nIn general these directories need to be manually created\nby the application at runtime, before accessing files or folders\nin it is possible.\n\nTherefore, it is also allowed to create all of these folders via\nthe `mkdir` command.\n\n#### Denied Permissions\n\nThis default permission set prevents access to critical components\nof the Tauri application by default.\nOn Windows the webview data folder access is denied.\n\n#### This default permission set includes:\n\n- `create-app-specific-dirs`\n- `read-app-specific-dirs-recursive`\n- `deny-default`",
          "type": "string",
          "const": "fs:default",
          "markdownDescription": "This set of permissions describes the what kind of\nfile system access the `fs` plugin has enabled or denied by default.\n\n#### Granted Permissions\n\nThis default permission set enables read access to the\napplication specific directories (AppConfig, AppData, AppLocalData, AppCache,\nAppLog) and all files and sub directories created in it.\nThe location of these directories depends on the operating system,\nwhere the application is run.\n\nIn general these directories need to be manually created\nby the application at runtime, before accessing files or folders\nin it is possible.\n\nTherefore, it is also allowed to create all of these folders via\nthe `mkdir` command.\n\n#### Denied Permissions\n\nThis default permission set prevents access to critical components\nof the Tauri application by default.\nOn Windows the webview data folder access is denied.\n\n#### This default permission set includes:\n\n- `create-app-specific-dirs`\n- `read-app-specific-dirs-recursive`\n- `deny-default`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the application folders, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-app-index`",
          "type": "string",
          "const": "fs:allow-app-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the application folders, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-app-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the application folders, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-app-recursive`",
          "type": "string",
          "const": "fs:allow-app-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the application folders, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-app-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the application folders.\n#### This permission set includes:\n\n- `read-all`\n- `scope-app`",
          "type": "string",
          "const": "fs:allow-app-read",
          "markdownDescription": "This allows non-recursive read access to the application folders.\n#### This permission set includes:\n\n- `read-all`\n- `scope-app`"
        },
        {
          "description": "This allows full recursive read access to the complete application folders, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-app-recursive`",
          "type": "string",
          "const": "fs:allow-app-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete application folders, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-app-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the application folders.\n#### This permission set includes:\n\n- `write-all`\n- `scope-app`",
          "type": "string",
          "const": "fs:allow-app-write",
          "markdownDescription": "This allows non-recursive write access to the application folders.\n#### This permission set includes:\n\n- `write-all`\n- `scope-app`"
        },
        {
          "description": "This allows full recursive write access to the complete application folders, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-app-recursive`",
          "type": "string",
          "const": "fs:allow-app-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete application folders, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-app-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$APPCACHE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appcache-index`",
          "type": "string",
          "const": "fs:allow-appcache-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$APPCACHE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appcache-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$APPCACHE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appcache-recursive`",
          "type": "string",
          "const": "fs:allow-appcache-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$APPCACHE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appcache-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$APPCACHE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appcache`",
          "type": "string",
          "const": "fs:allow-appcache-read",
          "markdownDescription": "This allows non-recursive read access to the `$APPCACHE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appcache`"
        },
        {
          "description": "This allows full recursive read access to the complete `$APPCACHE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appcache-recursive`",
          "type": "string",
          "const": "fs:allow-appcache-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$APPCACHE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appcache-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$APPCACHE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appcache`",
          "type": "string",
          "const": "fs:allow-appcache-write",
          "markdownDescription": "This allows non-recursive write access to the `$APPCACHE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appcache`"
        },
        {
          "description": "This allows full recursive write access to the complete `$APPCACHE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appcache-recursive`",
          "type": "string",
          "const": "fs:allow-appcache-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$APPCACHE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appcache-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$APPCONFIG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appconfig-index`",
          "type": "string",
          "const": "fs:allow-appconfig-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$APPCONFIG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appconfig-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$APPCONFIG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appconfig-recursive`",
          "type": "string",
          "const": "fs:allow-appconfig-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$APPCONFIG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appconfig-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$APPCONFIG` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appconfig`",
          "type": "string",
          "const": "fs:allow-appconfig-read",
          "markdownDescription": "This allows non-recursive read access to the `$APPCONFIG` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appconfig`"
        },
        {
          "description": "This allows full recursive read access to the complete `$APPCONFIG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appconfig-recursive`",
          "type": "string",
          "const": "fs:allow-appconfig-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$APPCONFIG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appconfig-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$APPCONFIG` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appconfig`",
          "type": "string",
          "const": "fs:allow-appconfig-write",
          "markdownDescription": "This allows non-recursive write access to the `$APPCONFIG` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appconfig`"
        },
        {
          "description": "This allows full recursive write access to the complete `$APPCONFIG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appconfig-recursive`",
          "type": "string",
          "const": "fs:allow-appconfig-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$APPCONFIG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appconfig-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$APPDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appdata-index`",
          "type": "string",
          "const": "fs:allow-appdata-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$APPDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appdata-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$APPDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appdata-recursive`",
          "type": "string",
          "const": "fs:allow-appdata-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$APPDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appdata-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$APPDATA` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appdata`",
          "type": "string",
          "const": "fs:allow-appdata-read",
          "markdownDescription": "This allows non-recursive read access to the `$APPDATA` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appdata`"
        },
        {
          "description": "This allows full recursive read access to the complete `$APPDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appdata-recursive`",
          "type": "string",
          "const": "fs:allow-appdata-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$APPDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appdata-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$APPDATA` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appdata`",
          "type": "string",
          "const": "fs:allow-appdata-write",
          "markdownDescription": "This allows non-recursive write access to the `$APPDATA` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appdata`"
        },
        {
          "description": "This allows full recursive write access to the complete `$APPDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appdata-recursive`",
          "type": "string",
          "const": "fs:allow-appdata-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$APPDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appdata-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$APPLOCALDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-applocaldata-index`",
          "type": "string",
          "const": "fs:allow-applocaldata-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$APPLOCALDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-applocaldata-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$APPLOCALDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-applocaldata-recursive`",
          "type": "string",
          "const": "fs:allow-applocaldata-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$APPLOCALDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-applocaldata-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$APPLOCALDATA` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-applocaldata`",
          "type": "string",
          "const": "fs:allow-applocaldata-read",
          "markdownDescription": "This allows non-recursive read access to the `$APPLOCALDATA` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-applocaldata`"
        },
        {
          "description": "This allows full recursive read access to the complete `$APPLOCALDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-applocaldata-recursive`",
          "type": "string",
          "const": "fs:allow-applocaldata-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$APPLOCALDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-applocaldata-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$APPLOCALDATA` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-applocaldata`",
          "type": "string",
          "const": "fs:allow-applocaldata-write",
          "markdownDescription": "This allows non-recursive write access to the `$APPLOCALDATA` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-applocaldata`"
        },
        {
          "description": "This allows full recursive write access to the complete `$APPLOCALDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-applocaldata-recursive`",
          "type": "string",
          "const": "fs:allow-applocaldata-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$APPLOCALDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-applocaldata-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$APPLOG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-applog-index`",
          "type": "string",
          "const": "fs:allow-applog-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$APPLOG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-applog-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$APPLOG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-applog-recursive`",
          "type": "string",
          "const": "fs:allow-applog-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$APPLOG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-applog-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$APPLOG` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-applog`",
          "type": "string",
          "const": "fs:allow-applog-read",
          "markdownDescription": "This allows non-recursive read access to the `$APPLOG` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-applog`"
        },
        {
          "description": "This allows full recursive read access to the complete `$APPLOG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-applog-recursive`",
          "type": "string",
          "const": "fs:allow-applog-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$APPLOG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-applog-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$APPLOG` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-applog`",
          "type": "string",
          "const": "fs:allow-applog-write",
          "markdownDescription": "This allows non-recursive write access to the `$APPLOG` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-applog`"
        },
        {
          "description": "This allows full recursive write access to the complete `$APPLOG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-applog-recursive`",
          "type": "string",
          "const": "fs:allow-applog-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$APPLOG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-applog-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$AUDIO` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-audio-index`",
          "type": "string",
          "const": "fs:allow-audio-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$AUDIO` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-audio-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$AUDIO` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-audio-recursive`",
          "type": "string",
          "const": "fs:allow-audio-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$AUDIO` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-audio-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$AUDIO` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-audio`",
          "type": "string",
          "const": "fs:allow-audio-read",
          "markdownDescription": "This allows non-recursive read access to the `$AUDIO` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-audio`"
        },
        {
          "description": "This allows full recursive read access to the complete `$AUDIO` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-audio-recursive`",
          "type": "string",
          "const": "fs:allow-audio-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$AUDIO` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-audio-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$AUDIO` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-audio`",
          "type": "string",
          "const": "fs:allow-audio-write",
          "markdownDescription": "This allows non-recursive write access to the `$AUDIO` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-audio`"
        },
        {
          "description": "This allows full recursive write access to the complete `$AUDIO` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-audio-recursive`",
          "type": "string",
          "const": "fs:allow-audio-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$AUDIO` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-audio-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$CACHE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-cache-index`",
          "type": "string",
          "const": "fs:allow-cache-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$CACHE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-cache-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$CACHE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-cache-recursive`",
          "type": "string",
          "const": "fs:allow-cache-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$CACHE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-cache-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$CACHE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-cache`",
          "type": "string",
          "const": "fs:allow-cache-read",
          "markdownDescription": "This allows non-recursive read access to the `$CACHE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-cache`"
        },
        {
          "description": "This allows full recursive read access to the complete `$CACHE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-cache-recursive`",
          "type": "string",
          "const": "fs:allow-cache-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$CACHE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-cache-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$CACHE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-cache`",
          "type": "string",
          "const": "fs:allow-cache-write",
          "markdownDescription": "This allows non-recursive write access to the `$CACHE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-cache`"
        },
        {
          "description": "This allows full recursive write access to the complete `$CACHE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-cache-recursive`",
          "type": "string",
          "const": "fs:allow-cache-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$CACHE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-cache-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$CONFIG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-config-index`",
          "type": "string",
          "const": "fs:allow-config-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$CONFIG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-config-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$CONFIG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-config-recursive`",
          "type": "string",
          "const": "fs:allow-config-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$CONFIG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-config-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$CONFIG` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-config`",
          "type": "string",
          "const": "fs:allow-config-read",
          "markdownDescription": "This allows non-recursive read access to the `$CONFIG` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-config`"
        },
        {
          "description": "This allows full recursive read access to the complete `$CONFIG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-config-recursive`",
          "type": "string",
          "const": "fs:allow-config-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$CONFIG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-config-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$CONFIG` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-config`",
          "type": "string",
          "const": "fs:allow-config-write",
          "markdownDescription": "This allows non-recursive write access to the `$CONFIG` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-config`"
        },
        {
          "description": "This allows full recursive write access to the complete `$CONFIG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-config-recursive`",
          "type": "string",
          "const": "fs:allow-config-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$CONFIG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-config-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$DATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-data-index`",
          "type": "string",
          "const": "fs:allow-data-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$DATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-data-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$DATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-data-recursive`",
          "type": "string",
          "const": "fs:allow-data-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$DATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-data-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$DATA` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-data`",
          "type": "string",
          "const": "fs:allow-data-read",
          "markdownDescription": "This allows non-recursive read access to the `$DATA` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-data`"
        },
        {
          "description": "This allows full recursive read access to the complete `$DATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-data-recursive`",
          "type": "string",
          "const": "fs:allow-data-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$DATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-data-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$DATA` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-data`",
          "type": "string",
          "const": "fs:allow-data-write",
          "markdownDescription": "This allows non-recursive write access to the `$DATA` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-data`"
        },
        {
          "description": "This allows full recursive write access to the complete `$DATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-data-recursive`",
          "type": "string",
          "const": "fs:allow-data-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$DATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-data-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$DESKTOP` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-desktop-index`",
          "type": "string",
          "const": "fs:allow-desktop-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$DESKTOP` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-desktop-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$DESKTOP` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-desktop-recursive`",
          "type": "string",
          "const": "fs:allow-desktop-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$DESKTOP` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-desktop-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$DESKTOP` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-desktop`",
          "type": "string",
          "const": "fs:allow-desktop-read",
          "markdownDescription": "This allows non-recursive read access to the `$DESKTOP` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-desktop`"
        },
        {
          "description": "This allows full recursive read access to the complete `$DESKTOP` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-desktop-recursive`",
          "type": "string",
          "const": "fs:allow-desktop-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$DESKTOP` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-desktop-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$DESKTOP` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-desktop`",
          "type": "string",
          "const": "fs:allow-desktop-write",
          "markdownDescription": "This allows non-recursive write access to the `$DESKTOP` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-desktop`"
        },
        {
          "description": "This allows full recursive write access to the complete `$DESKTOP` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-desktop-recursive`",
          "type": "string",
          "const": "fs:allow-desktop-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$DESKTOP` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-desktop-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$DOCUMENT` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-document-index`",
          "type": "string",
          "const": "fs:allow-document-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$DOCUMENT` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-document-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$DOCUMENT` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-document-recursive`",
          "type": "string",
          "const": "fs:allow-document-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$DOCUMENT` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-document-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$DOCUMENT` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-document`",
          "type": "string",
          "const": "fs:allow-document-read",
          "markdownDescription": "This allows non-recursive read access to the `$DOCUMENT` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-document`"
        },
        {
          "description": "This allows full recursive read access to the complete `$DOCUMENT` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-document-recursive`",
          "type": "string",
          "const": "fs:allow-document-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$DOCUMENT` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-document-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$DOCUMENT` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-document`",
          "type": "string",
          "const": "fs:allow-document-write",
          "markdownDescription": "This allows non-recursive write access to the `$DOCUMENT` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-document`"
        },
        {
          "description": "This allows full recursive write access to the complete `$DOCUMENT` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-document-recursive`",
          "type": "string",
          "const": "fs:allow-document-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$DOCUMENT` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-document-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$DOWNLOAD` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-download-index`",
          "type": "string",
          "const": "fs:allow-download-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$DOWNLOAD` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-download-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$DOWNLOAD` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-download-recursive`",
          "type": "string",
          "const": "fs:allow-download-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$DOWNLOAD` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-download-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$DOWNLOAD` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-download`",
          "type": "string",
          "const": "fs:allow-download-read",
          "markdownDescription": "This allows non-recursive read access to the `$DOWNLOAD` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-download`"
        },
        {
          "description": "This allows full recursive read access to the complete `$DOWNLOAD` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-download-recursive`",
          "type": "string",
          "const": "fs:allow-download-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$DOWNLOAD` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-download-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$DOWNLOAD` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-download`",
          "type": "string",
          "const": "fs:allow-download-write",
          "markdownDescription": "This allows non-recursive write access to the `$DOWNLOAD` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-download`"
        },
        {
          "description": "This allows full recursive write access to the complete `$DOWNLOAD` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-download-recursive`",
          "type": "string",
          "const": "fs:allow-download-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$DOWNLOAD` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-download-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$EXE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-exe-index`",
          "type": "string",
          "const": "fs:allow-exe-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$EXE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-exe-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$EXE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-exe-recursive`",
          "type": "string",
          "const": "fs:allow-exe-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$EXE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-exe-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$EXE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-exe`",
          "type": "string",
          "const": "fs:allow-exe-read",
          "markdownDescription": "This allows non-recursive read access to the `$EXE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-exe`"
        },
        {
          "description": "This allows full recursive read access to the complete `$EXE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-exe-recursive`",
          "type": "string",
          "const": "fs:allow-exe-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$EXE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-exe-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$EXE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-exe`",
          "type": "string",
          "const": "fs:allow-exe-write",
          "markdownDescription": "This allows non-recursive write access to the `$EXE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-exe`"
        },
        {
          "description": "This allows full recursive write access to the complete `$EXE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-exe-recursive`",
          "type": "string",
          "const": "fs:allow-exe-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$EXE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-exe-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$FONT` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-font-index`",
          "type": "string",
          "const": "fs:allow-font-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$FONT` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-font-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$FONT` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-font-recursive`",
          "type": "string",
          "const": "fs:allow-font-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$FONT` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-font-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$FONT` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-font`",
          "type": "string",
          "const": "fs:allow-font-read",
          "markdownDescription": "This allows non-recursive read access to the `$FONT` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-font`"
        },
        {
          "description": "This allows full recursive read access to the complete `$FONT` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-font-recursive`",
          "type": "string",
          "const": "fs:allow-font-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$FONT` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-font-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$FONT` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-font`",
          "type": "string",
          "const": "fs:allow-font-write",
          "markdownDescription": "This allows non-recursive write access to the `$FONT` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-font`"
        },
        {
          "description": "This allows full recursive write access to the complete `$FONT` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-font-recursive`",
          "type": "string",
          "const": "fs:allow-font-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$FONT` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-font-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$HOME` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-home-index`",
          "type": "string",
          "const": "fs:allow-home-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$HOME` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-home-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$HOME` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-home-recursive`",
          "type": "string",
          "const": "fs:allow-home-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$HOME` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-home-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$HOME` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-home`",
          "type": "string",
          "const": "fs:allow-home-read",
          "markdownDescription": "This allows non-recursive read access to the `$HOME` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-home`"
        },
        {
          "description": "This allows full recursive read access to the complete `$HOME` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-home-recursive`",
          "type": "string",
          "const": "fs:allow-home-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$HOME` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-home-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$HOME` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-home`",
          "type": "string",
          "const": "fs:allow-home-write",
          "markdownDescription": "This allows non-recursive write access to the `$HOME` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-home`"
        },
        {
          "description": "This allows full recursive write access to the complete `$HOME` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-home-recursive`",
          "type": "string",
          "const": "fs:allow-home-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$HOME` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-home-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$LOCALDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-localdata-index`",
          "type": "string",
          "const": "fs:allow-localdata-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$LOCALDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-localdata-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$LOCALDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-localdata-recursive`",
          "type": "string",
          "const": "fs:allow-localdata-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$LOCALDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-localdata-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$LOCALDATA` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-localdata`",
          "type": "string",
          "const": "fs:allow-localdata-read",
          "markdownDescription": "This allows non-recursive read access to the `$LOCALDATA` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-localdata`"
        },
        {
          "description": "This allows full recursive read access to the complete `$LOCALDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-localdata-recursive`",
          "type": "string",
          "const": "fs:allow-localdata-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$LOCALDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-localdata-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$LOCALDATA` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-localdata`",
          "type": "string",
          "const": "fs:allow-localdata-write",
          "markdownDescription": "This allows non-recursive write access to the `$LOCALDATA` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-localdata`"
        },
        {
          "description": "This allows full recursive write access to the complete `$LOCALDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-localdata-recursive`",
          "type": "string",
          "const": "fs:allow-localdata-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$LOCALDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-localdata-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$LOG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-log-index`",
          "type": "string",
          "const": "fs:allow-log-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$LOG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-log-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$LOG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-log-recursive`",
          "type": "string",
          "const": "fs:allow-log-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$LOG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-log-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$LOG` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-log`",
          "type": "string",
          "const": "fs:allow-log-read",
          "markdownDescription": "This allows non-recursive read access to the `$LOG` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-log`"
        },
        {
          "description": "This allows full recursive read access to the complete `$LOG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-log-recursive`",
          "type": "string",
          "const": "fs:allow-log-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$LOG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-log-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$LOG` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-log`",
          "type": "string",
          "const": "fs:allow-log-write",
          "markdownDescription": "This allows non-recursive write access to the `$LOG` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-log`"
        },
        {
          "description": "This allows full recursive write access to the complete `$LOG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-log-recursive`",
          "type": "string",
          "const": "fs:allow-log-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$LOG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-log-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$PICTURE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-picture-index`",
          "type": "string",
          "const": "fs:allow-picture-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$PICTURE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-picture-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$PICTURE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-picture-recursive`",
          "type": "string",
          "const": "fs:allow-picture-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$PICTURE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-picture-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$PICTURE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-picture`",
          "type": "string",
          "const": "fs:allow-picture-read",
          "markdownDescription": "This allows non-recursive read access to the `$PICTURE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-picture`"
        },
        {
          "description": "This allows full recursive read access to the complete `$PICTURE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-picture-recursive`",
          "type": "string",
          "const": "fs:allow-picture-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$PICTURE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-picture-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$PICTURE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-picture`",
          "type": "string",
          "const": "fs:allow-picture-write",
          "markdownDescription": "This allows non-recursive write access to the `$PICTURE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-picture`"
        },
        {
          "description": "This allows full recursive write access to the complete `$PICTURE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-picture-recursive`",
          "type": "string",
          "const": "fs:allow-picture-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$PICTURE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-picture-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$PUBLIC` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-public-index`",
          "type": "string",
          "const": "fs:allow-public-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$PUBLIC` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-public-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$PUBLIC` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-public-recursive`",
          "type": "string",
          "const": "fs:allow-public-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$PUBLIC` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-public-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$PUBLIC` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-public`",
          "type": "string",
          "const": "fs:allow-public-read",
          "markdownDescription": "This allows non-recursive read access to the `$PUBLIC` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-public`"
        },
        {
          "description": "This allows full recursive read access to the complete `$PUBLIC` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-public-recursive`",
          "type": "string",
          "const": "fs:allow-public-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$PUBLIC` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-public-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$PUBLIC` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-public`",
          "type": "string",
          "const": "fs:allow-public-write",
          "markdownDescription": "This allows non-recursive write access to the `$PUBLIC` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-public`"
        },
        {
          "description": "This allows full recursive write access to the complete `$PUBLIC` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-public-recursive`",
          "type": "string",
          "const": "fs:allow-public-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$PUBLIC` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-public-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$RESOURCE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-resource-index`",
          "type": "string",
          "const": "fs:allow-resource-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$RESOURCE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-resource-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$RESOURCE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-resource-recursive`",
          "type": "string",
          "const": "fs:allow-resource-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$RESOURCE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-resource-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$RESOURCE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-resource`",
          "type": "string",
          "const": "fs:allow-resource-read",
          "markdownDescription": "This allows non-recursive read access to the `$RESOURCE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-resource`"
        },
        {
          "description": "This allows full recursive read access to the complete `$RESOURCE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-resource-recursive`",
          "type": "string",
          "const": "fs:allow-resource-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$RESOURCE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-resource-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$RESOURCE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-resource`",
          "type": "string",
          "const": "fs:allow-resource-write",
          "markdownDescription": "This allows non-recursive write access to the `$RESOURCE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-resource`"
        },
        {
          "description": "This allows full recursive write access to the complete `$RESOURCE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-resource-recursive`",
          "type": "string",
          "const": "fs:allow-resource-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$RESOURCE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-resource-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$RUNTIME` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-runtime-index`",
          "type": "string",
          "const": "fs:allow-runtime-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$RUNTIME` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-runtime-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$RUNTIME` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-runtime-recursive`",
          "type": "string",
          "const": "fs:allow-runtime-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$RUNTIME` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-runtime-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$RUNTIME` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-runtime`",
          "type": "string",
          "const": "fs:allow-runtime-read",
          "markdownDescription": "This allows non-recursive read access to the `$RUNTIME` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-runtime`"
        },
        {
          "description": "This allows full recursive read access to the complete `$RUNTIME` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-runtime-recursive`",
          "type": "string",
          "const": "fs:allow-runtime-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$RUNTIME` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-runtime-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$RUNTIME` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-runtime`",
          "type": "string",
          "const": "fs:allow-runtime-write",
          "markdownDescription": "This allows non-recursive write access to the `$RUNTIME` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-runtime`"
        },
        {
          "description": "This allows full recursive write access to the complete `$RUNTIME` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-runtime-recursive`",
          "type": "string",
          "const": "fs:allow-runtime-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$RUNTIME` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-runtime-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$TEMP` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-temp-index`",
          "type": "string",
          "const": "fs:allow-temp-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$TEMP` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-temp-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$TEMP` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-temp-recursive`",
          "type": "string",
          "const": "fs:allow-temp-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$TEMP` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-temp-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$TEMP` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-temp`",
          "type": "string",
          "const": "fs:allow-temp-read",
          "markdownDescription": "This allows non-recursive read access to the `$TEMP` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-temp`"
        },
        {
          "description": "This allows full recursive read access to the complete `$TEMP` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-temp-recursive`",
          "type": "string",
          "const": "fs:allow-temp-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$TEMP` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-temp-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$TEMP` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-temp`",
          "type": "string",
          "const": "fs:allow-temp-write",
          "markdownDescription": "This allows non-recursive write access to the `$TEMP` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-temp`"
        },
        {
          "description": "This allows full recursive write access to the complete `$TEMP` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-temp-recursive`",
          "type": "string",
          "const": "fs:allow-temp-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$TEMP` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-temp-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$TEMPLATE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-template-index`",
          "type": "string",
          "const": "fs:allow-template-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$TEMPLATE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-template-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$TEMPLATE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-template-recursive`",
          "type": "string",
          "const": "fs:allow-template-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$TEMPLATE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-template-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$TEMPLATE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-template`",
          "type": "string",
          "const": "fs:allow-template-read",
          "markdownDescription": "This allows non-recursive read access to the `$TEMPLATE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-template`"
        },
        {
          "description": "This allows full recursive read access to the complete `$TEMPLATE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-template-recursive`",
          "type": "string",
          "const": "fs:allow-template-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$TEMPLATE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-template-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$TEMPLATE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-template`",
          "type": "string",
          "const": "fs:allow-template-write",
          "markdownDescription": "This allows non-recursive write access to the `$TEMPLATE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-template`"
        },
        {
          "description": "This allows full recursive write access to the complete `$TEMPLATE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-template-recursive`",
          "type": "string",
          "const": "fs:allow-template-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$TEMPLATE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-template-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$VIDEO` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-video-index`",
          "type": "string",
          "const": "fs:allow-video-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$VIDEO` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-video-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$VIDEO` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-video-recursive`",
          "type": "string",
          "const": "fs:allow-video-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$VIDEO` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-video-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$VIDEO` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-video`",
          "type": "string",
          "const": "fs:allow-video-read",
          "markdownDescription": "This allows non-recursive read access to the `$VIDEO` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-video`"
        },
        {
          "description": "This allows full recursive read access to the complete `$VIDEO` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-video-recursive`",
          "type": "string",
          "const": "fs:allow-video-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$VIDEO` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-video-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$VIDEO` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-video`",
          "type": "string",
          "const": "fs:allow-video-write",
          "markdownDescription": "This allows non-recursive write access to the `$VIDEO` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-video`"
        },
        {
          "description": "This allows full recursive write access to the complete `$VIDEO` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-video-recursive`",
          "type": "string",
          "const": "fs:allow-video-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$VIDEO` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-video-recursive`"
        },
        {
          "description": "This denies access to dangerous Tauri relevant files and folders by default.\n#### This permission set includes:\n\n- `deny-webview-data-linux`\n- `deny-webview-data-windows`",
          "type": "string",
          "const": "fs:deny-default",
          "markdownDescription": "This denies access to dangerous Tauri relevant files and folders by default.\n#### This permission set includes:\n\n- `deny-webview-data-linux`\n- `deny-webview-data-windows`"
        },
        {
          "description": "Enables the copy_file command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-copy-file",
          "markdownDescription": "Enables the copy_file command without any pre-configured scope."
        },
        {
          "description": "Enables the create command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-create",
          "markdownDescription": "Enables the create command without any pre-configured scope."
        },
        {
          "description": "Enables the exists command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-exists",
          "markdownDescription": "Enables the exists command without any pre-configured scope."
        },
        {
          "description": "Enables the fstat command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-fstat",
          "markdownDescription": "Enables the fstat command without any pre-configured scope."
        },
        {
          "description": "Enables the ftruncate command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-ftruncate",
          "markdownDescription": "Enables the ftruncate command without any pre-configured scope."
        },
        {
          "description": "Enables the lstat command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-lstat",
          "markdownDescription": "Enables the lstat command without any pre-configured scope."
        },
        {
          "description": "Enables the mkdir command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-mkdir",
          "markdownDescription": "Enables the mkdir command without any pre-configured scope."
        },
        {
          "description": "Enables the open command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-open",
          "markdownDescription": "Enables the open command without any pre-configured scope."
        },
        {
          "description": "Enables the read command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-read",
          "markdownDescription": "Enables the read command without any pre-configured scope."
        },
        {
          "description": "Enables the read_dir command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-read-dir",
          "markdownDescription": "Enables the read_dir command without any pre-configured scope."
        },
        {
          "description": "Enables the read_file command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-read-file",
          "markdownDescription": "Enables the read_file command without any pre-configured scope."
        },
        {
          "description": "Enables the read_text_file command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-read-text-file",
          "markdownDescription": "Enables the read_text_file command without any pre-configured scope."
        },
        {
          "description": "Enables the read_text_file_lines command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-read-text-file-lines",
          "markdownDescription": "Enables the read_text_file_lines command without any pre-configured scope."
        },
        {
          "description": "Enables the read_text_file_lines_next command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-read-text-file-lines-next",
          "markdownDescription": "Enables the read_text_file_lines_next command without any pre-configured scope."
        },
        {
          "description": "Enables the remove command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-remove",
          "markdownDescription": "Enables the remove command without any pre-configured scope."
        },
        {
          "description": "Enables the rename command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-rename",
          "markdownDescription": "Enables the rename command without any pre-configured scope."
        },
        {
          "description": "Enables the seek command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-seek",
          "markdownDescription": "Enables the seek command without any pre-configured scope."
        },
        {
          "description": "Enables the size command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-size",
          "markdownDescription": "Enables the size command without any pre-configured scope."
        },
        {
          "description": "Enables the stat command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-stat",
          "markdownDescription": "Enables the stat command without any pre-configured scope."
        },
        {
          "description": "Enables the truncate command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-truncate",
          "markdownDescription": "Enables the truncate command without any pre-configured scope."
        },
        {
          "description": "Enables the unwatch command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-unwatch",
          "markdownDescription": "Enables the unwatch command without any pre-configured scope."
        },
        {
          "description": "Enables the watch command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-watch",
          "markdownDescription": "Enables the watch command without any pre-configured scope."
        },
        {
          "description": "Enables the write command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-write",
          "markdownDescription": "Enables the write command without any pre-configured scope."
        },
        {
          "description": "Enables the write_file command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-write-file",
          "markdownDescription": "Enables the write_file command without any pre-configured scope."
        },
        {
          "description": "Enables the write_text_file command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-write-text-file",
          "markdownDescription": "Enables the write_text_file command without any pre-configured scope."
        },
        {
          "description": "This permissions allows to create the application specific directories.\n",
          "type": "string",
          "const": "fs:create-app-specific-dirs",
          "markdownDescription": "This permissions allows to create the application specific directories.\n"
        },
        {
          "description": "Denies the copy_file command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-copy-file",
          "markdownDescription": "Denies the copy_file command without any pre-configured scope."
        },
        {
          "description": "Denies the create command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-create",
          "markdownDescription": "Denies the create command without any pre-configured scope."
        },
        {
          "description": "Denies the exists command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-exists",
          "markdownDescription": "Denies the exists command without any pre-configured scope."
        },
        {
          "description": "Denies the fstat command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-fstat",
          "markdownDescription": "Denies the fstat command without any pre-configured scope."
        },
        {
          "description": "Denies the ftruncate command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-ftruncate",
          "markdownDescription": "Denies the ftruncate command without any pre-configured scope."
        },
        {
          "description": "Denies the lstat command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-lstat",
          "markdownDescription": "Denies the lstat command without any pre-configured scope."
        },
        {
          "description": "Denies the mkdir command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-mkdir",
          "markdownDescription": "Denies the mkdir command without any pre-configured scope."
        },
        {
          "description": "Denies the open command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-open",
          "markdownDescription": "Denies the open command without any pre-configured scope."
        },
        {
          "description": "Denies the read command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-read",
          "markdownDescription": "Denies the read command without any pre-configured scope."
        },
        {
          "description": "Denies the read_dir command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-read-dir",
          "markdownDescription": "Denies the read_dir command without any pre-configured scope."
        },
        {
          "description": "Denies the read_file command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-read-file",
          "markdownDescription": "Denies the read_file command without any pre-configured scope."
        },
        {
          "description": "Denies the read_text_file command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-read-text-file",
          "markdownDescription": "Denies the read_text_file command without any pre-configured scope."
        },
        {
          "description": "Denies the read_text_file_lines command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-read-text-file-lines",
          "markdownDescription": "Denies the read_text_file_lines command without any pre-configured scope."
        },
        {
          "description": "Denies the read_text_file_lines_next command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-read-text-file-lines-next",
          "markdownDescription": "Denies the read_text_file_lines_next command without any pre-configured scope."
        },
        {
          "description": "Denies the remove command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-remove",
          "markdownDescription": "Denies the remove command without any pre-configured scope."
        },
        {
          "description": "Denies the rename command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-rename",
          "markdownDescription": "Denies the rename command without any pre-configured scope."
        },
        {
          "description": "Denies the seek command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-seek",
          "markdownDescription": "Denies the seek command without any pre-configured scope."
        },
        {
          "description": "Denies the size command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-size",
          "markdownDescription": "Denies the size command without any pre-configured scope."
        },
        {
          "description": "Denies the stat command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-stat",
          "markdownDescription": "Denies the stat command without any pre-configured scope."
        },
        {
          "description": "Denies the truncate command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-truncate",
          "markdownDescription": "Denies the truncate command without any pre-configured scope."
        },
        {
          "description": "Denies the unwatch command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-unwatch",
          "markdownDescription": "Denies the unwatch command without any pre-configured scope."
        },
        {
          "description": "Denies the watch command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-watch",
          "markdownDescription": "Denies the watch command without any pre-configured scope."
        },
        {
          "description": "This denies read access to the\n`$APPLOCALDATA` folder on linux as the webview data and configuration values are stored here.\nAllowing access can lead to sensitive information disclosure and should be well considered.",
          "type": "string",
          "const": "fs:deny-webview-data-linux",
          "markdownDescription": "This denies read access to the\n`$APPLOCALDATA` folder on linux as the webview data and configuration values are stored here.\nAllowing access can lead to sensitive information disclosure and should be well considered."
        },
        {
          "description": "This denies read access to the\n`$APPLOCALDATA/EBWebView` folder on windows as the webview data and configuration values are stored here.\nAllowing access can lead to sensitive information disclosure and should be well considered.",
          "type": "string",
          "const": "fs:deny-webview-data-windows",
          "markdownDescription": "This denies read access to the\n`$APPLOCALDATA/EBWebView` folder on windows as the webview data and configuration values are stored here.\nAllowing access can lead to sensitive information disclosure and should be well considered."
        },
        {
          "description": "Denies the write command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-write",
          "markdownDescription": "Denies the write command without any pre-configured scope."
        },
        {
          "description": "Denies the write_file command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-write-file",
          "markdownDescription": "Denies the write_file command without any pre-configured scope."
        },
        {
          "description": "Denies the write_text_file command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-write-text-file",
          "markdownDescription": "Denies the write_text_file command without any pre-configured scope."
        },
        {
          "description": "This enables all read related commands without any pre-configured accessible paths.",
          "type": "string",
          "const": "fs:read-all",
          "markdownDescription": "This enables all read related commands without any pre-configured accessible paths."
        },
        {
          "description": "This permission allows recursive read functionality on the application\nspecific base directories. \n",
          "type": "string",
          "const": "fs:read-app-specific-dirs-recursive",
          "markdownDescription": "This permission allows recursive read functionality on the application\nspecific base directories. \n"
        },
        {
          "description": "This enables directory read and file metadata related commands without any pre-configured accessible paths.",
          "type": "string",
          "const": "fs:read-dirs",
          "markdownDescription": "This enables directory read and file metadata related commands without any pre-configured accessible paths."
        },
        {
          "description": "This enables file read related commands without any pre-configured accessible paths.",
          "type": "string",
          "const": "fs:read-files",
          "markdownDescription": "This enables file read related commands without any pre-configured accessible paths."
        },
        {
          "description": "This enables all index or metadata related commands without any pre-configured accessible paths.",
          "type": "string",
          "const": "fs:read-meta",
          "markdownDescription": "This enables all index or metadata related commands without any pre-configured accessible paths."
        },
        {
          "description": "An empty permission you can use to modify the global scope.",
          "type": "string",
          "const": "fs:scope",
          "markdownDescription": "An empty permission you can use to modify the global scope."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the application folders.",
          "type": "string",
          "const": "fs:scope-app",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the application folders."
        },
        {
          "description": "This scope permits to list all files and folders in the application directories.",
          "type": "string",
          "const": "fs:scope-app-index",
          "markdownDescription": "This scope permits to list all files and folders in the application directories."
        },
        {
          "description": "This scope permits recursive access to the complete application folders, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-app-recursive",
          "markdownDescription": "This scope permits recursive access to the complete application folders, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$APPCACHE` folder.",
          "type": "string",
          "const": "fs:scope-appcache",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$APPCACHE` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$APPCACHE`folder.",
          "type": "string",
          "const": "fs:scope-appcache-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$APPCACHE`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$APPCACHE` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-appcache-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$APPCACHE` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$APPCONFIG` folder.",
          "type": "string",
          "const": "fs:scope-appconfig",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$APPCONFIG` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$APPCONFIG`folder.",
          "type": "string",
          "const": "fs:scope-appconfig-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$APPCONFIG`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$APPCONFIG` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-appconfig-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$APPCONFIG` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$APPDATA` folder.",
          "type": "string",
          "const": "fs:scope-appdata",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$APPDATA` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$APPDATA`folder.",
          "type": "string",
          "const": "fs:scope-appdata-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$APPDATA`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$APPDATA` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-appdata-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$APPDATA` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$APPLOCALDATA` folder.",
          "type": "string",
          "const": "fs:scope-applocaldata",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$APPLOCALDATA` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$APPLOCALDATA`folder.",
          "type": "string",
          "const": "fs:scope-applocaldata-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$APPLOCALDATA`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$APPLOCALDATA` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-applocaldata-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$APPLOCALDATA` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$APPLOG` folder.",
          "type": "string",
          "const": "fs:scope-applog",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$APPLOG` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$APPLOG`folder.",
          "type": "string",
          "const": "fs:scope-applog-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$APPLOG`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$APPLOG` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-applog-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$APPLOG` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$AUDIO` folder.",
          "type": "string",
          "const": "fs:scope-audio",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$AUDIO` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$AUDIO`folder.",
          "type": "string",
          "const": "fs:scope-audio-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$AUDIO`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$AUDIO` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-audio-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$AUDIO` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$CACHE` folder.",
          "type": "string",
          "const": "fs:scope-cache",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$CACHE` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$CACHE`folder.",
          "type": "string",
          "const": "fs:scope-cache-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$CACHE`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$CACHE` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-cache-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$CACHE` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$CONFIG` folder.",
          "type": "string",
          "const": "fs:scope-config",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$CONFIG` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$CONFIG`folder.",
          "type": "string",
          "const": "fs:scope-config-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$CONFIG`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$CONFIG` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-config-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$CONFIG` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$DATA` folder.",
          "type": "string",
          "const": "fs:scope-data",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$DATA` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$DATA`folder.",
          "type": "string",
          "const": "fs:scope-data-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$DATA`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$DATA` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-data-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$DATA` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$DESKTOP` folder.",
          "type": "string",
          "const": "fs:scope-desktop",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$DESKTOP` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$DESKTOP`folder.",
          "type": "string",
          "const": "fs:scope-desktop-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$DESKTOP`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$DESKTOP` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-desktop-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$DESKTOP` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$DOCUMENT` folder.",
          "type": "string",
          "const": "fs:scope-document",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$DOCUMENT` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$DOCUMENT`folder.",
          "type": "string",
          "const": "fs:scope-document-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$DOCUMENT`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$DOCUMENT` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-document-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$DOCUMENT` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$DOWNLOAD` folder.",
          "type": "string",
          "const": "fs:scope-download",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$DOWNLOAD` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$DOWNLOAD`folder.",
          "type": "string",
          "const": "fs:scope-download-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$DOWNLOAD`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$DOWNLOAD` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-download-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$DOWNLOAD` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$EXE` folder.",
          "type": "string",
          "const": "fs:scope-exe",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$EXE` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$EXE`folder.",
          "type": "string",
          "const": "fs:scope-exe-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$EXE`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$EXE` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-exe-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$EXE` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$FONT` folder.",
          "type": "string",
          "const": "fs:scope-font",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$FONT` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$FONT`folder.",
          "type": "string",
          "const": "fs:scope-font-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$FONT`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$FONT` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-font-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$FONT` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$HOME` folder.",
          "type": "string",
          "const": "fs:scope-home",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$HOME` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$HOME`folder.",
          "type": "string",
          "const": "fs:scope-home-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$HOME`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$HOME` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-home-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$HOME` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$LOCALDATA` folder.",
          "type": "string",
          "const": "fs:scope-localdata",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$LOCALDATA` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$LOCALDATA`folder.",
          "type": "string",
          "const": "fs:scope-localdata-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$LOCALDATA`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$LOCALDATA` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-localdata-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$LOCALDATA` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$LOG` folder.",
          "type": "string",
          "const": "fs:scope-log",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$LOG` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$LOG`folder.",
          "type": "string",
          "const": "fs:scope-log-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$LOG`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$LOG` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-log-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$LOG` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$PICTURE` folder.",
          "type": "string",
          "const": "fs:scope-picture",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$PICTURE` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$PICTURE`folder.",
          "type": "string",
          "const": "fs:scope-picture-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$PICTURE`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$PICTURE` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-picture-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$PICTURE` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$PUBLIC` folder.",
          "type": "string",
          "const": "fs:scope-public",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$PUBLIC` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$PUBLIC`folder.",
          "type": "string",
          "const": "fs:scope-public-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$PUBLIC`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$PUBLIC` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-public-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$PUBLIC` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$RESOURCE` folder.",
          "type": "string",
          "const": "fs:scope-resource",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$RESOURCE` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$RESOURCE`folder.",
          "type": "string",
          "const": "fs:scope-resource-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$RESOURCE`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$RESOURCE` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-resource-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$RESOURCE` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$RUNTIME` folder.",
          "type": "string",
          "const": "fs:scope-runtime",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$RUNTIME` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$RUNTIME`folder.",
          "type": "string",
          "const": "fs:scope-runtime-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$RUNTIME`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$RUNTIME` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-runtime-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$RUNTIME` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$TEMP` folder.",
          "type": "string",
          "const": "fs:scope-temp",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$TEMP` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$TEMP`folder.",
          "type": "string",
          "const": "fs:scope-temp-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$TEMP`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$TEMP` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-temp-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$TEMP` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$TEMPLATE` folder.",
          "type": "string",
          "const": "fs:scope-template",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$TEMPLATE` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$TEMPLATE`folder.",
          "type": "string",
          "const": "fs:scope-template-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$TEMPLATE`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$TEMPLATE` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-template-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$TEMPLATE` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$VIDEO` folder.",
          "type": "string",
          "const": "fs:scope-video",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$VIDEO` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$VIDEO`folder.",
          "type": "string",
          "const": "fs:scope-video-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$VIDEO`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$VIDEO` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-video-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$VIDEO` folder, including sub directories and files."
        },
        {
          "description": "This enables all write related commands without any pre-configured accessible paths.",
          "type": "string",
          "const": "fs:write-all",
          "markdownDescription": "This enables all write related commands without any pre-configured accessible paths."
        },
        {
          "description": "This enables all file write related commands without any pre-configured accessible paths.",
          "type": "string",
          "const": "fs:write-files",
          "markdownDescription": "This enables all file write related commands without any pre-configured accessible paths."
        },
        {
          "description": "This permission set allows opening `mailto:`, `tel:`, `https://` and `http://` urls using their default application\nas well as reveal file in directories using default file explorer\n#### This default permission set includes:\n\n- `allow-open-url`\n- `allow-reveal-item-in-dir`\n- `allow-default-urls`",
          "type": "string",
          "const": "opener:default",
          "markdownDescription": "This permission set allows opening `mailto:`, `tel:`, `https://` and `http://` urls using their default application\nas well as reveal file in directories using default file explorer\n#### This default permission set includes:\n\n- `allow-open-url`\n- `allow-reveal-item-in-dir`\n- `allow-default-urls`"
        },
        {
          "description": "This enables opening `mailto:`, `tel:`, `https://` and `http://` urls using their default application.",
          "type": "string",
          "const": "opener:allow-default-urls",
          "markdownDescription": "This enables opening `mailto:`, `tel:`, `https://` and `http://` urls using their default application."
        },
        {
          "description": "Enables the open_path command without any pre-configured scope.",
          "type": "string",
          "const": "opener:allow-open-path",
          "markdownDescription": "Enables the open_path command without any pre-configured scope."
        },
        {
          "description": "Enables the open_url command without any pre-configured scope.",
          "type": "string",
          "const": "opener:allow-open-url",
          "markdownDescription": "Enables the open_url command without any pre-configured scope."
        },
        {
          "description": "Enables the reveal_item_in_dir command without any pre-configured scope.",
          "type": "string",
          "const": "opener:allow-reveal-item-in-dir",
          "markdownDescription": "Enables the reveal_item_in_dir command without any pre-configured scope."
        },
        {
          "description": "Denies the open_path command without any pre-configured scope.",
          "type": "string",
          "const": "opener:deny-open-path",
          "markdownDescription": "Denies the open_path command without any pre-configured scope."
        },
        {
          "description": "Denies the open_url command without any pre-configured scope.",
          "type": "string",
          "const": "opener:deny-open-url",
          "markdownDescription": "Denies the open_url command without any pre-configured scope."
        },
        {
          "description": "Denies the reveal_item_in_dir command without any pre-configured scope.",
          "type": "string",
          "const": "opener:deny-reveal-item-in-dir",
          "markdownDescription": "Denies the reveal_item_in_dir command without any pre-configured scope."
        },
        {
          "description": "This permission set configures which\nshell functionality is exposed by default.\n\n#### Granted Permissions\n\nIt allows to use the `open` functionality with a reasonable\nscope pre-configured. It will allow opening `http(s)://`,\n`tel:` and `mailto:` links.\n\n#### This default permission set includes:\n\n- `allow-open`",
          "type": "string",
          "const": "shell:default",
          "markdownDescription": "This permission set configures which\nshell functionality is exposed by default.\n\n#### Granted Permissions\n\nIt allows to use the `open` functionality with a reasonable\nscope pre-configured. It will allow opening `http(s)://`,\n`tel:` and `mailto:` links.\n\n#### This default permission set includes:\n\n- `allow-open`"
        },
        {
          "description": "Enables the execute command without any pre-configured scope.",
          "type": "string",
          "const": "shell:allow-execute",
          "markdownDescription": "Enables the execute command without any pre-configured scope."
        },
        {
          "description": "Enables the kill command without any pre-configured scope.",
          "type": "string",
          "const": "shell:allow-kill",
          "markdownDescription": "Enables the kill command without any pre-configured scope."
        },
        {
          "description": "Enables the open command without any pre-configured scope.",
          "type": "string",
          "const": "shell:allow-open",
          "markdownDescription": "Enables the open command without any pre-configured scope."
        },
        {
          "description": "Enables the spawn command without any pre-configured scope.",
          "type": "string",
          "const": "shell:allow-spawn",
          "markdownDescription": "Enables the spawn command without any pre-configured scope."
        },
        {
          "description": "Enables the stdin_write command without any pre-configured scope.",
          "type": "string",
          "const": "shell:allow-stdin-write",
          "markdownDescription": "Enables the stdin_write command without any pre-configured scope."
        },
        {
          "description": "Denies the execute command without any pre-configured scope.",
          "type": "string",
          "const": "shell:deny-execute",
          "markdownDescription": "Denies the execute command without any pre-configured scope."
        },
        {
          "description": "Denies the kill command without any pre-configured scope.",
          "type": "string",
          "const": "shell:deny-kill",
          "markdownDescription": "Denies the kill command without any pre-configured scope."
        },
        {
          "description": "Denies the open command without any pre-configured scope.",
          "type": "string",
          "const": "shell:deny-open",
          "markdownDescription": "Denies the open command without any pre-configured scope."
        },
        {
          "description": "Denies the spawn command without any pre-configured scope.",
          "type": "string",
          "const": "shell:deny-spawn",
          "markdownDescription": "Denies the spawn command without any pre-configured scope."
        },
        {
          "description": "Denies the stdin_write command without any pre-configured scope.",
          "type": "string",
          "const": "shell:deny-stdin-write",
          "markdownDescription": "Denies the stdin_write command without any pre-configured scope."
        }
      ]
    },
    "Value": {
      "description": "All supported ACL values.",
      "anyOf": [
        {
          "description": "Represents a null JSON value.",
          "type": "null"
        },
        {
          "description": "Represents a [`bool`].",
          "type": "boolean"
        },
        {
          "description": "Represents a valid ACL [`Number`].",
          "allOf": [
            {
              "$ref": "#/definitions/Number"
            }
          ]
        },
        {
          "description": "Represents a [`String`].",
          "type": "string"
        },
        {
          "description": "Represents a list of other [`Value`]s.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Value"
          }
        },
        {
          "description": "Represents a map of [`String`] keys to [`Value`]s.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Value"
          }
        }
      ]
    },
    "Number": {
      "description": "A valid ACL number.",
      "anyOf": [
        {
          "description": "Represents an [`i64`].",
          "type": "integer",
          "format": "int64"
        },
        {
          "description": "Represents a [`f64`].",
          "type": "number",
          "format": "double"
        }
      ]
    },
    "Target": {
      "description": "Platform target.",
      "oneOf": [
        {
          "description": "MacOS.",
          "type": "string",
          "enum": [
            "macOS"
          ]
        },
        {
          "description": "Windows.",
          "type": "string",
          "enum": [
            "windows"
          ]
        },
        {
          "description": "Linux.",
          "type": "string",
          "enum": [
            "linux"
          ]
        },
        {
          "description": "Android.",
          "type": "string",
          "enum": [
            "android"
          ]
        },
        {
          "description": "iOS.",
          "type": "string",
          "enum": [
            "iOS"
          ]
        }
      ]
    },
    "Application": {
      "description": "Opener scope application.",
      "anyOf": [
        {
          "description": "Open in default application.",
          "type": "null"
        },
        {
          "description": "If true, allow open with any application.",
          "type": "boolean"
        },
        {
          "description": "Allow specific application to open with.",
          "type": "string"
        }
      ]
    },
    "ShellScopeEntryAllowedArg": {
      "description": "A command argument allowed to be executed by the webview API.",
      "anyOf": [
        {
          "description": "A non-configurable argument that is passed to the command in the order it was specified.",
          "type": "string"
        },
        {
          "description": "A variable that is set while calling the command from the webview API.",
          "type": "object",
          "required": [
            "validator"
          ],
          "properties": {
            "raw": {
              "description": "Marks the validator as a raw regex, meaning the plugin should not make any modification at runtime.\n\nThis means the regex will not match on the entire string by default, which might be exploited if your regex allow unexpected input to be considered valid. When using this option, make sure your regex is correct.",
              "default": false,
              "type": "boolean"
            },
            "validator": {
              "description": "[regex] validator to require passed values to conform to an expected input.\n\nThis will require the argument value passed to this variable to match the `validator` regex before it will be executed.\n\nThe regex string is by default surrounded by `^...$` to match the full string. For example the `https?://\\w+` regex would be registered as `^https?://\\w+$`.\n\n[regex]: <https://docs.rs/regex/latest/regex/#syntax>",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ShellScopeEntryAllowedArgs": {
      "description": "A set of command arguments allowed to be executed by the webview API.\n\nA value of `true` will allow any arguments to be passed to the command. `false` will disable all arguments. A list of [`ShellScopeEntryAllowedArg`] will set those arguments as the only valid arguments to be passed to the attached command configuration.",
      "anyOf": [
        {
          "description": "Use a simple boolean to allow all or disable all arguments to this command configuration.",
          "type": "boolean"
        },
        {
          "description": "A specific set of [`ShellScopeEntryAllowedArg`] that are valid to call for the command configuration.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShellScopeEntryAllowedArg"
          }
        }
      ]
    }
  }
}

//-==================== END OF FILE: src-tauri\gen\schemas\desktop-schema.json ====================-//

//-==================== START OF FILE: src-tauri\gen\schemas\windows-schema.json ====================-//

{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "CapabilityFile",
  "description": "Capability formats accepted in a capability file.",
  "anyOf": [
    {
      "description": "A single capability.",
      "allOf": [
        {
          "$ref": "#/definitions/Capability"
        }
      ]
    },
    {
      "description": "A list of capabilities.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Capability"
      }
    },
    {
      "description": "A list of capabilities.",
      "type": "object",
      "required": [
        "capabilities"
      ],
      "properties": {
        "capabilities": {
          "description": "The list of capabilities.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Capability"
          }
        }
      }
    }
  ],
  "definitions": {
    "Capability": {
      "description": "A grouping and boundary mechanism developers can use to isolate access to the IPC layer.\n\nIt controls application windows' and webviews' fine grained access to the Tauri core, application, or plugin commands. If a webview or its window is not matching any capability then it has no access to the IPC layer at all.\n\nThis can be done to create groups of windows, based on their required system access, which can reduce impact of frontend vulnerabilities in less privileged windows. Windows can be added to a capability by exact name (e.g. `main-window`) or glob patterns like `*` or `admin-*`. A Window can have none, one, or multiple associated capabilities.\n\n## Example\n\n```json { \"identifier\": \"main-user-files-write\", \"description\": \"This capability allows the `main` window on macOS and Windows access to `filesystem` write related commands and `dialog` commands to enable programatic access to files selected by the user.\", \"windows\": [ \"main\" ], \"permissions\": [ \"core:default\", \"dialog:open\", { \"identifier\": \"fs:allow-write-text-file\", \"allow\": [{ \"path\": \"$HOME/test.txt\" }] }, ], \"platforms\": [\"macOS\",\"windows\"] } ```",
      "type": "object",
      "required": [
        "identifier",
        "permissions"
      ],
      "properties": {
        "identifier": {
          "description": "Identifier of the capability.\n\n## Example\n\n`main-user-files-write`",
          "type": "string"
        },
        "description": {
          "description": "Description of what the capability is intended to allow on associated windows.\n\nIt should contain a description of what the grouped permissions should allow.\n\n## Example\n\nThis capability allows the `main` window access to `filesystem` write related commands and `dialog` commands to enable programatic access to files selected by the user.",
          "default": "",
          "type": "string"
        },
        "remote": {
          "description": "Configure remote URLs that can use the capability permissions.\n\nThis setting is optional and defaults to not being set, as our default use case is that the content is served from our local application.\n\n:::caution Make sure you understand the security implications of providing remote sources with local system access. :::\n\n## Example\n\n```json { \"urls\": [\"https://*.mydomain.dev\"] } ```",
          "anyOf": [
            {
              "$ref": "#/definitions/CapabilityRemote"
            },
            {
              "type": "null"
            }
          ]
        },
        "local": {
          "description": "Whether this capability is enabled for local app URLs or not. Defaults to `true`.",
          "default": true,
          "type": "boolean"
        },
        "windows": {
          "description": "List of windows that are affected by this capability. Can be a glob pattern.\n\nIf a window label matches any of the patterns in this list, the capability will be enabled on all the webviews of that window, regardless of the value of [`Self::webviews`].\n\nOn multiwebview windows, prefer specifying [`Self::webviews`] and omitting [`Self::windows`] for a fine grained access control.\n\n## Example\n\n`[\"main\"]`",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "webviews": {
          "description": "List of webviews that are affected by this capability. Can be a glob pattern.\n\nThe capability will be enabled on all the webviews whose label matches any of the patterns in this list, regardless of whether the webview's window label matches a pattern in [`Self::windows`].\n\n## Example\n\n`[\"sub-webview-one\", \"sub-webview-two\"]`",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "permissions": {
          "description": "List of permissions attached to this capability.\n\nMust include the plugin name as prefix in the form of `${plugin-name}:${permission-name}`. For commands directly implemented in the application itself only `${permission-name}` is required.\n\n## Example\n\n```json [ \"core:default\", \"shell:allow-open\", \"dialog:open\", { \"identifier\": \"fs:allow-write-text-file\", \"allow\": [{ \"path\": \"$HOME/test.txt\" }] } ] ```",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PermissionEntry"
          },
          "uniqueItems": true
        },
        "platforms": {
          "description": "Limit which target platforms this capability applies to.\n\nBy default all platforms are targeted.\n\n## Example\n\n`[\"macOS\",\"windows\"]`",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/Target"
          }
        }
      }
    },
    "CapabilityRemote": {
      "description": "Configuration for remote URLs that are associated with the capability.",
      "type": "object",
      "required": [
        "urls"
      ],
      "properties": {
        "urls": {
          "description": "Remote domains this capability refers to using the [URLPattern standard](https://urlpattern.spec.whatwg.org/).\n\n## Examples\n\n- \"https://*.mydomain.dev\": allows subdomains of mydomain.dev - \"https://mydomain.dev/api/*\": allows any subpath of mydomain.dev/api",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PermissionEntry": {
      "description": "An entry for a permission value in a [`Capability`] can be either a raw permission [`Identifier`] or an object that references a permission and extends its scope.",
      "anyOf": [
        {
          "description": "Reference a permission or permission set by identifier.",
          "allOf": [
            {
              "$ref": "#/definitions/Identifier"
            }
          ]
        },
        {
          "description": "Reference a permission or permission set by identifier and extends its scope.",
          "type": "object",
          "allOf": [
            {
              "if": {
                "properties": {
                  "identifier": {
                    "anyOf": [
                      {
                        "description": "This set of permissions describes the what kind of\nfile system access the `fs` plugin has enabled or denied by default.\n\n#### Granted Permissions\n\nThis default permission set enables read access to the\napplication specific directories (AppConfig, AppData, AppLocalData, AppCache,\nAppLog) and all files and sub directories created in it.\nThe location of these directories depends on the operating system,\nwhere the application is run.\n\nIn general these directories need to be manually created\nby the application at runtime, before accessing files or folders\nin it is possible.\n\nTherefore, it is also allowed to create all of these folders via\nthe `mkdir` command.\n\n#### Denied Permissions\n\nThis default permission set prevents access to critical components\nof the Tauri application by default.\nOn Windows the webview data folder access is denied.\n\n#### This default permission set includes:\n\n- `create-app-specific-dirs`\n- `read-app-specific-dirs-recursive`\n- `deny-default`",
                        "type": "string",
                        "const": "fs:default",
                        "markdownDescription": "This set of permissions describes the what kind of\nfile system access the `fs` plugin has enabled or denied by default.\n\n#### Granted Permissions\n\nThis default permission set enables read access to the\napplication specific directories (AppConfig, AppData, AppLocalData, AppCache,\nAppLog) and all files and sub directories created in it.\nThe location of these directories depends on the operating system,\nwhere the application is run.\n\nIn general these directories need to be manually created\nby the application at runtime, before accessing files or folders\nin it is possible.\n\nTherefore, it is also allowed to create all of these folders via\nthe `mkdir` command.\n\n#### Denied Permissions\n\nThis default permission set prevents access to critical components\nof the Tauri application by default.\nOn Windows the webview data folder access is denied.\n\n#### This default permission set includes:\n\n- `create-app-specific-dirs`\n- `read-app-specific-dirs-recursive`\n- `deny-default`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the application folders, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-app-index`",
                        "type": "string",
                        "const": "fs:allow-app-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the application folders, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-app-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the application folders, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-app-recursive`",
                        "type": "string",
                        "const": "fs:allow-app-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the application folders, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-app-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the application folders.\n#### This permission set includes:\n\n- `read-all`\n- `scope-app`",
                        "type": "string",
                        "const": "fs:allow-app-read",
                        "markdownDescription": "This allows non-recursive read access to the application folders.\n#### This permission set includes:\n\n- `read-all`\n- `scope-app`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete application folders, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-app-recursive`",
                        "type": "string",
                        "const": "fs:allow-app-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete application folders, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-app-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the application folders.\n#### This permission set includes:\n\n- `write-all`\n- `scope-app`",
                        "type": "string",
                        "const": "fs:allow-app-write",
                        "markdownDescription": "This allows non-recursive write access to the application folders.\n#### This permission set includes:\n\n- `write-all`\n- `scope-app`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete application folders, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-app-recursive`",
                        "type": "string",
                        "const": "fs:allow-app-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete application folders, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-app-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$APPCACHE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appcache-index`",
                        "type": "string",
                        "const": "fs:allow-appcache-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$APPCACHE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appcache-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$APPCACHE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appcache-recursive`",
                        "type": "string",
                        "const": "fs:allow-appcache-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$APPCACHE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appcache-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$APPCACHE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appcache`",
                        "type": "string",
                        "const": "fs:allow-appcache-read",
                        "markdownDescription": "This allows non-recursive read access to the `$APPCACHE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appcache`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$APPCACHE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appcache-recursive`",
                        "type": "string",
                        "const": "fs:allow-appcache-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$APPCACHE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appcache-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$APPCACHE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appcache`",
                        "type": "string",
                        "const": "fs:allow-appcache-write",
                        "markdownDescription": "This allows non-recursive write access to the `$APPCACHE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appcache`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$APPCACHE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appcache-recursive`",
                        "type": "string",
                        "const": "fs:allow-appcache-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$APPCACHE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appcache-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$APPCONFIG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appconfig-index`",
                        "type": "string",
                        "const": "fs:allow-appconfig-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$APPCONFIG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appconfig-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$APPCONFIG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appconfig-recursive`",
                        "type": "string",
                        "const": "fs:allow-appconfig-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$APPCONFIG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appconfig-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$APPCONFIG` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appconfig`",
                        "type": "string",
                        "const": "fs:allow-appconfig-read",
                        "markdownDescription": "This allows non-recursive read access to the `$APPCONFIG` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appconfig`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$APPCONFIG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appconfig-recursive`",
                        "type": "string",
                        "const": "fs:allow-appconfig-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$APPCONFIG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appconfig-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$APPCONFIG` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appconfig`",
                        "type": "string",
                        "const": "fs:allow-appconfig-write",
                        "markdownDescription": "This allows non-recursive write access to the `$APPCONFIG` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appconfig`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$APPCONFIG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appconfig-recursive`",
                        "type": "string",
                        "const": "fs:allow-appconfig-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$APPCONFIG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appconfig-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$APPDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appdata-index`",
                        "type": "string",
                        "const": "fs:allow-appdata-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$APPDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appdata-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$APPDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appdata-recursive`",
                        "type": "string",
                        "const": "fs:allow-appdata-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$APPDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appdata-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$APPDATA` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appdata`",
                        "type": "string",
                        "const": "fs:allow-appdata-read",
                        "markdownDescription": "This allows non-recursive read access to the `$APPDATA` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appdata`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$APPDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appdata-recursive`",
                        "type": "string",
                        "const": "fs:allow-appdata-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$APPDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appdata-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$APPDATA` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appdata`",
                        "type": "string",
                        "const": "fs:allow-appdata-write",
                        "markdownDescription": "This allows non-recursive write access to the `$APPDATA` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appdata`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$APPDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appdata-recursive`",
                        "type": "string",
                        "const": "fs:allow-appdata-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$APPDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appdata-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$APPLOCALDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-applocaldata-index`",
                        "type": "string",
                        "const": "fs:allow-applocaldata-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$APPLOCALDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-applocaldata-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$APPLOCALDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-applocaldata-recursive`",
                        "type": "string",
                        "const": "fs:allow-applocaldata-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$APPLOCALDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-applocaldata-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$APPLOCALDATA` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-applocaldata`",
                        "type": "string",
                        "const": "fs:allow-applocaldata-read",
                        "markdownDescription": "This allows non-recursive read access to the `$APPLOCALDATA` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-applocaldata`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$APPLOCALDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-applocaldata-recursive`",
                        "type": "string",
                        "const": "fs:allow-applocaldata-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$APPLOCALDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-applocaldata-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$APPLOCALDATA` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-applocaldata`",
                        "type": "string",
                        "const": "fs:allow-applocaldata-write",
                        "markdownDescription": "This allows non-recursive write access to the `$APPLOCALDATA` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-applocaldata`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$APPLOCALDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-applocaldata-recursive`",
                        "type": "string",
                        "const": "fs:allow-applocaldata-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$APPLOCALDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-applocaldata-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$APPLOG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-applog-index`",
                        "type": "string",
                        "const": "fs:allow-applog-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$APPLOG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-applog-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$APPLOG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-applog-recursive`",
                        "type": "string",
                        "const": "fs:allow-applog-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$APPLOG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-applog-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$APPLOG` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-applog`",
                        "type": "string",
                        "const": "fs:allow-applog-read",
                        "markdownDescription": "This allows non-recursive read access to the `$APPLOG` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-applog`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$APPLOG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-applog-recursive`",
                        "type": "string",
                        "const": "fs:allow-applog-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$APPLOG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-applog-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$APPLOG` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-applog`",
                        "type": "string",
                        "const": "fs:allow-applog-write",
                        "markdownDescription": "This allows non-recursive write access to the `$APPLOG` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-applog`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$APPLOG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-applog-recursive`",
                        "type": "string",
                        "const": "fs:allow-applog-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$APPLOG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-applog-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$AUDIO` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-audio-index`",
                        "type": "string",
                        "const": "fs:allow-audio-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$AUDIO` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-audio-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$AUDIO` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-audio-recursive`",
                        "type": "string",
                        "const": "fs:allow-audio-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$AUDIO` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-audio-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$AUDIO` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-audio`",
                        "type": "string",
                        "const": "fs:allow-audio-read",
                        "markdownDescription": "This allows non-recursive read access to the `$AUDIO` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-audio`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$AUDIO` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-audio-recursive`",
                        "type": "string",
                        "const": "fs:allow-audio-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$AUDIO` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-audio-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$AUDIO` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-audio`",
                        "type": "string",
                        "const": "fs:allow-audio-write",
                        "markdownDescription": "This allows non-recursive write access to the `$AUDIO` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-audio`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$AUDIO` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-audio-recursive`",
                        "type": "string",
                        "const": "fs:allow-audio-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$AUDIO` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-audio-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$CACHE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-cache-index`",
                        "type": "string",
                        "const": "fs:allow-cache-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$CACHE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-cache-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$CACHE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-cache-recursive`",
                        "type": "string",
                        "const": "fs:allow-cache-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$CACHE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-cache-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$CACHE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-cache`",
                        "type": "string",
                        "const": "fs:allow-cache-read",
                        "markdownDescription": "This allows non-recursive read access to the `$CACHE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-cache`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$CACHE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-cache-recursive`",
                        "type": "string",
                        "const": "fs:allow-cache-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$CACHE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-cache-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$CACHE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-cache`",
                        "type": "string",
                        "const": "fs:allow-cache-write",
                        "markdownDescription": "This allows non-recursive write access to the `$CACHE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-cache`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$CACHE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-cache-recursive`",
                        "type": "string",
                        "const": "fs:allow-cache-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$CACHE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-cache-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$CONFIG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-config-index`",
                        "type": "string",
                        "const": "fs:allow-config-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$CONFIG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-config-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$CONFIG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-config-recursive`",
                        "type": "string",
                        "const": "fs:allow-config-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$CONFIG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-config-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$CONFIG` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-config`",
                        "type": "string",
                        "const": "fs:allow-config-read",
                        "markdownDescription": "This allows non-recursive read access to the `$CONFIG` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-config`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$CONFIG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-config-recursive`",
                        "type": "string",
                        "const": "fs:allow-config-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$CONFIG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-config-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$CONFIG` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-config`",
                        "type": "string",
                        "const": "fs:allow-config-write",
                        "markdownDescription": "This allows non-recursive write access to the `$CONFIG` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-config`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$CONFIG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-config-recursive`",
                        "type": "string",
                        "const": "fs:allow-config-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$CONFIG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-config-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$DATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-data-index`",
                        "type": "string",
                        "const": "fs:allow-data-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$DATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-data-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$DATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-data-recursive`",
                        "type": "string",
                        "const": "fs:allow-data-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$DATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-data-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$DATA` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-data`",
                        "type": "string",
                        "const": "fs:allow-data-read",
                        "markdownDescription": "This allows non-recursive read access to the `$DATA` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-data`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$DATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-data-recursive`",
                        "type": "string",
                        "const": "fs:allow-data-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$DATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-data-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$DATA` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-data`",
                        "type": "string",
                        "const": "fs:allow-data-write",
                        "markdownDescription": "This allows non-recursive write access to the `$DATA` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-data`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$DATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-data-recursive`",
                        "type": "string",
                        "const": "fs:allow-data-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$DATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-data-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$DESKTOP` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-desktop-index`",
                        "type": "string",
                        "const": "fs:allow-desktop-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$DESKTOP` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-desktop-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$DESKTOP` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-desktop-recursive`",
                        "type": "string",
                        "const": "fs:allow-desktop-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$DESKTOP` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-desktop-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$DESKTOP` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-desktop`",
                        "type": "string",
                        "const": "fs:allow-desktop-read",
                        "markdownDescription": "This allows non-recursive read access to the `$DESKTOP` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-desktop`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$DESKTOP` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-desktop-recursive`",
                        "type": "string",
                        "const": "fs:allow-desktop-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$DESKTOP` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-desktop-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$DESKTOP` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-desktop`",
                        "type": "string",
                        "const": "fs:allow-desktop-write",
                        "markdownDescription": "This allows non-recursive write access to the `$DESKTOP` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-desktop`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$DESKTOP` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-desktop-recursive`",
                        "type": "string",
                        "const": "fs:allow-desktop-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$DESKTOP` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-desktop-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$DOCUMENT` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-document-index`",
                        "type": "string",
                        "const": "fs:allow-document-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$DOCUMENT` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-document-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$DOCUMENT` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-document-recursive`",
                        "type": "string",
                        "const": "fs:allow-document-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$DOCUMENT` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-document-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$DOCUMENT` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-document`",
                        "type": "string",
                        "const": "fs:allow-document-read",
                        "markdownDescription": "This allows non-recursive read access to the `$DOCUMENT` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-document`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$DOCUMENT` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-document-recursive`",
                        "type": "string",
                        "const": "fs:allow-document-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$DOCUMENT` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-document-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$DOCUMENT` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-document`",
                        "type": "string",
                        "const": "fs:allow-document-write",
                        "markdownDescription": "This allows non-recursive write access to the `$DOCUMENT` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-document`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$DOCUMENT` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-document-recursive`",
                        "type": "string",
                        "const": "fs:allow-document-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$DOCUMENT` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-document-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$DOWNLOAD` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-download-index`",
                        "type": "string",
                        "const": "fs:allow-download-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$DOWNLOAD` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-download-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$DOWNLOAD` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-download-recursive`",
                        "type": "string",
                        "const": "fs:allow-download-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$DOWNLOAD` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-download-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$DOWNLOAD` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-download`",
                        "type": "string",
                        "const": "fs:allow-download-read",
                        "markdownDescription": "This allows non-recursive read access to the `$DOWNLOAD` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-download`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$DOWNLOAD` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-download-recursive`",
                        "type": "string",
                        "const": "fs:allow-download-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$DOWNLOAD` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-download-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$DOWNLOAD` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-download`",
                        "type": "string",
                        "const": "fs:allow-download-write",
                        "markdownDescription": "This allows non-recursive write access to the `$DOWNLOAD` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-download`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$DOWNLOAD` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-download-recursive`",
                        "type": "string",
                        "const": "fs:allow-download-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$DOWNLOAD` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-download-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$EXE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-exe-index`",
                        "type": "string",
                        "const": "fs:allow-exe-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$EXE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-exe-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$EXE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-exe-recursive`",
                        "type": "string",
                        "const": "fs:allow-exe-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$EXE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-exe-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$EXE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-exe`",
                        "type": "string",
                        "const": "fs:allow-exe-read",
                        "markdownDescription": "This allows non-recursive read access to the `$EXE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-exe`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$EXE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-exe-recursive`",
                        "type": "string",
                        "const": "fs:allow-exe-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$EXE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-exe-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$EXE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-exe`",
                        "type": "string",
                        "const": "fs:allow-exe-write",
                        "markdownDescription": "This allows non-recursive write access to the `$EXE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-exe`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$EXE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-exe-recursive`",
                        "type": "string",
                        "const": "fs:allow-exe-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$EXE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-exe-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$FONT` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-font-index`",
                        "type": "string",
                        "const": "fs:allow-font-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$FONT` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-font-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$FONT` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-font-recursive`",
                        "type": "string",
                        "const": "fs:allow-font-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$FONT` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-font-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$FONT` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-font`",
                        "type": "string",
                        "const": "fs:allow-font-read",
                        "markdownDescription": "This allows non-recursive read access to the `$FONT` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-font`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$FONT` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-font-recursive`",
                        "type": "string",
                        "const": "fs:allow-font-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$FONT` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-font-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$FONT` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-font`",
                        "type": "string",
                        "const": "fs:allow-font-write",
                        "markdownDescription": "This allows non-recursive write access to the `$FONT` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-font`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$FONT` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-font-recursive`",
                        "type": "string",
                        "const": "fs:allow-font-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$FONT` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-font-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$HOME` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-home-index`",
                        "type": "string",
                        "const": "fs:allow-home-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$HOME` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-home-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$HOME` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-home-recursive`",
                        "type": "string",
                        "const": "fs:allow-home-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$HOME` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-home-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$HOME` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-home`",
                        "type": "string",
                        "const": "fs:allow-home-read",
                        "markdownDescription": "This allows non-recursive read access to the `$HOME` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-home`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$HOME` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-home-recursive`",
                        "type": "string",
                        "const": "fs:allow-home-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$HOME` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-home-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$HOME` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-home`",
                        "type": "string",
                        "const": "fs:allow-home-write",
                        "markdownDescription": "This allows non-recursive write access to the `$HOME` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-home`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$HOME` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-home-recursive`",
                        "type": "string",
                        "const": "fs:allow-home-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$HOME` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-home-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$LOCALDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-localdata-index`",
                        "type": "string",
                        "const": "fs:allow-localdata-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$LOCALDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-localdata-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$LOCALDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-localdata-recursive`",
                        "type": "string",
                        "const": "fs:allow-localdata-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$LOCALDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-localdata-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$LOCALDATA` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-localdata`",
                        "type": "string",
                        "const": "fs:allow-localdata-read",
                        "markdownDescription": "This allows non-recursive read access to the `$LOCALDATA` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-localdata`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$LOCALDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-localdata-recursive`",
                        "type": "string",
                        "const": "fs:allow-localdata-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$LOCALDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-localdata-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$LOCALDATA` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-localdata`",
                        "type": "string",
                        "const": "fs:allow-localdata-write",
                        "markdownDescription": "This allows non-recursive write access to the `$LOCALDATA` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-localdata`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$LOCALDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-localdata-recursive`",
                        "type": "string",
                        "const": "fs:allow-localdata-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$LOCALDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-localdata-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$LOG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-log-index`",
                        "type": "string",
                        "const": "fs:allow-log-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$LOG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-log-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$LOG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-log-recursive`",
                        "type": "string",
                        "const": "fs:allow-log-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$LOG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-log-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$LOG` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-log`",
                        "type": "string",
                        "const": "fs:allow-log-read",
                        "markdownDescription": "This allows non-recursive read access to the `$LOG` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-log`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$LOG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-log-recursive`",
                        "type": "string",
                        "const": "fs:allow-log-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$LOG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-log-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$LOG` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-log`",
                        "type": "string",
                        "const": "fs:allow-log-write",
                        "markdownDescription": "This allows non-recursive write access to the `$LOG` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-log`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$LOG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-log-recursive`",
                        "type": "string",
                        "const": "fs:allow-log-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$LOG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-log-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$PICTURE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-picture-index`",
                        "type": "string",
                        "const": "fs:allow-picture-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$PICTURE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-picture-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$PICTURE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-picture-recursive`",
                        "type": "string",
                        "const": "fs:allow-picture-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$PICTURE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-picture-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$PICTURE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-picture`",
                        "type": "string",
                        "const": "fs:allow-picture-read",
                        "markdownDescription": "This allows non-recursive read access to the `$PICTURE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-picture`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$PICTURE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-picture-recursive`",
                        "type": "string",
                        "const": "fs:allow-picture-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$PICTURE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-picture-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$PICTURE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-picture`",
                        "type": "string",
                        "const": "fs:allow-picture-write",
                        "markdownDescription": "This allows non-recursive write access to the `$PICTURE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-picture`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$PICTURE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-picture-recursive`",
                        "type": "string",
                        "const": "fs:allow-picture-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$PICTURE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-picture-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$PUBLIC` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-public-index`",
                        "type": "string",
                        "const": "fs:allow-public-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$PUBLIC` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-public-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$PUBLIC` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-public-recursive`",
                        "type": "string",
                        "const": "fs:allow-public-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$PUBLIC` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-public-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$PUBLIC` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-public`",
                        "type": "string",
                        "const": "fs:allow-public-read",
                        "markdownDescription": "This allows non-recursive read access to the `$PUBLIC` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-public`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$PUBLIC` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-public-recursive`",
                        "type": "string",
                        "const": "fs:allow-public-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$PUBLIC` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-public-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$PUBLIC` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-public`",
                        "type": "string",
                        "const": "fs:allow-public-write",
                        "markdownDescription": "This allows non-recursive write access to the `$PUBLIC` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-public`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$PUBLIC` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-public-recursive`",
                        "type": "string",
                        "const": "fs:allow-public-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$PUBLIC` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-public-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$RESOURCE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-resource-index`",
                        "type": "string",
                        "const": "fs:allow-resource-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$RESOURCE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-resource-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$RESOURCE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-resource-recursive`",
                        "type": "string",
                        "const": "fs:allow-resource-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$RESOURCE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-resource-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$RESOURCE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-resource`",
                        "type": "string",
                        "const": "fs:allow-resource-read",
                        "markdownDescription": "This allows non-recursive read access to the `$RESOURCE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-resource`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$RESOURCE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-resource-recursive`",
                        "type": "string",
                        "const": "fs:allow-resource-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$RESOURCE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-resource-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$RESOURCE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-resource`",
                        "type": "string",
                        "const": "fs:allow-resource-write",
                        "markdownDescription": "This allows non-recursive write access to the `$RESOURCE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-resource`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$RESOURCE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-resource-recursive`",
                        "type": "string",
                        "const": "fs:allow-resource-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$RESOURCE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-resource-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$RUNTIME` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-runtime-index`",
                        "type": "string",
                        "const": "fs:allow-runtime-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$RUNTIME` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-runtime-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$RUNTIME` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-runtime-recursive`",
                        "type": "string",
                        "const": "fs:allow-runtime-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$RUNTIME` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-runtime-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$RUNTIME` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-runtime`",
                        "type": "string",
                        "const": "fs:allow-runtime-read",
                        "markdownDescription": "This allows non-recursive read access to the `$RUNTIME` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-runtime`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$RUNTIME` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-runtime-recursive`",
                        "type": "string",
                        "const": "fs:allow-runtime-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$RUNTIME` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-runtime-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$RUNTIME` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-runtime`",
                        "type": "string",
                        "const": "fs:allow-runtime-write",
                        "markdownDescription": "This allows non-recursive write access to the `$RUNTIME` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-runtime`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$RUNTIME` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-runtime-recursive`",
                        "type": "string",
                        "const": "fs:allow-runtime-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$RUNTIME` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-runtime-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$TEMP` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-temp-index`",
                        "type": "string",
                        "const": "fs:allow-temp-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$TEMP` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-temp-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$TEMP` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-temp-recursive`",
                        "type": "string",
                        "const": "fs:allow-temp-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$TEMP` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-temp-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$TEMP` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-temp`",
                        "type": "string",
                        "const": "fs:allow-temp-read",
                        "markdownDescription": "This allows non-recursive read access to the `$TEMP` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-temp`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$TEMP` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-temp-recursive`",
                        "type": "string",
                        "const": "fs:allow-temp-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$TEMP` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-temp-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$TEMP` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-temp`",
                        "type": "string",
                        "const": "fs:allow-temp-write",
                        "markdownDescription": "This allows non-recursive write access to the `$TEMP` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-temp`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$TEMP` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-temp-recursive`",
                        "type": "string",
                        "const": "fs:allow-temp-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$TEMP` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-temp-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$TEMPLATE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-template-index`",
                        "type": "string",
                        "const": "fs:allow-template-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$TEMPLATE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-template-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$TEMPLATE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-template-recursive`",
                        "type": "string",
                        "const": "fs:allow-template-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$TEMPLATE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-template-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$TEMPLATE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-template`",
                        "type": "string",
                        "const": "fs:allow-template-read",
                        "markdownDescription": "This allows non-recursive read access to the `$TEMPLATE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-template`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$TEMPLATE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-template-recursive`",
                        "type": "string",
                        "const": "fs:allow-template-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$TEMPLATE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-template-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$TEMPLATE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-template`",
                        "type": "string",
                        "const": "fs:allow-template-write",
                        "markdownDescription": "This allows non-recursive write access to the `$TEMPLATE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-template`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$TEMPLATE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-template-recursive`",
                        "type": "string",
                        "const": "fs:allow-template-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$TEMPLATE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-template-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to metadata of the `$VIDEO` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-video-index`",
                        "type": "string",
                        "const": "fs:allow-video-meta",
                        "markdownDescription": "This allows non-recursive read access to metadata of the `$VIDEO` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-video-index`"
                      },
                      {
                        "description": "This allows full recursive read access to metadata of the `$VIDEO` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-video-recursive`",
                        "type": "string",
                        "const": "fs:allow-video-meta-recursive",
                        "markdownDescription": "This allows full recursive read access to metadata of the `$VIDEO` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-video-recursive`"
                      },
                      {
                        "description": "This allows non-recursive read access to the `$VIDEO` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-video`",
                        "type": "string",
                        "const": "fs:allow-video-read",
                        "markdownDescription": "This allows non-recursive read access to the `$VIDEO` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-video`"
                      },
                      {
                        "description": "This allows full recursive read access to the complete `$VIDEO` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-video-recursive`",
                        "type": "string",
                        "const": "fs:allow-video-read-recursive",
                        "markdownDescription": "This allows full recursive read access to the complete `$VIDEO` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-video-recursive`"
                      },
                      {
                        "description": "This allows non-recursive write access to the `$VIDEO` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-video`",
                        "type": "string",
                        "const": "fs:allow-video-write",
                        "markdownDescription": "This allows non-recursive write access to the `$VIDEO` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-video`"
                      },
                      {
                        "description": "This allows full recursive write access to the complete `$VIDEO` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-video-recursive`",
                        "type": "string",
                        "const": "fs:allow-video-write-recursive",
                        "markdownDescription": "This allows full recursive write access to the complete `$VIDEO` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-video-recursive`"
                      },
                      {
                        "description": "This denies access to dangerous Tauri relevant files and folders by default.\n#### This permission set includes:\n\n- `deny-webview-data-linux`\n- `deny-webview-data-windows`",
                        "type": "string",
                        "const": "fs:deny-default",
                        "markdownDescription": "This denies access to dangerous Tauri relevant files and folders by default.\n#### This permission set includes:\n\n- `deny-webview-data-linux`\n- `deny-webview-data-windows`"
                      },
                      {
                        "description": "Enables the copy_file command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-copy-file",
                        "markdownDescription": "Enables the copy_file command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the create command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-create",
                        "markdownDescription": "Enables the create command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the exists command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-exists",
                        "markdownDescription": "Enables the exists command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the fstat command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-fstat",
                        "markdownDescription": "Enables the fstat command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the ftruncate command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-ftruncate",
                        "markdownDescription": "Enables the ftruncate command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the lstat command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-lstat",
                        "markdownDescription": "Enables the lstat command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the mkdir command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-mkdir",
                        "markdownDescription": "Enables the mkdir command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the open command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-open",
                        "markdownDescription": "Enables the open command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the read command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-read",
                        "markdownDescription": "Enables the read command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the read_dir command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-read-dir",
                        "markdownDescription": "Enables the read_dir command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the read_file command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-read-file",
                        "markdownDescription": "Enables the read_file command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the read_text_file command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-read-text-file",
                        "markdownDescription": "Enables the read_text_file command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the read_text_file_lines command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-read-text-file-lines",
                        "markdownDescription": "Enables the read_text_file_lines command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the read_text_file_lines_next command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-read-text-file-lines-next",
                        "markdownDescription": "Enables the read_text_file_lines_next command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the remove command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-remove",
                        "markdownDescription": "Enables the remove command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the rename command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-rename",
                        "markdownDescription": "Enables the rename command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the seek command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-seek",
                        "markdownDescription": "Enables the seek command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the size command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-size",
                        "markdownDescription": "Enables the size command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the stat command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-stat",
                        "markdownDescription": "Enables the stat command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the truncate command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-truncate",
                        "markdownDescription": "Enables the truncate command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the unwatch command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-unwatch",
                        "markdownDescription": "Enables the unwatch command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the watch command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-watch",
                        "markdownDescription": "Enables the watch command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the write command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-write",
                        "markdownDescription": "Enables the write command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the write_file command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-write-file",
                        "markdownDescription": "Enables the write_file command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the write_text_file command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:allow-write-text-file",
                        "markdownDescription": "Enables the write_text_file command without any pre-configured scope."
                      },
                      {
                        "description": "This permissions allows to create the application specific directories.\n",
                        "type": "string",
                        "const": "fs:create-app-specific-dirs",
                        "markdownDescription": "This permissions allows to create the application specific directories.\n"
                      },
                      {
                        "description": "Denies the copy_file command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-copy-file",
                        "markdownDescription": "Denies the copy_file command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the create command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-create",
                        "markdownDescription": "Denies the create command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the exists command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-exists",
                        "markdownDescription": "Denies the exists command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the fstat command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-fstat",
                        "markdownDescription": "Denies the fstat command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the ftruncate command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-ftruncate",
                        "markdownDescription": "Denies the ftruncate command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the lstat command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-lstat",
                        "markdownDescription": "Denies the lstat command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the mkdir command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-mkdir",
                        "markdownDescription": "Denies the mkdir command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the open command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-open",
                        "markdownDescription": "Denies the open command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the read command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-read",
                        "markdownDescription": "Denies the read command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the read_dir command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-read-dir",
                        "markdownDescription": "Denies the read_dir command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the read_file command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-read-file",
                        "markdownDescription": "Denies the read_file command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the read_text_file command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-read-text-file",
                        "markdownDescription": "Denies the read_text_file command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the read_text_file_lines command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-read-text-file-lines",
                        "markdownDescription": "Denies the read_text_file_lines command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the read_text_file_lines_next command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-read-text-file-lines-next",
                        "markdownDescription": "Denies the read_text_file_lines_next command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the remove command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-remove",
                        "markdownDescription": "Denies the remove command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the rename command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-rename",
                        "markdownDescription": "Denies the rename command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the seek command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-seek",
                        "markdownDescription": "Denies the seek command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the size command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-size",
                        "markdownDescription": "Denies the size command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the stat command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-stat",
                        "markdownDescription": "Denies the stat command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the truncate command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-truncate",
                        "markdownDescription": "Denies the truncate command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the unwatch command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-unwatch",
                        "markdownDescription": "Denies the unwatch command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the watch command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-watch",
                        "markdownDescription": "Denies the watch command without any pre-configured scope."
                      },
                      {
                        "description": "This denies read access to the\n`$APPLOCALDATA` folder on linux as the webview data and configuration values are stored here.\nAllowing access can lead to sensitive information disclosure and should be well considered.",
                        "type": "string",
                        "const": "fs:deny-webview-data-linux",
                        "markdownDescription": "This denies read access to the\n`$APPLOCALDATA` folder on linux as the webview data and configuration values are stored here.\nAllowing access can lead to sensitive information disclosure and should be well considered."
                      },
                      {
                        "description": "This denies read access to the\n`$APPLOCALDATA/EBWebView` folder on windows as the webview data and configuration values are stored here.\nAllowing access can lead to sensitive information disclosure and should be well considered.",
                        "type": "string",
                        "const": "fs:deny-webview-data-windows",
                        "markdownDescription": "This denies read access to the\n`$APPLOCALDATA/EBWebView` folder on windows as the webview data and configuration values are stored here.\nAllowing access can lead to sensitive information disclosure and should be well considered."
                      },
                      {
                        "description": "Denies the write command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-write",
                        "markdownDescription": "Denies the write command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the write_file command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-write-file",
                        "markdownDescription": "Denies the write_file command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the write_text_file command without any pre-configured scope.",
                        "type": "string",
                        "const": "fs:deny-write-text-file",
                        "markdownDescription": "Denies the write_text_file command without any pre-configured scope."
                      },
                      {
                        "description": "This enables all read related commands without any pre-configured accessible paths.",
                        "type": "string",
                        "const": "fs:read-all",
                        "markdownDescription": "This enables all read related commands without any pre-configured accessible paths."
                      },
                      {
                        "description": "This permission allows recursive read functionality on the application\nspecific base directories. \n",
                        "type": "string",
                        "const": "fs:read-app-specific-dirs-recursive",
                        "markdownDescription": "This permission allows recursive read functionality on the application\nspecific base directories. \n"
                      },
                      {
                        "description": "This enables directory read and file metadata related commands without any pre-configured accessible paths.",
                        "type": "string",
                        "const": "fs:read-dirs",
                        "markdownDescription": "This enables directory read and file metadata related commands without any pre-configured accessible paths."
                      },
                      {
                        "description": "This enables file read related commands without any pre-configured accessible paths.",
                        "type": "string",
                        "const": "fs:read-files",
                        "markdownDescription": "This enables file read related commands without any pre-configured accessible paths."
                      },
                      {
                        "description": "This enables all index or metadata related commands without any pre-configured accessible paths.",
                        "type": "string",
                        "const": "fs:read-meta",
                        "markdownDescription": "This enables all index or metadata related commands without any pre-configured accessible paths."
                      },
                      {
                        "description": "An empty permission you can use to modify the global scope.",
                        "type": "string",
                        "const": "fs:scope",
                        "markdownDescription": "An empty permission you can use to modify the global scope."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the application folders.",
                        "type": "string",
                        "const": "fs:scope-app",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the application folders."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the application directories.",
                        "type": "string",
                        "const": "fs:scope-app-index",
                        "markdownDescription": "This scope permits to list all files and folders in the application directories."
                      },
                      {
                        "description": "This scope permits recursive access to the complete application folders, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-app-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete application folders, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$APPCACHE` folder.",
                        "type": "string",
                        "const": "fs:scope-appcache",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$APPCACHE` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$APPCACHE`folder.",
                        "type": "string",
                        "const": "fs:scope-appcache-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$APPCACHE`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$APPCACHE` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-appcache-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$APPCACHE` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$APPCONFIG` folder.",
                        "type": "string",
                        "const": "fs:scope-appconfig",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$APPCONFIG` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$APPCONFIG`folder.",
                        "type": "string",
                        "const": "fs:scope-appconfig-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$APPCONFIG`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$APPCONFIG` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-appconfig-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$APPCONFIG` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$APPDATA` folder.",
                        "type": "string",
                        "const": "fs:scope-appdata",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$APPDATA` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$APPDATA`folder.",
                        "type": "string",
                        "const": "fs:scope-appdata-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$APPDATA`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$APPDATA` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-appdata-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$APPDATA` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$APPLOCALDATA` folder.",
                        "type": "string",
                        "const": "fs:scope-applocaldata",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$APPLOCALDATA` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$APPLOCALDATA`folder.",
                        "type": "string",
                        "const": "fs:scope-applocaldata-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$APPLOCALDATA`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$APPLOCALDATA` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-applocaldata-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$APPLOCALDATA` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$APPLOG` folder.",
                        "type": "string",
                        "const": "fs:scope-applog",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$APPLOG` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$APPLOG`folder.",
                        "type": "string",
                        "const": "fs:scope-applog-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$APPLOG`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$APPLOG` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-applog-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$APPLOG` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$AUDIO` folder.",
                        "type": "string",
                        "const": "fs:scope-audio",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$AUDIO` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$AUDIO`folder.",
                        "type": "string",
                        "const": "fs:scope-audio-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$AUDIO`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$AUDIO` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-audio-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$AUDIO` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$CACHE` folder.",
                        "type": "string",
                        "const": "fs:scope-cache",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$CACHE` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$CACHE`folder.",
                        "type": "string",
                        "const": "fs:scope-cache-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$CACHE`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$CACHE` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-cache-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$CACHE` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$CONFIG` folder.",
                        "type": "string",
                        "const": "fs:scope-config",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$CONFIG` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$CONFIG`folder.",
                        "type": "string",
                        "const": "fs:scope-config-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$CONFIG`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$CONFIG` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-config-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$CONFIG` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$DATA` folder.",
                        "type": "string",
                        "const": "fs:scope-data",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$DATA` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$DATA`folder.",
                        "type": "string",
                        "const": "fs:scope-data-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$DATA`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$DATA` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-data-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$DATA` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$DESKTOP` folder.",
                        "type": "string",
                        "const": "fs:scope-desktop",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$DESKTOP` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$DESKTOP`folder.",
                        "type": "string",
                        "const": "fs:scope-desktop-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$DESKTOP`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$DESKTOP` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-desktop-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$DESKTOP` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$DOCUMENT` folder.",
                        "type": "string",
                        "const": "fs:scope-document",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$DOCUMENT` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$DOCUMENT`folder.",
                        "type": "string",
                        "const": "fs:scope-document-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$DOCUMENT`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$DOCUMENT` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-document-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$DOCUMENT` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$DOWNLOAD` folder.",
                        "type": "string",
                        "const": "fs:scope-download",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$DOWNLOAD` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$DOWNLOAD`folder.",
                        "type": "string",
                        "const": "fs:scope-download-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$DOWNLOAD`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$DOWNLOAD` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-download-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$DOWNLOAD` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$EXE` folder.",
                        "type": "string",
                        "const": "fs:scope-exe",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$EXE` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$EXE`folder.",
                        "type": "string",
                        "const": "fs:scope-exe-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$EXE`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$EXE` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-exe-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$EXE` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$FONT` folder.",
                        "type": "string",
                        "const": "fs:scope-font",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$FONT` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$FONT`folder.",
                        "type": "string",
                        "const": "fs:scope-font-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$FONT`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$FONT` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-font-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$FONT` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$HOME` folder.",
                        "type": "string",
                        "const": "fs:scope-home",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$HOME` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$HOME`folder.",
                        "type": "string",
                        "const": "fs:scope-home-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$HOME`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$HOME` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-home-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$HOME` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$LOCALDATA` folder.",
                        "type": "string",
                        "const": "fs:scope-localdata",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$LOCALDATA` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$LOCALDATA`folder.",
                        "type": "string",
                        "const": "fs:scope-localdata-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$LOCALDATA`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$LOCALDATA` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-localdata-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$LOCALDATA` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$LOG` folder.",
                        "type": "string",
                        "const": "fs:scope-log",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$LOG` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$LOG`folder.",
                        "type": "string",
                        "const": "fs:scope-log-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$LOG`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$LOG` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-log-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$LOG` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$PICTURE` folder.",
                        "type": "string",
                        "const": "fs:scope-picture",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$PICTURE` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$PICTURE`folder.",
                        "type": "string",
                        "const": "fs:scope-picture-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$PICTURE`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$PICTURE` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-picture-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$PICTURE` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$PUBLIC` folder.",
                        "type": "string",
                        "const": "fs:scope-public",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$PUBLIC` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$PUBLIC`folder.",
                        "type": "string",
                        "const": "fs:scope-public-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$PUBLIC`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$PUBLIC` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-public-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$PUBLIC` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$RESOURCE` folder.",
                        "type": "string",
                        "const": "fs:scope-resource",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$RESOURCE` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$RESOURCE`folder.",
                        "type": "string",
                        "const": "fs:scope-resource-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$RESOURCE`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$RESOURCE` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-resource-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$RESOURCE` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$RUNTIME` folder.",
                        "type": "string",
                        "const": "fs:scope-runtime",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$RUNTIME` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$RUNTIME`folder.",
                        "type": "string",
                        "const": "fs:scope-runtime-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$RUNTIME`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$RUNTIME` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-runtime-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$RUNTIME` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$TEMP` folder.",
                        "type": "string",
                        "const": "fs:scope-temp",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$TEMP` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$TEMP`folder.",
                        "type": "string",
                        "const": "fs:scope-temp-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$TEMP`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$TEMP` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-temp-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$TEMP` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$TEMPLATE` folder.",
                        "type": "string",
                        "const": "fs:scope-template",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$TEMPLATE` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$TEMPLATE`folder.",
                        "type": "string",
                        "const": "fs:scope-template-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$TEMPLATE`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$TEMPLATE` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-template-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$TEMPLATE` folder, including sub directories and files."
                      },
                      {
                        "description": "This scope permits access to all files and list content of top level directories in the `$VIDEO` folder.",
                        "type": "string",
                        "const": "fs:scope-video",
                        "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$VIDEO` folder."
                      },
                      {
                        "description": "This scope permits to list all files and folders in the `$VIDEO`folder.",
                        "type": "string",
                        "const": "fs:scope-video-index",
                        "markdownDescription": "This scope permits to list all files and folders in the `$VIDEO`folder."
                      },
                      {
                        "description": "This scope permits recursive access to the complete `$VIDEO` folder, including sub directories and files.",
                        "type": "string",
                        "const": "fs:scope-video-recursive",
                        "markdownDescription": "This scope permits recursive access to the complete `$VIDEO` folder, including sub directories and files."
                      },
                      {
                        "description": "This enables all write related commands without any pre-configured accessible paths.",
                        "type": "string",
                        "const": "fs:write-all",
                        "markdownDescription": "This enables all write related commands without any pre-configured accessible paths."
                      },
                      {
                        "description": "This enables all file write related commands without any pre-configured accessible paths.",
                        "type": "string",
                        "const": "fs:write-files",
                        "markdownDescription": "This enables all file write related commands without any pre-configured accessible paths."
                      }
                    ]
                  }
                }
              },
              "then": {
                "properties": {
                  "allow": {
                    "items": {
                      "title": "FsScopeEntry",
                      "description": "FS scope entry.",
                      "anyOf": [
                        {
                          "description": "A path that can be accessed by the webview when using the fs APIs. FS scope path pattern.\n\nThe pattern can start with a variable that resolves to a system base directory. The variables are: `$AUDIO`, `$CACHE`, `$CONFIG`, `$DATA`, `$LOCALDATA`, `$DESKTOP`, `$DOCUMENT`, `$DOWNLOAD`, `$EXE`, `$FONT`, `$HOME`, `$PICTURE`, `$PUBLIC`, `$RUNTIME`, `$TEMPLATE`, `$VIDEO`, `$RESOURCE`, `$APP`, `$LOG`, `$TEMP`, `$APPCONFIG`, `$APPDATA`, `$APPLOCALDATA`, `$APPCACHE`, `$APPLOG`.",
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "required": [
                            "path"
                          ],
                          "properties": {
                            "path": {
                              "description": "A path that can be accessed by the webview when using the fs APIs.\n\nThe pattern can start with a variable that resolves to a system base directory. The variables are: `$AUDIO`, `$CACHE`, `$CONFIG`, `$DATA`, `$LOCALDATA`, `$DESKTOP`, `$DOCUMENT`, `$DOWNLOAD`, `$EXE`, `$FONT`, `$HOME`, `$PICTURE`, `$PUBLIC`, `$RUNTIME`, `$TEMPLATE`, `$VIDEO`, `$RESOURCE`, `$APP`, `$LOG`, `$TEMP`, `$APPCONFIG`, `$APPDATA`, `$APPLOCALDATA`, `$APPCACHE`, `$APPLOG`.",
                              "type": "string"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "deny": {
                    "items": {
                      "title": "FsScopeEntry",
                      "description": "FS scope entry.",
                      "anyOf": [
                        {
                          "description": "A path that can be accessed by the webview when using the fs APIs. FS scope path pattern.\n\nThe pattern can start with a variable that resolves to a system base directory. The variables are: `$AUDIO`, `$CACHE`, `$CONFIG`, `$DATA`, `$LOCALDATA`, `$DESKTOP`, `$DOCUMENT`, `$DOWNLOAD`, `$EXE`, `$FONT`, `$HOME`, `$PICTURE`, `$PUBLIC`, `$RUNTIME`, `$TEMPLATE`, `$VIDEO`, `$RESOURCE`, `$APP`, `$LOG`, `$TEMP`, `$APPCONFIG`, `$APPDATA`, `$APPLOCALDATA`, `$APPCACHE`, `$APPLOG`.",
                          "type": "string"
                        },
                        {
                          "type": "object",
                          "required": [
                            "path"
                          ],
                          "properties": {
                            "path": {
                              "description": "A path that can be accessed by the webview when using the fs APIs.\n\nThe pattern can start with a variable that resolves to a system base directory. The variables are: `$AUDIO`, `$CACHE`, `$CONFIG`, `$DATA`, `$LOCALDATA`, `$DESKTOP`, `$DOCUMENT`, `$DOWNLOAD`, `$EXE`, `$FONT`, `$HOME`, `$PICTURE`, `$PUBLIC`, `$RUNTIME`, `$TEMPLATE`, `$VIDEO`, `$RESOURCE`, `$APP`, `$LOG`, `$TEMP`, `$APPCONFIG`, `$APPDATA`, `$APPLOCALDATA`, `$APPCACHE`, `$APPLOG`.",
                              "type": "string"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              "properties": {
                "identifier": {
                  "description": "Identifier of the permission or permission set.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Identifier"
                    }
                  ]
                }
              }
            },
            {
              "if": {
                "properties": {
                  "identifier": {
                    "anyOf": [
                      {
                        "description": "This permission set allows opening `mailto:`, `tel:`, `https://` and `http://` urls using their default application\nas well as reveal file in directories using default file explorer\n#### This default permission set includes:\n\n- `allow-open-url`\n- `allow-reveal-item-in-dir`\n- `allow-default-urls`",
                        "type": "string",
                        "const": "opener:default",
                        "markdownDescription": "This permission set allows opening `mailto:`, `tel:`, `https://` and `http://` urls using their default application\nas well as reveal file in directories using default file explorer\n#### This default permission set includes:\n\n- `allow-open-url`\n- `allow-reveal-item-in-dir`\n- `allow-default-urls`"
                      },
                      {
                        "description": "This enables opening `mailto:`, `tel:`, `https://` and `http://` urls using their default application.",
                        "type": "string",
                        "const": "opener:allow-default-urls",
                        "markdownDescription": "This enables opening `mailto:`, `tel:`, `https://` and `http://` urls using their default application."
                      },
                      {
                        "description": "Enables the open_path command without any pre-configured scope.",
                        "type": "string",
                        "const": "opener:allow-open-path",
                        "markdownDescription": "Enables the open_path command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the open_url command without any pre-configured scope.",
                        "type": "string",
                        "const": "opener:allow-open-url",
                        "markdownDescription": "Enables the open_url command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the reveal_item_in_dir command without any pre-configured scope.",
                        "type": "string",
                        "const": "opener:allow-reveal-item-in-dir",
                        "markdownDescription": "Enables the reveal_item_in_dir command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the open_path command without any pre-configured scope.",
                        "type": "string",
                        "const": "opener:deny-open-path",
                        "markdownDescription": "Denies the open_path command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the open_url command without any pre-configured scope.",
                        "type": "string",
                        "const": "opener:deny-open-url",
                        "markdownDescription": "Denies the open_url command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the reveal_item_in_dir command without any pre-configured scope.",
                        "type": "string",
                        "const": "opener:deny-reveal-item-in-dir",
                        "markdownDescription": "Denies the reveal_item_in_dir command without any pre-configured scope."
                      }
                    ]
                  }
                }
              },
              "then": {
                "properties": {
                  "allow": {
                    "items": {
                      "title": "OpenerScopeEntry",
                      "description": "Opener scope entry.",
                      "anyOf": [
                        {
                          "type": "object",
                          "required": [
                            "url"
                          ],
                          "properties": {
                            "app": {
                              "description": "An application to open this url with, for example: firefox.",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/Application"
                                }
                              ]
                            },
                            "url": {
                              "description": "A URL that can be opened by the webview when using the Opener APIs.\n\nWildcards can be used following the UNIX glob pattern.\n\nExamples:\n\n- \"https://*\" : allows all HTTPS origin\n\n- \"https://*.github.com/tauri-apps/tauri\": allows any subdomain of \"github.com\" with the \"tauri-apps/api\" path\n\n- \"https://myapi.service.com/users/*\": allows access to any URLs that begins with \"https://myapi.service.com/users/\"",
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": [
                            "path"
                          ],
                          "properties": {
                            "app": {
                              "description": "An application to open this path with, for example: xdg-open.",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/Application"
                                }
                              ]
                            },
                            "path": {
                              "description": "A path that can be opened by the webview when using the Opener APIs.\n\nThe pattern can start with a variable that resolves to a system base directory. The variables are: `$AUDIO`, `$CACHE`, `$CONFIG`, `$DATA`, `$LOCALDATA`, `$DESKTOP`, `$DOCUMENT`, `$DOWNLOAD`, `$EXE`, `$FONT`, `$HOME`, `$PICTURE`, `$PUBLIC`, `$RUNTIME`, `$TEMPLATE`, `$VIDEO`, `$RESOURCE`, `$APP`, `$LOG`, `$TEMP`, `$APPCONFIG`, `$APPDATA`, `$APPLOCALDATA`, `$APPCACHE`, `$APPLOG`.",
                              "type": "string"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "deny": {
                    "items": {
                      "title": "OpenerScopeEntry",
                      "description": "Opener scope entry.",
                      "anyOf": [
                        {
                          "type": "object",
                          "required": [
                            "url"
                          ],
                          "properties": {
                            "app": {
                              "description": "An application to open this url with, for example: firefox.",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/Application"
                                }
                              ]
                            },
                            "url": {
                              "description": "A URL that can be opened by the webview when using the Opener APIs.\n\nWildcards can be used following the UNIX glob pattern.\n\nExamples:\n\n- \"https://*\" : allows all HTTPS origin\n\n- \"https://*.github.com/tauri-apps/tauri\": allows any subdomain of \"github.com\" with the \"tauri-apps/api\" path\n\n- \"https://myapi.service.com/users/*\": allows access to any URLs that begins with \"https://myapi.service.com/users/\"",
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": [
                            "path"
                          ],
                          "properties": {
                            "app": {
                              "description": "An application to open this path with, for example: xdg-open.",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/Application"
                                }
                              ]
                            },
                            "path": {
                              "description": "A path that can be opened by the webview when using the Opener APIs.\n\nThe pattern can start with a variable that resolves to a system base directory. The variables are: `$AUDIO`, `$CACHE`, `$CONFIG`, `$DATA`, `$LOCALDATA`, `$DESKTOP`, `$DOCUMENT`, `$DOWNLOAD`, `$EXE`, `$FONT`, `$HOME`, `$PICTURE`, `$PUBLIC`, `$RUNTIME`, `$TEMPLATE`, `$VIDEO`, `$RESOURCE`, `$APP`, `$LOG`, `$TEMP`, `$APPCONFIG`, `$APPDATA`, `$APPLOCALDATA`, `$APPCACHE`, `$APPLOG`.",
                              "type": "string"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              "properties": {
                "identifier": {
                  "description": "Identifier of the permission or permission set.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Identifier"
                    }
                  ]
                }
              }
            },
            {
              "if": {
                "properties": {
                  "identifier": {
                    "anyOf": [
                      {
                        "description": "This permission set configures which\nshell functionality is exposed by default.\n\n#### Granted Permissions\n\nIt allows to use the `open` functionality with a reasonable\nscope pre-configured. It will allow opening `http(s)://`,\n`tel:` and `mailto:` links.\n\n#### This default permission set includes:\n\n- `allow-open`",
                        "type": "string",
                        "const": "shell:default",
                        "markdownDescription": "This permission set configures which\nshell functionality is exposed by default.\n\n#### Granted Permissions\n\nIt allows to use the `open` functionality with a reasonable\nscope pre-configured. It will allow opening `http(s)://`,\n`tel:` and `mailto:` links.\n\n#### This default permission set includes:\n\n- `allow-open`"
                      },
                      {
                        "description": "Enables the execute command without any pre-configured scope.",
                        "type": "string",
                        "const": "shell:allow-execute",
                        "markdownDescription": "Enables the execute command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the kill command without any pre-configured scope.",
                        "type": "string",
                        "const": "shell:allow-kill",
                        "markdownDescription": "Enables the kill command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the open command without any pre-configured scope.",
                        "type": "string",
                        "const": "shell:allow-open",
                        "markdownDescription": "Enables the open command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the spawn command without any pre-configured scope.",
                        "type": "string",
                        "const": "shell:allow-spawn",
                        "markdownDescription": "Enables the spawn command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the stdin_write command without any pre-configured scope.",
                        "type": "string",
                        "const": "shell:allow-stdin-write",
                        "markdownDescription": "Enables the stdin_write command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the execute command without any pre-configured scope.",
                        "type": "string",
                        "const": "shell:deny-execute",
                        "markdownDescription": "Denies the execute command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the kill command without any pre-configured scope.",
                        "type": "string",
                        "const": "shell:deny-kill",
                        "markdownDescription": "Denies the kill command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the open command without any pre-configured scope.",
                        "type": "string",
                        "const": "shell:deny-open",
                        "markdownDescription": "Denies the open command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the spawn command without any pre-configured scope.",
                        "type": "string",
                        "const": "shell:deny-spawn",
                        "markdownDescription": "Denies the spawn command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the stdin_write command without any pre-configured scope.",
                        "type": "string",
                        "const": "shell:deny-stdin-write",
                        "markdownDescription": "Denies the stdin_write command without any pre-configured scope."
                      }
                    ]
                  }
                }
              },
              "then": {
                "properties": {
                  "allow": {
                    "items": {
                      "title": "ShellScopeEntry",
                      "description": "Shell scope entry.",
                      "anyOf": [
                        {
                          "type": "object",
                          "required": [
                            "cmd",
                            "name"
                          ],
                          "properties": {
                            "args": {
                              "description": "The allowed arguments for the command execution.",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/ShellScopeEntryAllowedArgs"
                                }
                              ]
                            },
                            "cmd": {
                              "description": "The command name. It can start with a variable that resolves to a system base directory. The variables are: `$AUDIO`, `$CACHE`, `$CONFIG`, `$DATA`, `$LOCALDATA`, `$DESKTOP`, `$DOCUMENT`, `$DOWNLOAD`, `$EXE`, `$FONT`, `$HOME`, `$PICTURE`, `$PUBLIC`, `$RUNTIME`, `$TEMPLATE`, `$VIDEO`, `$RESOURCE`, `$LOG`, `$TEMP`, `$APPCONFIG`, `$APPDATA`, `$APPLOCALDATA`, `$APPCACHE`, `$APPLOG`.",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name for this allowed shell command configuration.\n\nThis name will be used inside of the webview API to call this command along with any specified arguments.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "required": [
                            "name",
                            "sidecar"
                          ],
                          "properties": {
                            "args": {
                              "description": "The allowed arguments for the command execution.",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/ShellScopeEntryAllowedArgs"
                                }
                              ]
                            },
                            "name": {
                              "description": "The name for this allowed shell command configuration.\n\nThis name will be used inside of the webview API to call this command along with any specified arguments.",
                              "type": "string"
                            },
                            "sidecar": {
                              "description": "If this command is a sidecar command.",
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        }
                      ]
                    }
                  },
                  "deny": {
                    "items": {
                      "title": "ShellScopeEntry",
                      "description": "Shell scope entry.",
                      "anyOf": [
                        {
                          "type": "object",
                          "required": [
                            "cmd",
                            "name"
                          ],
                          "properties": {
                            "args": {
                              "description": "The allowed arguments for the command execution.",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/ShellScopeEntryAllowedArgs"
                                }
                              ]
                            },
                            "cmd": {
                              "description": "The command name. It can start with a variable that resolves to a system base directory. The variables are: `$AUDIO`, `$CACHE`, `$CONFIG`, `$DATA`, `$LOCALDATA`, `$DESKTOP`, `$DOCUMENT`, `$DOWNLOAD`, `$EXE`, `$FONT`, `$HOME`, `$PICTURE`, `$PUBLIC`, `$RUNTIME`, `$TEMPLATE`, `$VIDEO`, `$RESOURCE`, `$LOG`, `$TEMP`, `$APPCONFIG`, `$APPDATA`, `$APPLOCALDATA`, `$APPCACHE`, `$APPLOG`.",
                              "type": "string"
                            },
                            "name": {
                              "description": "The name for this allowed shell command configuration.\n\nThis name will be used inside of the webview API to call this command along with any specified arguments.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        {
                          "type": "object",
                          "required": [
                            "name",
                            "sidecar"
                          ],
                          "properties": {
                            "args": {
                              "description": "The allowed arguments for the command execution.",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/ShellScopeEntryAllowedArgs"
                                }
                              ]
                            },
                            "name": {
                              "description": "The name for this allowed shell command configuration.\n\nThis name will be used inside of the webview API to call this command along with any specified arguments.",
                              "type": "string"
                            },
                            "sidecar": {
                              "description": "If this command is a sidecar command.",
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        }
                      ]
                    }
                  }
                }
              },
              "properties": {
                "identifier": {
                  "description": "Identifier of the permission or permission set.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Identifier"
                    }
                  ]
                }
              }
            },
            {
              "properties": {
                "identifier": {
                  "description": "Identifier of the permission or permission set.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Identifier"
                    }
                  ]
                },
                "allow": {
                  "description": "Data that defines what is allowed by the scope.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "$ref": "#/definitions/Value"
                  }
                },
                "deny": {
                  "description": "Data that defines what is denied by the scope. This should be prioritized by validation logic.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "$ref": "#/definitions/Value"
                  }
                }
              }
            }
          ],
          "required": [
            "identifier"
          ]
        }
      ]
    },
    "Identifier": {
      "description": "Permission identifier",
      "oneOf": [
        {
          "description": "Default core plugins set.\n#### This default permission set includes:\n\n- `core:path:default`\n- `core:event:default`\n- `core:window:default`\n- `core:webview:default`\n- `core:app:default`\n- `core:image:default`\n- `core:resources:default`\n- `core:menu:default`\n- `core:tray:default`",
          "type": "string",
          "const": "core:default",
          "markdownDescription": "Default core plugins set.\n#### This default permission set includes:\n\n- `core:path:default`\n- `core:event:default`\n- `core:window:default`\n- `core:webview:default`\n- `core:app:default`\n- `core:image:default`\n- `core:resources:default`\n- `core:menu:default`\n- `core:tray:default`"
        },
        {
          "description": "Default permissions for the plugin.\n#### This default permission set includes:\n\n- `allow-version`\n- `allow-name`\n- `allow-tauri-version`\n- `allow-identifier`",
          "type": "string",
          "const": "core:app:default",
          "markdownDescription": "Default permissions for the plugin.\n#### This default permission set includes:\n\n- `allow-version`\n- `allow-name`\n- `allow-tauri-version`\n- `allow-identifier`"
        },
        {
          "description": "Enables the app_hide command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-app-hide",
          "markdownDescription": "Enables the app_hide command without any pre-configured scope."
        },
        {
          "description": "Enables the app_show command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-app-show",
          "markdownDescription": "Enables the app_show command without any pre-configured scope."
        },
        {
          "description": "Enables the default_window_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-default-window-icon",
          "markdownDescription": "Enables the default_window_icon command without any pre-configured scope."
        },
        {
          "description": "Enables the fetch_data_store_identifiers command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-fetch-data-store-identifiers",
          "markdownDescription": "Enables the fetch_data_store_identifiers command without any pre-configured scope."
        },
        {
          "description": "Enables the identifier command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-identifier",
          "markdownDescription": "Enables the identifier command without any pre-configured scope."
        },
        {
          "description": "Enables the name command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-name",
          "markdownDescription": "Enables the name command without any pre-configured scope."
        },
        {
          "description": "Enables the remove_data_store command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-remove-data-store",
          "markdownDescription": "Enables the remove_data_store command without any pre-configured scope."
        },
        {
          "description": "Enables the set_app_theme command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-set-app-theme",
          "markdownDescription": "Enables the set_app_theme command without any pre-configured scope."
        },
        {
          "description": "Enables the set_dock_visibility command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-set-dock-visibility",
          "markdownDescription": "Enables the set_dock_visibility command without any pre-configured scope."
        },
        {
          "description": "Enables the tauri_version command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-tauri-version",
          "markdownDescription": "Enables the tauri_version command without any pre-configured scope."
        },
        {
          "description": "Enables the version command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-version",
          "markdownDescription": "Enables the version command without any pre-configured scope."
        },
        {
          "description": "Denies the app_hide command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-app-hide",
          "markdownDescription": "Denies the app_hide command without any pre-configured scope."
        },
        {
          "description": "Denies the app_show command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-app-show",
          "markdownDescription": "Denies the app_show command without any pre-configured scope."
        },
        {
          "description": "Denies the default_window_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-default-window-icon",
          "markdownDescription": "Denies the default_window_icon command without any pre-configured scope."
        },
        {
          "description": "Denies the fetch_data_store_identifiers command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-fetch-data-store-identifiers",
          "markdownDescription": "Denies the fetch_data_store_identifiers command without any pre-configured scope."
        },
        {
          "description": "Denies the identifier command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-identifier",
          "markdownDescription": "Denies the identifier command without any pre-configured scope."
        },
        {
          "description": "Denies the name command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-name",
          "markdownDescription": "Denies the name command without any pre-configured scope."
        },
        {
          "description": "Denies the remove_data_store command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-remove-data-store",
          "markdownDescription": "Denies the remove_data_store command without any pre-configured scope."
        },
        {
          "description": "Denies the set_app_theme command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-set-app-theme",
          "markdownDescription": "Denies the set_app_theme command without any pre-configured scope."
        },
        {
          "description": "Denies the set_dock_visibility command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-set-dock-visibility",
          "markdownDescription": "Denies the set_dock_visibility command without any pre-configured scope."
        },
        {
          "description": "Denies the tauri_version command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-tauri-version",
          "markdownDescription": "Denies the tauri_version command without any pre-configured scope."
        },
        {
          "description": "Denies the version command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-version",
          "markdownDescription": "Denies the version command without any pre-configured scope."
        },
        {
          "description": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-listen`\n- `allow-unlisten`\n- `allow-emit`\n- `allow-emit-to`",
          "type": "string",
          "const": "core:event:default",
          "markdownDescription": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-listen`\n- `allow-unlisten`\n- `allow-emit`\n- `allow-emit-to`"
        },
        {
          "description": "Enables the emit command without any pre-configured scope.",
          "type": "string",
          "const": "core:event:allow-emit",
          "markdownDescription": "Enables the emit command without any pre-configured scope."
        },
        {
          "description": "Enables the emit_to command without any pre-configured scope.",
          "type": "string",
          "const": "core:event:allow-emit-to",
          "markdownDescription": "Enables the emit_to command without any pre-configured scope."
        },
        {
          "description": "Enables the listen command without any pre-configured scope.",
          "type": "string",
          "const": "core:event:allow-listen",
          "markdownDescription": "Enables the listen command without any pre-configured scope."
        },
        {
          "description": "Enables the unlisten command without any pre-configured scope.",
          "type": "string",
          "const": "core:event:allow-unlisten",
          "markdownDescription": "Enables the unlisten command without any pre-configured scope."
        },
        {
          "description": "Denies the emit command without any pre-configured scope.",
          "type": "string",
          "const": "core:event:deny-emit",
          "markdownDescription": "Denies the emit command without any pre-configured scope."
        },
        {
          "description": "Denies the emit_to command without any pre-configured scope.",
          "type": "string",
          "const": "core:event:deny-emit-to",
          "markdownDescription": "Denies the emit_to command without any pre-configured scope."
        },
        {
          "description": "Denies the listen command without any pre-configured scope.",
          "type": "string",
          "const": "core:event:deny-listen",
          "markdownDescription": "Denies the listen command without any pre-configured scope."
        },
        {
          "description": "Denies the unlisten command without any pre-configured scope.",
          "type": "string",
          "const": "core:event:deny-unlisten",
          "markdownDescription": "Denies the unlisten command without any pre-configured scope."
        },
        {
          "description": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-new`\n- `allow-from-bytes`\n- `allow-from-path`\n- `allow-rgba`\n- `allow-size`",
          "type": "string",
          "const": "core:image:default",
          "markdownDescription": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-new`\n- `allow-from-bytes`\n- `allow-from-path`\n- `allow-rgba`\n- `allow-size`"
        },
        {
          "description": "Enables the from_bytes command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:allow-from-bytes",
          "markdownDescription": "Enables the from_bytes command without any pre-configured scope."
        },
        {
          "description": "Enables the from_path command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:allow-from-path",
          "markdownDescription": "Enables the from_path command without any pre-configured scope."
        },
        {
          "description": "Enables the new command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:allow-new",
          "markdownDescription": "Enables the new command without any pre-configured scope."
        },
        {
          "description": "Enables the rgba command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:allow-rgba",
          "markdownDescription": "Enables the rgba command without any pre-configured scope."
        },
        {
          "description": "Enables the size command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:allow-size",
          "markdownDescription": "Enables the size command without any pre-configured scope."
        },
        {
          "description": "Denies the from_bytes command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:deny-from-bytes",
          "markdownDescription": "Denies the from_bytes command without any pre-configured scope."
        },
        {
          "description": "Denies the from_path command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:deny-from-path",
          "markdownDescription": "Denies the from_path command without any pre-configured scope."
        },
        {
          "description": "Denies the new command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:deny-new",
          "markdownDescription": "Denies the new command without any pre-configured scope."
        },
        {
          "description": "Denies the rgba command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:deny-rgba",
          "markdownDescription": "Denies the rgba command without any pre-configured scope."
        },
        {
          "description": "Denies the size command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:deny-size",
          "markdownDescription": "Denies the size command without any pre-configured scope."
        },
        {
          "description": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-new`\n- `allow-append`\n- `allow-prepend`\n- `allow-insert`\n- `allow-remove`\n- `allow-remove-at`\n- `allow-items`\n- `allow-get`\n- `allow-popup`\n- `allow-create-default`\n- `allow-set-as-app-menu`\n- `allow-set-as-window-menu`\n- `allow-text`\n- `allow-set-text`\n- `allow-is-enabled`\n- `allow-set-enabled`\n- `allow-set-accelerator`\n- `allow-set-as-windows-menu-for-nsapp`\n- `allow-set-as-help-menu-for-nsapp`\n- `allow-is-checked`\n- `allow-set-checked`\n- `allow-set-icon`",
          "type": "string",
          "const": "core:menu:default",
          "markdownDescription": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-new`\n- `allow-append`\n- `allow-prepend`\n- `allow-insert`\n- `allow-remove`\n- `allow-remove-at`\n- `allow-items`\n- `allow-get`\n- `allow-popup`\n- `allow-create-default`\n- `allow-set-as-app-menu`\n- `allow-set-as-window-menu`\n- `allow-text`\n- `allow-set-text`\n- `allow-is-enabled`\n- `allow-set-enabled`\n- `allow-set-accelerator`\n- `allow-set-as-windows-menu-for-nsapp`\n- `allow-set-as-help-menu-for-nsapp`\n- `allow-is-checked`\n- `allow-set-checked`\n- `allow-set-icon`"
        },
        {
          "description": "Enables the append command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-append",
          "markdownDescription": "Enables the append command without any pre-configured scope."
        },
        {
          "description": "Enables the create_default command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-create-default",
          "markdownDescription": "Enables the create_default command without any pre-configured scope."
        },
        {
          "description": "Enables the get command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-get",
          "markdownDescription": "Enables the get command without any pre-configured scope."
        },
        {
          "description": "Enables the insert command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-insert",
          "markdownDescription": "Enables the insert command without any pre-configured scope."
        },
        {
          "description": "Enables the is_checked command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-is-checked",
          "markdownDescription": "Enables the is_checked command without any pre-configured scope."
        },
        {
          "description": "Enables the is_enabled command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-is-enabled",
          "markdownDescription": "Enables the is_enabled command without any pre-configured scope."
        },
        {
          "description": "Enables the items command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-items",
          "markdownDescription": "Enables the items command without any pre-configured scope."
        },
        {
          "description": "Enables the new command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-new",
          "markdownDescription": "Enables the new command without any pre-configured scope."
        },
        {
          "description": "Enables the popup command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-popup",
          "markdownDescription": "Enables the popup command without any pre-configured scope."
        },
        {
          "description": "Enables the prepend command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-prepend",
          "markdownDescription": "Enables the prepend command without any pre-configured scope."
        },
        {
          "description": "Enables the remove command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-remove",
          "markdownDescription": "Enables the remove command without any pre-configured scope."
        },
        {
          "description": "Enables the remove_at command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-remove-at",
          "markdownDescription": "Enables the remove_at command without any pre-configured scope."
        },
        {
          "description": "Enables the set_accelerator command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-set-accelerator",
          "markdownDescription": "Enables the set_accelerator command without any pre-configured scope."
        },
        {
          "description": "Enables the set_as_app_menu command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-set-as-app-menu",
          "markdownDescription": "Enables the set_as_app_menu command without any pre-configured scope."
        },
        {
          "description": "Enables the set_as_help_menu_for_nsapp command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-set-as-help-menu-for-nsapp",
          "markdownDescription": "Enables the set_as_help_menu_for_nsapp command without any pre-configured scope."
        },
        {
          "description": "Enables the set_as_window_menu command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-set-as-window-menu",
          "markdownDescription": "Enables the set_as_window_menu command without any pre-configured scope."
        },
        {
          "description": "Enables the set_as_windows_menu_for_nsapp command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-set-as-windows-menu-for-nsapp",
          "markdownDescription": "Enables the set_as_windows_menu_for_nsapp command without any pre-configured scope."
        },
        {
          "description": "Enables the set_checked command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-set-checked",
          "markdownDescription": "Enables the set_checked command without any pre-configured scope."
        },
        {
          "description": "Enables the set_enabled command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-set-enabled",
          "markdownDescription": "Enables the set_enabled command without any pre-configured scope."
        },
        {
          "description": "Enables the set_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-set-icon",
          "markdownDescription": "Enables the set_icon command without any pre-configured scope."
        },
        {
          "description": "Enables the set_text command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-set-text",
          "markdownDescription": "Enables the set_text command without any pre-configured scope."
        },
        {
          "description": "Enables the text command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-text",
          "markdownDescription": "Enables the text command without any pre-configured scope."
        },
        {
          "description": "Denies the append command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-append",
          "markdownDescription": "Denies the append command without any pre-configured scope."
        },
        {
          "description": "Denies the create_default command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-create-default",
          "markdownDescription": "Denies the create_default command without any pre-configured scope."
        },
        {
          "description": "Denies the get command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-get",
          "markdownDescription": "Denies the get command without any pre-configured scope."
        },
        {
          "description": "Denies the insert command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-insert",
          "markdownDescription": "Denies the insert command without any pre-configured scope."
        },
        {
          "description": "Denies the is_checked command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-is-checked",
          "markdownDescription": "Denies the is_checked command without any pre-configured scope."
        },
        {
          "description": "Denies the is_enabled command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-is-enabled",
          "markdownDescription": "Denies the is_enabled command without any pre-configured scope."
        },
        {
          "description": "Denies the items command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-items",
          "markdownDescription": "Denies the items command without any pre-configured scope."
        },
        {
          "description": "Denies the new command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-new",
          "markdownDescription": "Denies the new command without any pre-configured scope."
        },
        {
          "description": "Denies the popup command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-popup",
          "markdownDescription": "Denies the popup command without any pre-configured scope."
        },
        {
          "description": "Denies the prepend command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-prepend",
          "markdownDescription": "Denies the prepend command without any pre-configured scope."
        },
        {
          "description": "Denies the remove command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-remove",
          "markdownDescription": "Denies the remove command without any pre-configured scope."
        },
        {
          "description": "Denies the remove_at command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-remove-at",
          "markdownDescription": "Denies the remove_at command without any pre-configured scope."
        },
        {
          "description": "Denies the set_accelerator command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-set-accelerator",
          "markdownDescription": "Denies the set_accelerator command without any pre-configured scope."
        },
        {
          "description": "Denies the set_as_app_menu command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-set-as-app-menu",
          "markdownDescription": "Denies the set_as_app_menu command without any pre-configured scope."
        },
        {
          "description": "Denies the set_as_help_menu_for_nsapp command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-set-as-help-menu-for-nsapp",
          "markdownDescription": "Denies the set_as_help_menu_for_nsapp command without any pre-configured scope."
        },
        {
          "description": "Denies the set_as_window_menu command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-set-as-window-menu",
          "markdownDescription": "Denies the set_as_window_menu command without any pre-configured scope."
        },
        {
          "description": "Denies the set_as_windows_menu_for_nsapp command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-set-as-windows-menu-for-nsapp",
          "markdownDescription": "Denies the set_as_windows_menu_for_nsapp command without any pre-configured scope."
        },
        {
          "description": "Denies the set_checked command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-set-checked",
          "markdownDescription": "Denies the set_checked command without any pre-configured scope."
        },
        {
          "description": "Denies the set_enabled command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-set-enabled",
          "markdownDescription": "Denies the set_enabled command without any pre-configured scope."
        },
        {
          "description": "Denies the set_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-set-icon",
          "markdownDescription": "Denies the set_icon command without any pre-configured scope."
        },
        {
          "description": "Denies the set_text command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-set-text",
          "markdownDescription": "Denies the set_text command without any pre-configured scope."
        },
        {
          "description": "Denies the text command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-text",
          "markdownDescription": "Denies the text command without any pre-configured scope."
        },
        {
          "description": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-resolve-directory`\n- `allow-resolve`\n- `allow-normalize`\n- `allow-join`\n- `allow-dirname`\n- `allow-extname`\n- `allow-basename`\n- `allow-is-absolute`",
          "type": "string",
          "const": "core:path:default",
          "markdownDescription": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-resolve-directory`\n- `allow-resolve`\n- `allow-normalize`\n- `allow-join`\n- `allow-dirname`\n- `allow-extname`\n- `allow-basename`\n- `allow-is-absolute`"
        },
        {
          "description": "Enables the basename command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:allow-basename",
          "markdownDescription": "Enables the basename command without any pre-configured scope."
        },
        {
          "description": "Enables the dirname command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:allow-dirname",
          "markdownDescription": "Enables the dirname command without any pre-configured scope."
        },
        {
          "description": "Enables the extname command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:allow-extname",
          "markdownDescription": "Enables the extname command without any pre-configured scope."
        },
        {
          "description": "Enables the is_absolute command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:allow-is-absolute",
          "markdownDescription": "Enables the is_absolute command without any pre-configured scope."
        },
        {
          "description": "Enables the join command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:allow-join",
          "markdownDescription": "Enables the join command without any pre-configured scope."
        },
        {
          "description": "Enables the normalize command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:allow-normalize",
          "markdownDescription": "Enables the normalize command without any pre-configured scope."
        },
        {
          "description": "Enables the resolve command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:allow-resolve",
          "markdownDescription": "Enables the resolve command without any pre-configured scope."
        },
        {
          "description": "Enables the resolve_directory command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:allow-resolve-directory",
          "markdownDescription": "Enables the resolve_directory command without any pre-configured scope."
        },
        {
          "description": "Denies the basename command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:deny-basename",
          "markdownDescription": "Denies the basename command without any pre-configured scope."
        },
        {
          "description": "Denies the dirname command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:deny-dirname",
          "markdownDescription": "Denies the dirname command without any pre-configured scope."
        },
        {
          "description": "Denies the extname command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:deny-extname",
          "markdownDescription": "Denies the extname command without any pre-configured scope."
        },
        {
          "description": "Denies the is_absolute command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:deny-is-absolute",
          "markdownDescription": "Denies the is_absolute command without any pre-configured scope."
        },
        {
          "description": "Denies the join command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:deny-join",
          "markdownDescription": "Denies the join command without any pre-configured scope."
        },
        {
          "description": "Denies the normalize command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:deny-normalize",
          "markdownDescription": "Denies the normalize command without any pre-configured scope."
        },
        {
          "description": "Denies the resolve command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:deny-resolve",
          "markdownDescription": "Denies the resolve command without any pre-configured scope."
        },
        {
          "description": "Denies the resolve_directory command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:deny-resolve-directory",
          "markdownDescription": "Denies the resolve_directory command without any pre-configured scope."
        },
        {
          "description": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-close`",
          "type": "string",
          "const": "core:resources:default",
          "markdownDescription": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-close`"
        },
        {
          "description": "Enables the close command without any pre-configured scope.",
          "type": "string",
          "const": "core:resources:allow-close",
          "markdownDescription": "Enables the close command without any pre-configured scope."
        },
        {
          "description": "Denies the close command without any pre-configured scope.",
          "type": "string",
          "const": "core:resources:deny-close",
          "markdownDescription": "Denies the close command without any pre-configured scope."
        },
        {
          "description": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-new`\n- `allow-get-by-id`\n- `allow-remove-by-id`\n- `allow-set-icon`\n- `allow-set-menu`\n- `allow-set-tooltip`\n- `allow-set-title`\n- `allow-set-visible`\n- `allow-set-temp-dir-path`\n- `allow-set-icon-as-template`\n- `allow-set-show-menu-on-left-click`",
          "type": "string",
          "const": "core:tray:default",
          "markdownDescription": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-new`\n- `allow-get-by-id`\n- `allow-remove-by-id`\n- `allow-set-icon`\n- `allow-set-menu`\n- `allow-set-tooltip`\n- `allow-set-title`\n- `allow-set-visible`\n- `allow-set-temp-dir-path`\n- `allow-set-icon-as-template`\n- `allow-set-show-menu-on-left-click`"
        },
        {
          "description": "Enables the get_by_id command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-get-by-id",
          "markdownDescription": "Enables the get_by_id command without any pre-configured scope."
        },
        {
          "description": "Enables the new command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-new",
          "markdownDescription": "Enables the new command without any pre-configured scope."
        },
        {
          "description": "Enables the remove_by_id command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-remove-by-id",
          "markdownDescription": "Enables the remove_by_id command without any pre-configured scope."
        },
        {
          "description": "Enables the set_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-set-icon",
          "markdownDescription": "Enables the set_icon command without any pre-configured scope."
        },
        {
          "description": "Enables the set_icon_as_template command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-set-icon-as-template",
          "markdownDescription": "Enables the set_icon_as_template command without any pre-configured scope."
        },
        {
          "description": "Enables the set_menu command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-set-menu",
          "markdownDescription": "Enables the set_menu command without any pre-configured scope."
        },
        {
          "description": "Enables the set_show_menu_on_left_click command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-set-show-menu-on-left-click",
          "markdownDescription": "Enables the set_show_menu_on_left_click command without any pre-configured scope."
        },
        {
          "description": "Enables the set_temp_dir_path command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-set-temp-dir-path",
          "markdownDescription": "Enables the set_temp_dir_path command without any pre-configured scope."
        },
        {
          "description": "Enables the set_title command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-set-title",
          "markdownDescription": "Enables the set_title command without any pre-configured scope."
        },
        {
          "description": "Enables the set_tooltip command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-set-tooltip",
          "markdownDescription": "Enables the set_tooltip command without any pre-configured scope."
        },
        {
          "description": "Enables the set_visible command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-set-visible",
          "markdownDescription": "Enables the set_visible command without any pre-configured scope."
        },
        {
          "description": "Denies the get_by_id command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-get-by-id",
          "markdownDescription": "Denies the get_by_id command without any pre-configured scope."
        },
        {
          "description": "Denies the new command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-new",
          "markdownDescription": "Denies the new command without any pre-configured scope."
        },
        {
          "description": "Denies the remove_by_id command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-remove-by-id",
          "markdownDescription": "Denies the remove_by_id command without any pre-configured scope."
        },
        {
          "description": "Denies the set_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-set-icon",
          "markdownDescription": "Denies the set_icon command without any pre-configured scope."
        },
        {
          "description": "Denies the set_icon_as_template command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-set-icon-as-template",
          "markdownDescription": "Denies the set_icon_as_template command without any pre-configured scope."
        },
        {
          "description": "Denies the set_menu command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-set-menu",
          "markdownDescription": "Denies the set_menu command without any pre-configured scope."
        },
        {
          "description": "Denies the set_show_menu_on_left_click command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-set-show-menu-on-left-click",
          "markdownDescription": "Denies the set_show_menu_on_left_click command without any pre-configured scope."
        },
        {
          "description": "Denies the set_temp_dir_path command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-set-temp-dir-path",
          "markdownDescription": "Denies the set_temp_dir_path command without any pre-configured scope."
        },
        {
          "description": "Denies the set_title command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-set-title",
          "markdownDescription": "Denies the set_title command without any pre-configured scope."
        },
        {
          "description": "Denies the set_tooltip command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-set-tooltip",
          "markdownDescription": "Denies the set_tooltip command without any pre-configured scope."
        },
        {
          "description": "Denies the set_visible command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-set-visible",
          "markdownDescription": "Denies the set_visible command without any pre-configured scope."
        },
        {
          "description": "Default permissions for the plugin.\n#### This default permission set includes:\n\n- `allow-get-all-webviews`\n- `allow-webview-position`\n- `allow-webview-size`\n- `allow-internal-toggle-devtools`",
          "type": "string",
          "const": "core:webview:default",
          "markdownDescription": "Default permissions for the plugin.\n#### This default permission set includes:\n\n- `allow-get-all-webviews`\n- `allow-webview-position`\n- `allow-webview-size`\n- `allow-internal-toggle-devtools`"
        },
        {
          "description": "Enables the clear_all_browsing_data command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-clear-all-browsing-data",
          "markdownDescription": "Enables the clear_all_browsing_data command without any pre-configured scope."
        },
        {
          "description": "Enables the create_webview command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-create-webview",
          "markdownDescription": "Enables the create_webview command without any pre-configured scope."
        },
        {
          "description": "Enables the create_webview_window command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-create-webview-window",
          "markdownDescription": "Enables the create_webview_window command without any pre-configured scope."
        },
        {
          "description": "Enables the get_all_webviews command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-get-all-webviews",
          "markdownDescription": "Enables the get_all_webviews command without any pre-configured scope."
        },
        {
          "description": "Enables the internal_toggle_devtools command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-internal-toggle-devtools",
          "markdownDescription": "Enables the internal_toggle_devtools command without any pre-configured scope."
        },
        {
          "description": "Enables the print command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-print",
          "markdownDescription": "Enables the print command without any pre-configured scope."
        },
        {
          "description": "Enables the reparent command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-reparent",
          "markdownDescription": "Enables the reparent command without any pre-configured scope."
        },
        {
          "description": "Enables the set_webview_background_color command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-set-webview-background-color",
          "markdownDescription": "Enables the set_webview_background_color command without any pre-configured scope."
        },
        {
          "description": "Enables the set_webview_focus command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-set-webview-focus",
          "markdownDescription": "Enables the set_webview_focus command without any pre-configured scope."
        },
        {
          "description": "Enables the set_webview_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-set-webview-position",
          "markdownDescription": "Enables the set_webview_position command without any pre-configured scope."
        },
        {
          "description": "Enables the set_webview_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-set-webview-size",
          "markdownDescription": "Enables the set_webview_size command without any pre-configured scope."
        },
        {
          "description": "Enables the set_webview_zoom command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-set-webview-zoom",
          "markdownDescription": "Enables the set_webview_zoom command without any pre-configured scope."
        },
        {
          "description": "Enables the webview_close command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-webview-close",
          "markdownDescription": "Enables the webview_close command without any pre-configured scope."
        },
        {
          "description": "Enables the webview_hide command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-webview-hide",
          "markdownDescription": "Enables the webview_hide command without any pre-configured scope."
        },
        {
          "description": "Enables the webview_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-webview-position",
          "markdownDescription": "Enables the webview_position command without any pre-configured scope."
        },
        {
          "description": "Enables the webview_show command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-webview-show",
          "markdownDescription": "Enables the webview_show command without any pre-configured scope."
        },
        {
          "description": "Enables the webview_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-webview-size",
          "markdownDescription": "Enables the webview_size command without any pre-configured scope."
        },
        {
          "description": "Denies the clear_all_browsing_data command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-clear-all-browsing-data",
          "markdownDescription": "Denies the clear_all_browsing_data command without any pre-configured scope."
        },
        {
          "description": "Denies the create_webview command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-create-webview",
          "markdownDescription": "Denies the create_webview command without any pre-configured scope."
        },
        {
          "description": "Denies the create_webview_window command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-create-webview-window",
          "markdownDescription": "Denies the create_webview_window command without any pre-configured scope."
        },
        {
          "description": "Denies the get_all_webviews command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-get-all-webviews",
          "markdownDescription": "Denies the get_all_webviews command without any pre-configured scope."
        },
        {
          "description": "Denies the internal_toggle_devtools command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-internal-toggle-devtools",
          "markdownDescription": "Denies the internal_toggle_devtools command without any pre-configured scope."
        },
        {
          "description": "Denies the print command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-print",
          "markdownDescription": "Denies the print command without any pre-configured scope."
        },
        {
          "description": "Denies the reparent command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-reparent",
          "markdownDescription": "Denies the reparent command without any pre-configured scope."
        },
        {
          "description": "Denies the set_webview_background_color command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-set-webview-background-color",
          "markdownDescription": "Denies the set_webview_background_color command without any pre-configured scope."
        },
        {
          "description": "Denies the set_webview_focus command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-set-webview-focus",
          "markdownDescription": "Denies the set_webview_focus command without any pre-configured scope."
        },
        {
          "description": "Denies the set_webview_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-set-webview-position",
          "markdownDescription": "Denies the set_webview_position command without any pre-configured scope."
        },
        {
          "description": "Denies the set_webview_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-set-webview-size",
          "markdownDescription": "Denies the set_webview_size command without any pre-configured scope."
        },
        {
          "description": "Denies the set_webview_zoom command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-set-webview-zoom",
          "markdownDescription": "Denies the set_webview_zoom command without any pre-configured scope."
        },
        {
          "description": "Denies the webview_close command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-webview-close",
          "markdownDescription": "Denies the webview_close command without any pre-configured scope."
        },
        {
          "description": "Denies the webview_hide command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-webview-hide",
          "markdownDescription": "Denies the webview_hide command without any pre-configured scope."
        },
        {
          "description": "Denies the webview_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-webview-position",
          "markdownDescription": "Denies the webview_position command without any pre-configured scope."
        },
        {
          "description": "Denies the webview_show command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-webview-show",
          "markdownDescription": "Denies the webview_show command without any pre-configured scope."
        },
        {
          "description": "Denies the webview_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-webview-size",
          "markdownDescription": "Denies the webview_size command without any pre-configured scope."
        },
        {
          "description": "Default permissions for the plugin.\n#### This default permission set includes:\n\n- `allow-get-all-windows`\n- `allow-scale-factor`\n- `allow-inner-position`\n- `allow-outer-position`\n- `allow-inner-size`\n- `allow-outer-size`\n- `allow-is-fullscreen`\n- `allow-is-minimized`\n- `allow-is-maximized`\n- `allow-is-focused`\n- `allow-is-decorated`\n- `allow-is-resizable`\n- `allow-is-maximizable`\n- `allow-is-minimizable`\n- `allow-is-closable`\n- `allow-is-visible`\n- `allow-is-enabled`\n- `allow-title`\n- `allow-current-monitor`\n- `allow-primary-monitor`\n- `allow-monitor-from-point`\n- `allow-available-monitors`\n- `allow-cursor-position`\n- `allow-theme`\n- `allow-is-always-on-top`\n- `allow-internal-toggle-maximize`",
          "type": "string",
          "const": "core:window:default",
          "markdownDescription": "Default permissions for the plugin.\n#### This default permission set includes:\n\n- `allow-get-all-windows`\n- `allow-scale-factor`\n- `allow-inner-position`\n- `allow-outer-position`\n- `allow-inner-size`\n- `allow-outer-size`\n- `allow-is-fullscreen`\n- `allow-is-minimized`\n- `allow-is-maximized`\n- `allow-is-focused`\n- `allow-is-decorated`\n- `allow-is-resizable`\n- `allow-is-maximizable`\n- `allow-is-minimizable`\n- `allow-is-closable`\n- `allow-is-visible`\n- `allow-is-enabled`\n- `allow-title`\n- `allow-current-monitor`\n- `allow-primary-monitor`\n- `allow-monitor-from-point`\n- `allow-available-monitors`\n- `allow-cursor-position`\n- `allow-theme`\n- `allow-is-always-on-top`\n- `allow-internal-toggle-maximize`"
        },
        {
          "description": "Enables the available_monitors command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-available-monitors",
          "markdownDescription": "Enables the available_monitors command without any pre-configured scope."
        },
        {
          "description": "Enables the center command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-center",
          "markdownDescription": "Enables the center command without any pre-configured scope."
        },
        {
          "description": "Enables the close command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-close",
          "markdownDescription": "Enables the close command without any pre-configured scope."
        },
        {
          "description": "Enables the create command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-create",
          "markdownDescription": "Enables the create command without any pre-configured scope."
        },
        {
          "description": "Enables the current_monitor command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-current-monitor",
          "markdownDescription": "Enables the current_monitor command without any pre-configured scope."
        },
        {
          "description": "Enables the cursor_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-cursor-position",
          "markdownDescription": "Enables the cursor_position command without any pre-configured scope."
        },
        {
          "description": "Enables the destroy command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-destroy",
          "markdownDescription": "Enables the destroy command without any pre-configured scope."
        },
        {
          "description": "Enables the get_all_windows command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-get-all-windows",
          "markdownDescription": "Enables the get_all_windows command without any pre-configured scope."
        },
        {
          "description": "Enables the hide command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-hide",
          "markdownDescription": "Enables the hide command without any pre-configured scope."
        },
        {
          "description": "Enables the inner_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-inner-position",
          "markdownDescription": "Enables the inner_position command without any pre-configured scope."
        },
        {
          "description": "Enables the inner_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-inner-size",
          "markdownDescription": "Enables the inner_size command without any pre-configured scope."
        },
        {
          "description": "Enables the internal_toggle_maximize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-internal-toggle-maximize",
          "markdownDescription": "Enables the internal_toggle_maximize command without any pre-configured scope."
        },
        {
          "description": "Enables the is_always_on_top command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-always-on-top",
          "markdownDescription": "Enables the is_always_on_top command without any pre-configured scope."
        },
        {
          "description": "Enables the is_closable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-closable",
          "markdownDescription": "Enables the is_closable command without any pre-configured scope."
        },
        {
          "description": "Enables the is_decorated command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-decorated",
          "markdownDescription": "Enables the is_decorated command without any pre-configured scope."
        },
        {
          "description": "Enables the is_enabled command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-enabled",
          "markdownDescription": "Enables the is_enabled command without any pre-configured scope."
        },
        {
          "description": "Enables the is_focused command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-focused",
          "markdownDescription": "Enables the is_focused command without any pre-configured scope."
        },
        {
          "description": "Enables the is_fullscreen command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-fullscreen",
          "markdownDescription": "Enables the is_fullscreen command without any pre-configured scope."
        },
        {
          "description": "Enables the is_maximizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-maximizable",
          "markdownDescription": "Enables the is_maximizable command without any pre-configured scope."
        },
        {
          "description": "Enables the is_maximized command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-maximized",
          "markdownDescription": "Enables the is_maximized command without any pre-configured scope."
        },
        {
          "description": "Enables the is_minimizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-minimizable",
          "markdownDescription": "Enables the is_minimizable command without any pre-configured scope."
        },
        {
          "description": "Enables the is_minimized command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-minimized",
          "markdownDescription": "Enables the is_minimized command without any pre-configured scope."
        },
        {
          "description": "Enables the is_resizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-resizable",
          "markdownDescription": "Enables the is_resizable command without any pre-configured scope."
        },
        {
          "description": "Enables the is_visible command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-visible",
          "markdownDescription": "Enables the is_visible command without any pre-configured scope."
        },
        {
          "description": "Enables the maximize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-maximize",
          "markdownDescription": "Enables the maximize command without any pre-configured scope."
        },
        {
          "description": "Enables the minimize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-minimize",
          "markdownDescription": "Enables the minimize command without any pre-configured scope."
        },
        {
          "description": "Enables the monitor_from_point command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-monitor-from-point",
          "markdownDescription": "Enables the monitor_from_point command without any pre-configured scope."
        },
        {
          "description": "Enables the outer_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-outer-position",
          "markdownDescription": "Enables the outer_position command without any pre-configured scope."
        },
        {
          "description": "Enables the outer_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-outer-size",
          "markdownDescription": "Enables the outer_size command without any pre-configured scope."
        },
        {
          "description": "Enables the primary_monitor command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-primary-monitor",
          "markdownDescription": "Enables the primary_monitor command without any pre-configured scope."
        },
        {
          "description": "Enables the request_user_attention command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-request-user-attention",
          "markdownDescription": "Enables the request_user_attention command without any pre-configured scope."
        },
        {
          "description": "Enables the scale_factor command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-scale-factor",
          "markdownDescription": "Enables the scale_factor command without any pre-configured scope."
        },
        {
          "description": "Enables the set_always_on_bottom command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-always-on-bottom",
          "markdownDescription": "Enables the set_always_on_bottom command without any pre-configured scope."
        },
        {
          "description": "Enables the set_always_on_top command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-always-on-top",
          "markdownDescription": "Enables the set_always_on_top command without any pre-configured scope."
        },
        {
          "description": "Enables the set_background_color command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-background-color",
          "markdownDescription": "Enables the set_background_color command without any pre-configured scope."
        },
        {
          "description": "Enables the set_badge_count command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-badge-count",
          "markdownDescription": "Enables the set_badge_count command without any pre-configured scope."
        },
        {
          "description": "Enables the set_badge_label command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-badge-label",
          "markdownDescription": "Enables the set_badge_label command without any pre-configured scope."
        },
        {
          "description": "Enables the set_closable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-closable",
          "markdownDescription": "Enables the set_closable command without any pre-configured scope."
        },
        {
          "description": "Enables the set_content_protected command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-content-protected",
          "markdownDescription": "Enables the set_content_protected command without any pre-configured scope."
        },
        {
          "description": "Enables the set_cursor_grab command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-cursor-grab",
          "markdownDescription": "Enables the set_cursor_grab command without any pre-configured scope."
        },
        {
          "description": "Enables the set_cursor_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-cursor-icon",
          "markdownDescription": "Enables the set_cursor_icon command without any pre-configured scope."
        },
        {
          "description": "Enables the set_cursor_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-cursor-position",
          "markdownDescription": "Enables the set_cursor_position command without any pre-configured scope."
        },
        {
          "description": "Enables the set_cursor_visible command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-cursor-visible",
          "markdownDescription": "Enables the set_cursor_visible command without any pre-configured scope."
        },
        {
          "description": "Enables the set_decorations command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-decorations",
          "markdownDescription": "Enables the set_decorations command without any pre-configured scope."
        },
        {
          "description": "Enables the set_effects command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-effects",
          "markdownDescription": "Enables the set_effects command without any pre-configured scope."
        },
        {
          "description": "Enables the set_enabled command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-enabled",
          "markdownDescription": "Enables the set_enabled command without any pre-configured scope."
        },
        {
          "description": "Enables the set_focus command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-focus",
          "markdownDescription": "Enables the set_focus command without any pre-configured scope."
        },
        {
          "description": "Enables the set_fullscreen command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-fullscreen",
          "markdownDescription": "Enables the set_fullscreen command without any pre-configured scope."
        },
        {
          "description": "Enables the set_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-icon",
          "markdownDescription": "Enables the set_icon command without any pre-configured scope."
        },
        {
          "description": "Enables the set_ignore_cursor_events command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-ignore-cursor-events",
          "markdownDescription": "Enables the set_ignore_cursor_events command without any pre-configured scope."
        },
        {
          "description": "Enables the set_max_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-max-size",
          "markdownDescription": "Enables the set_max_size command without any pre-configured scope."
        },
        {
          "description": "Enables the set_maximizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-maximizable",
          "markdownDescription": "Enables the set_maximizable command without any pre-configured scope."
        },
        {
          "description": "Enables the set_min_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-min-size",
          "markdownDescription": "Enables the set_min_size command without any pre-configured scope."
        },
        {
          "description": "Enables the set_minimizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-minimizable",
          "markdownDescription": "Enables the set_minimizable command without any pre-configured scope."
        },
        {
          "description": "Enables the set_overlay_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-overlay-icon",
          "markdownDescription": "Enables the set_overlay_icon command without any pre-configured scope."
        },
        {
          "description": "Enables the set_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-position",
          "markdownDescription": "Enables the set_position command without any pre-configured scope."
        },
        {
          "description": "Enables the set_progress_bar command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-progress-bar",
          "markdownDescription": "Enables the set_progress_bar command without any pre-configured scope."
        },
        {
          "description": "Enables the set_resizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-resizable",
          "markdownDescription": "Enables the set_resizable command without any pre-configured scope."
        },
        {
          "description": "Enables the set_shadow command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-shadow",
          "markdownDescription": "Enables the set_shadow command without any pre-configured scope."
        },
        {
          "description": "Enables the set_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-size",
          "markdownDescription": "Enables the set_size command without any pre-configured scope."
        },
        {
          "description": "Enables the set_size_constraints command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-size-constraints",
          "markdownDescription": "Enables the set_size_constraints command without any pre-configured scope."
        },
        {
          "description": "Enables the set_skip_taskbar command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-skip-taskbar",
          "markdownDescription": "Enables the set_skip_taskbar command without any pre-configured scope."
        },
        {
          "description": "Enables the set_theme command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-theme",
          "markdownDescription": "Enables the set_theme command without any pre-configured scope."
        },
        {
          "description": "Enables the set_title command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-title",
          "markdownDescription": "Enables the set_title command without any pre-configured scope."
        },
        {
          "description": "Enables the set_title_bar_style command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-title-bar-style",
          "markdownDescription": "Enables the set_title_bar_style command without any pre-configured scope."
        },
        {
          "description": "Enables the set_visible_on_all_workspaces command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-visible-on-all-workspaces",
          "markdownDescription": "Enables the set_visible_on_all_workspaces command without any pre-configured scope."
        },
        {
          "description": "Enables the show command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-show",
          "markdownDescription": "Enables the show command without any pre-configured scope."
        },
        {
          "description": "Enables the start_dragging command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-start-dragging",
          "markdownDescription": "Enables the start_dragging command without any pre-configured scope."
        },
        {
          "description": "Enables the start_resize_dragging command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-start-resize-dragging",
          "markdownDescription": "Enables the start_resize_dragging command without any pre-configured scope."
        },
        {
          "description": "Enables the theme command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-theme",
          "markdownDescription": "Enables the theme command without any pre-configured scope."
        },
        {
          "description": "Enables the title command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-title",
          "markdownDescription": "Enables the title command without any pre-configured scope."
        },
        {
          "description": "Enables the toggle_maximize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-toggle-maximize",
          "markdownDescription": "Enables the toggle_maximize command without any pre-configured scope."
        },
        {
          "description": "Enables the unmaximize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-unmaximize",
          "markdownDescription": "Enables the unmaximize command without any pre-configured scope."
        },
        {
          "description": "Enables the unminimize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-unminimize",
          "markdownDescription": "Enables the unminimize command without any pre-configured scope."
        },
        {
          "description": "Denies the available_monitors command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-available-monitors",
          "markdownDescription": "Denies the available_monitors command without any pre-configured scope."
        },
        {
          "description": "Denies the center command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-center",
          "markdownDescription": "Denies the center command without any pre-configured scope."
        },
        {
          "description": "Denies the close command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-close",
          "markdownDescription": "Denies the close command without any pre-configured scope."
        },
        {
          "description": "Denies the create command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-create",
          "markdownDescription": "Denies the create command without any pre-configured scope."
        },
        {
          "description": "Denies the current_monitor command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-current-monitor",
          "markdownDescription": "Denies the current_monitor command without any pre-configured scope."
        },
        {
          "description": "Denies the cursor_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-cursor-position",
          "markdownDescription": "Denies the cursor_position command without any pre-configured scope."
        },
        {
          "description": "Denies the destroy command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-destroy",
          "markdownDescription": "Denies the destroy command without any pre-configured scope."
        },
        {
          "description": "Denies the get_all_windows command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-get-all-windows",
          "markdownDescription": "Denies the get_all_windows command without any pre-configured scope."
        },
        {
          "description": "Denies the hide command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-hide",
          "markdownDescription": "Denies the hide command without any pre-configured scope."
        },
        {
          "description": "Denies the inner_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-inner-position",
          "markdownDescription": "Denies the inner_position command without any pre-configured scope."
        },
        {
          "description": "Denies the inner_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-inner-size",
          "markdownDescription": "Denies the inner_size command without any pre-configured scope."
        },
        {
          "description": "Denies the internal_toggle_maximize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-internal-toggle-maximize",
          "markdownDescription": "Denies the internal_toggle_maximize command without any pre-configured scope."
        },
        {
          "description": "Denies the is_always_on_top command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-always-on-top",
          "markdownDescription": "Denies the is_always_on_top command without any pre-configured scope."
        },
        {
          "description": "Denies the is_closable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-closable",
          "markdownDescription": "Denies the is_closable command without any pre-configured scope."
        },
        {
          "description": "Denies the is_decorated command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-decorated",
          "markdownDescription": "Denies the is_decorated command without any pre-configured scope."
        },
        {
          "description": "Denies the is_enabled command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-enabled",
          "markdownDescription": "Denies the is_enabled command without any pre-configured scope."
        },
        {
          "description": "Denies the is_focused command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-focused",
          "markdownDescription": "Denies the is_focused command without any pre-configured scope."
        },
        {
          "description": "Denies the is_fullscreen command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-fullscreen",
          "markdownDescription": "Denies the is_fullscreen command without any pre-configured scope."
        },
        {
          "description": "Denies the is_maximizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-maximizable",
          "markdownDescription": "Denies the is_maximizable command without any pre-configured scope."
        },
        {
          "description": "Denies the is_maximized command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-maximized",
          "markdownDescription": "Denies the is_maximized command without any pre-configured scope."
        },
        {
          "description": "Denies the is_minimizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-minimizable",
          "markdownDescription": "Denies the is_minimizable command without any pre-configured scope."
        },
        {
          "description": "Denies the is_minimized command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-minimized",
          "markdownDescription": "Denies the is_minimized command without any pre-configured scope."
        },
        {
          "description": "Denies the is_resizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-resizable",
          "markdownDescription": "Denies the is_resizable command without any pre-configured scope."
        },
        {
          "description": "Denies the is_visible command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-visible",
          "markdownDescription": "Denies the is_visible command without any pre-configured scope."
        },
        {
          "description": "Denies the maximize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-maximize",
          "markdownDescription": "Denies the maximize command without any pre-configured scope."
        },
        {
          "description": "Denies the minimize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-minimize",
          "markdownDescription": "Denies the minimize command without any pre-configured scope."
        },
        {
          "description": "Denies the monitor_from_point command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-monitor-from-point",
          "markdownDescription": "Denies the monitor_from_point command without any pre-configured scope."
        },
        {
          "description": "Denies the outer_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-outer-position",
          "markdownDescription": "Denies the outer_position command without any pre-configured scope."
        },
        {
          "description": "Denies the outer_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-outer-size",
          "markdownDescription": "Denies the outer_size command without any pre-configured scope."
        },
        {
          "description": "Denies the primary_monitor command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-primary-monitor",
          "markdownDescription": "Denies the primary_monitor command without any pre-configured scope."
        },
        {
          "description": "Denies the request_user_attention command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-request-user-attention",
          "markdownDescription": "Denies the request_user_attention command without any pre-configured scope."
        },
        {
          "description": "Denies the scale_factor command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-scale-factor",
          "markdownDescription": "Denies the scale_factor command without any pre-configured scope."
        },
        {
          "description": "Denies the set_always_on_bottom command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-always-on-bottom",
          "markdownDescription": "Denies the set_always_on_bottom command without any pre-configured scope."
        },
        {
          "description": "Denies the set_always_on_top command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-always-on-top",
          "markdownDescription": "Denies the set_always_on_top command without any pre-configured scope."
        },
        {
          "description": "Denies the set_background_color command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-background-color",
          "markdownDescription": "Denies the set_background_color command without any pre-configured scope."
        },
        {
          "description": "Denies the set_badge_count command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-badge-count",
          "markdownDescription": "Denies the set_badge_count command without any pre-configured scope."
        },
        {
          "description": "Denies the set_badge_label command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-badge-label",
          "markdownDescription": "Denies the set_badge_label command without any pre-configured scope."
        },
        {
          "description": "Denies the set_closable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-closable",
          "markdownDescription": "Denies the set_closable command without any pre-configured scope."
        },
        {
          "description": "Denies the set_content_protected command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-content-protected",
          "markdownDescription": "Denies the set_content_protected command without any pre-configured scope."
        },
        {
          "description": "Denies the set_cursor_grab command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-cursor-grab",
          "markdownDescription": "Denies the set_cursor_grab command without any pre-configured scope."
        },
        {
          "description": "Denies the set_cursor_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-cursor-icon",
          "markdownDescription": "Denies the set_cursor_icon command without any pre-configured scope."
        },
        {
          "description": "Denies the set_cursor_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-cursor-position",
          "markdownDescription": "Denies the set_cursor_position command without any pre-configured scope."
        },
        {
          "description": "Denies the set_cursor_visible command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-cursor-visible",
          "markdownDescription": "Denies the set_cursor_visible command without any pre-configured scope."
        },
        {
          "description": "Denies the set_decorations command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-decorations",
          "markdownDescription": "Denies the set_decorations command without any pre-configured scope."
        },
        {
          "description": "Denies the set_effects command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-effects",
          "markdownDescription": "Denies the set_effects command without any pre-configured scope."
        },
        {
          "description": "Denies the set_enabled command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-enabled",
          "markdownDescription": "Denies the set_enabled command without any pre-configured scope."
        },
        {
          "description": "Denies the set_focus command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-focus",
          "markdownDescription": "Denies the set_focus command without any pre-configured scope."
        },
        {
          "description": "Denies the set_fullscreen command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-fullscreen",
          "markdownDescription": "Denies the set_fullscreen command without any pre-configured scope."
        },
        {
          "description": "Denies the set_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-icon",
          "markdownDescription": "Denies the set_icon command without any pre-configured scope."
        },
        {
          "description": "Denies the set_ignore_cursor_events command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-ignore-cursor-events",
          "markdownDescription": "Denies the set_ignore_cursor_events command without any pre-configured scope."
        },
        {
          "description": "Denies the set_max_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-max-size",
          "markdownDescription": "Denies the set_max_size command without any pre-configured scope."
        },
        {
          "description": "Denies the set_maximizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-maximizable",
          "markdownDescription": "Denies the set_maximizable command without any pre-configured scope."
        },
        {
          "description": "Denies the set_min_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-min-size",
          "markdownDescription": "Denies the set_min_size command without any pre-configured scope."
        },
        {
          "description": "Denies the set_minimizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-minimizable",
          "markdownDescription": "Denies the set_minimizable command without any pre-configured scope."
        },
        {
          "description": "Denies the set_overlay_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-overlay-icon",
          "markdownDescription": "Denies the set_overlay_icon command without any pre-configured scope."
        },
        {
          "description": "Denies the set_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-position",
          "markdownDescription": "Denies the set_position command without any pre-configured scope."
        },
        {
          "description": "Denies the set_progress_bar command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-progress-bar",
          "markdownDescription": "Denies the set_progress_bar command without any pre-configured scope."
        },
        {
          "description": "Denies the set_resizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-resizable",
          "markdownDescription": "Denies the set_resizable command without any pre-configured scope."
        },
        {
          "description": "Denies the set_shadow command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-shadow",
          "markdownDescription": "Denies the set_shadow command without any pre-configured scope."
        },
        {
          "description": "Denies the set_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-size",
          "markdownDescription": "Denies the set_size command without any pre-configured scope."
        },
        {
          "description": "Denies the set_size_constraints command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-size-constraints",
          "markdownDescription": "Denies the set_size_constraints command without any pre-configured scope."
        },
        {
          "description": "Denies the set_skip_taskbar command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-skip-taskbar",
          "markdownDescription": "Denies the set_skip_taskbar command without any pre-configured scope."
        },
        {
          "description": "Denies the set_theme command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-theme",
          "markdownDescription": "Denies the set_theme command without any pre-configured scope."
        },
        {
          "description": "Denies the set_title command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-title",
          "markdownDescription": "Denies the set_title command without any pre-configured scope."
        },
        {
          "description": "Denies the set_title_bar_style command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-title-bar-style",
          "markdownDescription": "Denies the set_title_bar_style command without any pre-configured scope."
        },
        {
          "description": "Denies the set_visible_on_all_workspaces command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-visible-on-all-workspaces",
          "markdownDescription": "Denies the set_visible_on_all_workspaces command without any pre-configured scope."
        },
        {
          "description": "Denies the show command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-show",
          "markdownDescription": "Denies the show command without any pre-configured scope."
        },
        {
          "description": "Denies the start_dragging command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-start-dragging",
          "markdownDescription": "Denies the start_dragging command without any pre-configured scope."
        },
        {
          "description": "Denies the start_resize_dragging command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-start-resize-dragging",
          "markdownDescription": "Denies the start_resize_dragging command without any pre-configured scope."
        },
        {
          "description": "Denies the theme command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-theme",
          "markdownDescription": "Denies the theme command without any pre-configured scope."
        },
        {
          "description": "Denies the title command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-title",
          "markdownDescription": "Denies the title command without any pre-configured scope."
        },
        {
          "description": "Denies the toggle_maximize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-toggle-maximize",
          "markdownDescription": "Denies the toggle_maximize command without any pre-configured scope."
        },
        {
          "description": "Denies the unmaximize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-unmaximize",
          "markdownDescription": "Denies the unmaximize command without any pre-configured scope."
        },
        {
          "description": "Denies the unminimize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-unminimize",
          "markdownDescription": "Denies the unminimize command without any pre-configured scope."
        },
        {
          "description": "This set of permissions describes the what kind of\nfile system access the `fs` plugin has enabled or denied by default.\n\n#### Granted Permissions\n\nThis default permission set enables read access to the\napplication specific directories (AppConfig, AppData, AppLocalData, AppCache,\nAppLog) and all files and sub directories created in it.\nThe location of these directories depends on the operating system,\nwhere the application is run.\n\nIn general these directories need to be manually created\nby the application at runtime, before accessing files or folders\nin it is possible.\n\nTherefore, it is also allowed to create all of these folders via\nthe `mkdir` command.\n\n#### Denied Permissions\n\nThis default permission set prevents access to critical components\nof the Tauri application by default.\nOn Windows the webview data folder access is denied.\n\n#### This default permission set includes:\n\n- `create-app-specific-dirs`\n- `read-app-specific-dirs-recursive`\n- `deny-default`",
          "type": "string",
          "const": "fs:default",
          "markdownDescription": "This set of permissions describes the what kind of\nfile system access the `fs` plugin has enabled or denied by default.\n\n#### Granted Permissions\n\nThis default permission set enables read access to the\napplication specific directories (AppConfig, AppData, AppLocalData, AppCache,\nAppLog) and all files and sub directories created in it.\nThe location of these directories depends on the operating system,\nwhere the application is run.\n\nIn general these directories need to be manually created\nby the application at runtime, before accessing files or folders\nin it is possible.\n\nTherefore, it is also allowed to create all of these folders via\nthe `mkdir` command.\n\n#### Denied Permissions\n\nThis default permission set prevents access to critical components\nof the Tauri application by default.\nOn Windows the webview data folder access is denied.\n\n#### This default permission set includes:\n\n- `create-app-specific-dirs`\n- `read-app-specific-dirs-recursive`\n- `deny-default`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the application folders, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-app-index`",
          "type": "string",
          "const": "fs:allow-app-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the application folders, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-app-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the application folders, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-app-recursive`",
          "type": "string",
          "const": "fs:allow-app-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the application folders, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-app-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the application folders.\n#### This permission set includes:\n\n- `read-all`\n- `scope-app`",
          "type": "string",
          "const": "fs:allow-app-read",
          "markdownDescription": "This allows non-recursive read access to the application folders.\n#### This permission set includes:\n\n- `read-all`\n- `scope-app`"
        },
        {
          "description": "This allows full recursive read access to the complete application folders, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-app-recursive`",
          "type": "string",
          "const": "fs:allow-app-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete application folders, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-app-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the application folders.\n#### This permission set includes:\n\n- `write-all`\n- `scope-app`",
          "type": "string",
          "const": "fs:allow-app-write",
          "markdownDescription": "This allows non-recursive write access to the application folders.\n#### This permission set includes:\n\n- `write-all`\n- `scope-app`"
        },
        {
          "description": "This allows full recursive write access to the complete application folders, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-app-recursive`",
          "type": "string",
          "const": "fs:allow-app-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete application folders, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-app-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$APPCACHE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appcache-index`",
          "type": "string",
          "const": "fs:allow-appcache-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$APPCACHE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appcache-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$APPCACHE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appcache-recursive`",
          "type": "string",
          "const": "fs:allow-appcache-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$APPCACHE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appcache-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$APPCACHE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appcache`",
          "type": "string",
          "const": "fs:allow-appcache-read",
          "markdownDescription": "This allows non-recursive read access to the `$APPCACHE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appcache`"
        },
        {
          "description": "This allows full recursive read access to the complete `$APPCACHE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appcache-recursive`",
          "type": "string",
          "const": "fs:allow-appcache-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$APPCACHE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appcache-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$APPCACHE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appcache`",
          "type": "string",
          "const": "fs:allow-appcache-write",
          "markdownDescription": "This allows non-recursive write access to the `$APPCACHE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appcache`"
        },
        {
          "description": "This allows full recursive write access to the complete `$APPCACHE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appcache-recursive`",
          "type": "string",
          "const": "fs:allow-appcache-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$APPCACHE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appcache-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$APPCONFIG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appconfig-index`",
          "type": "string",
          "const": "fs:allow-appconfig-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$APPCONFIG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appconfig-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$APPCONFIG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appconfig-recursive`",
          "type": "string",
          "const": "fs:allow-appconfig-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$APPCONFIG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appconfig-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$APPCONFIG` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appconfig`",
          "type": "string",
          "const": "fs:allow-appconfig-read",
          "markdownDescription": "This allows non-recursive read access to the `$APPCONFIG` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appconfig`"
        },
        {
          "description": "This allows full recursive read access to the complete `$APPCONFIG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appconfig-recursive`",
          "type": "string",
          "const": "fs:allow-appconfig-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$APPCONFIG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appconfig-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$APPCONFIG` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appconfig`",
          "type": "string",
          "const": "fs:allow-appconfig-write",
          "markdownDescription": "This allows non-recursive write access to the `$APPCONFIG` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appconfig`"
        },
        {
          "description": "This allows full recursive write access to the complete `$APPCONFIG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appconfig-recursive`",
          "type": "string",
          "const": "fs:allow-appconfig-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$APPCONFIG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appconfig-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$APPDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appdata-index`",
          "type": "string",
          "const": "fs:allow-appdata-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$APPDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appdata-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$APPDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appdata-recursive`",
          "type": "string",
          "const": "fs:allow-appdata-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$APPDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-appdata-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$APPDATA` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appdata`",
          "type": "string",
          "const": "fs:allow-appdata-read",
          "markdownDescription": "This allows non-recursive read access to the `$APPDATA` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appdata`"
        },
        {
          "description": "This allows full recursive read access to the complete `$APPDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appdata-recursive`",
          "type": "string",
          "const": "fs:allow-appdata-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$APPDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-appdata-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$APPDATA` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appdata`",
          "type": "string",
          "const": "fs:allow-appdata-write",
          "markdownDescription": "This allows non-recursive write access to the `$APPDATA` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appdata`"
        },
        {
          "description": "This allows full recursive write access to the complete `$APPDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appdata-recursive`",
          "type": "string",
          "const": "fs:allow-appdata-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$APPDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-appdata-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$APPLOCALDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-applocaldata-index`",
          "type": "string",
          "const": "fs:allow-applocaldata-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$APPLOCALDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-applocaldata-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$APPLOCALDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-applocaldata-recursive`",
          "type": "string",
          "const": "fs:allow-applocaldata-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$APPLOCALDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-applocaldata-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$APPLOCALDATA` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-applocaldata`",
          "type": "string",
          "const": "fs:allow-applocaldata-read",
          "markdownDescription": "This allows non-recursive read access to the `$APPLOCALDATA` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-applocaldata`"
        },
        {
          "description": "This allows full recursive read access to the complete `$APPLOCALDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-applocaldata-recursive`",
          "type": "string",
          "const": "fs:allow-applocaldata-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$APPLOCALDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-applocaldata-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$APPLOCALDATA` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-applocaldata`",
          "type": "string",
          "const": "fs:allow-applocaldata-write",
          "markdownDescription": "This allows non-recursive write access to the `$APPLOCALDATA` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-applocaldata`"
        },
        {
          "description": "This allows full recursive write access to the complete `$APPLOCALDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-applocaldata-recursive`",
          "type": "string",
          "const": "fs:allow-applocaldata-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$APPLOCALDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-applocaldata-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$APPLOG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-applog-index`",
          "type": "string",
          "const": "fs:allow-applog-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$APPLOG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-applog-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$APPLOG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-applog-recursive`",
          "type": "string",
          "const": "fs:allow-applog-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$APPLOG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-applog-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$APPLOG` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-applog`",
          "type": "string",
          "const": "fs:allow-applog-read",
          "markdownDescription": "This allows non-recursive read access to the `$APPLOG` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-applog`"
        },
        {
          "description": "This allows full recursive read access to the complete `$APPLOG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-applog-recursive`",
          "type": "string",
          "const": "fs:allow-applog-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$APPLOG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-applog-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$APPLOG` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-applog`",
          "type": "string",
          "const": "fs:allow-applog-write",
          "markdownDescription": "This allows non-recursive write access to the `$APPLOG` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-applog`"
        },
        {
          "description": "This allows full recursive write access to the complete `$APPLOG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-applog-recursive`",
          "type": "string",
          "const": "fs:allow-applog-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$APPLOG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-applog-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$AUDIO` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-audio-index`",
          "type": "string",
          "const": "fs:allow-audio-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$AUDIO` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-audio-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$AUDIO` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-audio-recursive`",
          "type": "string",
          "const": "fs:allow-audio-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$AUDIO` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-audio-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$AUDIO` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-audio`",
          "type": "string",
          "const": "fs:allow-audio-read",
          "markdownDescription": "This allows non-recursive read access to the `$AUDIO` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-audio`"
        },
        {
          "description": "This allows full recursive read access to the complete `$AUDIO` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-audio-recursive`",
          "type": "string",
          "const": "fs:allow-audio-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$AUDIO` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-audio-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$AUDIO` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-audio`",
          "type": "string",
          "const": "fs:allow-audio-write",
          "markdownDescription": "This allows non-recursive write access to the `$AUDIO` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-audio`"
        },
        {
          "description": "This allows full recursive write access to the complete `$AUDIO` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-audio-recursive`",
          "type": "string",
          "const": "fs:allow-audio-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$AUDIO` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-audio-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$CACHE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-cache-index`",
          "type": "string",
          "const": "fs:allow-cache-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$CACHE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-cache-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$CACHE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-cache-recursive`",
          "type": "string",
          "const": "fs:allow-cache-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$CACHE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-cache-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$CACHE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-cache`",
          "type": "string",
          "const": "fs:allow-cache-read",
          "markdownDescription": "This allows non-recursive read access to the `$CACHE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-cache`"
        },
        {
          "description": "This allows full recursive read access to the complete `$CACHE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-cache-recursive`",
          "type": "string",
          "const": "fs:allow-cache-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$CACHE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-cache-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$CACHE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-cache`",
          "type": "string",
          "const": "fs:allow-cache-write",
          "markdownDescription": "This allows non-recursive write access to the `$CACHE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-cache`"
        },
        {
          "description": "This allows full recursive write access to the complete `$CACHE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-cache-recursive`",
          "type": "string",
          "const": "fs:allow-cache-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$CACHE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-cache-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$CONFIG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-config-index`",
          "type": "string",
          "const": "fs:allow-config-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$CONFIG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-config-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$CONFIG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-config-recursive`",
          "type": "string",
          "const": "fs:allow-config-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$CONFIG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-config-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$CONFIG` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-config`",
          "type": "string",
          "const": "fs:allow-config-read",
          "markdownDescription": "This allows non-recursive read access to the `$CONFIG` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-config`"
        },
        {
          "description": "This allows full recursive read access to the complete `$CONFIG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-config-recursive`",
          "type": "string",
          "const": "fs:allow-config-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$CONFIG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-config-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$CONFIG` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-config`",
          "type": "string",
          "const": "fs:allow-config-write",
          "markdownDescription": "This allows non-recursive write access to the `$CONFIG` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-config`"
        },
        {
          "description": "This allows full recursive write access to the complete `$CONFIG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-config-recursive`",
          "type": "string",
          "const": "fs:allow-config-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$CONFIG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-config-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$DATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-data-index`",
          "type": "string",
          "const": "fs:allow-data-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$DATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-data-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$DATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-data-recursive`",
          "type": "string",
          "const": "fs:allow-data-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$DATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-data-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$DATA` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-data`",
          "type": "string",
          "const": "fs:allow-data-read",
          "markdownDescription": "This allows non-recursive read access to the `$DATA` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-data`"
        },
        {
          "description": "This allows full recursive read access to the complete `$DATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-data-recursive`",
          "type": "string",
          "const": "fs:allow-data-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$DATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-data-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$DATA` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-data`",
          "type": "string",
          "const": "fs:allow-data-write",
          "markdownDescription": "This allows non-recursive write access to the `$DATA` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-data`"
        },
        {
          "description": "This allows full recursive write access to the complete `$DATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-data-recursive`",
          "type": "string",
          "const": "fs:allow-data-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$DATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-data-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$DESKTOP` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-desktop-index`",
          "type": "string",
          "const": "fs:allow-desktop-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$DESKTOP` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-desktop-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$DESKTOP` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-desktop-recursive`",
          "type": "string",
          "const": "fs:allow-desktop-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$DESKTOP` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-desktop-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$DESKTOP` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-desktop`",
          "type": "string",
          "const": "fs:allow-desktop-read",
          "markdownDescription": "This allows non-recursive read access to the `$DESKTOP` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-desktop`"
        },
        {
          "description": "This allows full recursive read access to the complete `$DESKTOP` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-desktop-recursive`",
          "type": "string",
          "const": "fs:allow-desktop-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$DESKTOP` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-desktop-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$DESKTOP` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-desktop`",
          "type": "string",
          "const": "fs:allow-desktop-write",
          "markdownDescription": "This allows non-recursive write access to the `$DESKTOP` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-desktop`"
        },
        {
          "description": "This allows full recursive write access to the complete `$DESKTOP` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-desktop-recursive`",
          "type": "string",
          "const": "fs:allow-desktop-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$DESKTOP` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-desktop-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$DOCUMENT` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-document-index`",
          "type": "string",
          "const": "fs:allow-document-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$DOCUMENT` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-document-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$DOCUMENT` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-document-recursive`",
          "type": "string",
          "const": "fs:allow-document-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$DOCUMENT` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-document-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$DOCUMENT` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-document`",
          "type": "string",
          "const": "fs:allow-document-read",
          "markdownDescription": "This allows non-recursive read access to the `$DOCUMENT` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-document`"
        },
        {
          "description": "This allows full recursive read access to the complete `$DOCUMENT` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-document-recursive`",
          "type": "string",
          "const": "fs:allow-document-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$DOCUMENT` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-document-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$DOCUMENT` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-document`",
          "type": "string",
          "const": "fs:allow-document-write",
          "markdownDescription": "This allows non-recursive write access to the `$DOCUMENT` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-document`"
        },
        {
          "description": "This allows full recursive write access to the complete `$DOCUMENT` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-document-recursive`",
          "type": "string",
          "const": "fs:allow-document-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$DOCUMENT` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-document-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$DOWNLOAD` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-download-index`",
          "type": "string",
          "const": "fs:allow-download-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$DOWNLOAD` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-download-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$DOWNLOAD` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-download-recursive`",
          "type": "string",
          "const": "fs:allow-download-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$DOWNLOAD` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-download-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$DOWNLOAD` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-download`",
          "type": "string",
          "const": "fs:allow-download-read",
          "markdownDescription": "This allows non-recursive read access to the `$DOWNLOAD` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-download`"
        },
        {
          "description": "This allows full recursive read access to the complete `$DOWNLOAD` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-download-recursive`",
          "type": "string",
          "const": "fs:allow-download-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$DOWNLOAD` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-download-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$DOWNLOAD` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-download`",
          "type": "string",
          "const": "fs:allow-download-write",
          "markdownDescription": "This allows non-recursive write access to the `$DOWNLOAD` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-download`"
        },
        {
          "description": "This allows full recursive write access to the complete `$DOWNLOAD` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-download-recursive`",
          "type": "string",
          "const": "fs:allow-download-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$DOWNLOAD` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-download-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$EXE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-exe-index`",
          "type": "string",
          "const": "fs:allow-exe-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$EXE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-exe-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$EXE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-exe-recursive`",
          "type": "string",
          "const": "fs:allow-exe-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$EXE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-exe-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$EXE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-exe`",
          "type": "string",
          "const": "fs:allow-exe-read",
          "markdownDescription": "This allows non-recursive read access to the `$EXE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-exe`"
        },
        {
          "description": "This allows full recursive read access to the complete `$EXE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-exe-recursive`",
          "type": "string",
          "const": "fs:allow-exe-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$EXE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-exe-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$EXE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-exe`",
          "type": "string",
          "const": "fs:allow-exe-write",
          "markdownDescription": "This allows non-recursive write access to the `$EXE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-exe`"
        },
        {
          "description": "This allows full recursive write access to the complete `$EXE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-exe-recursive`",
          "type": "string",
          "const": "fs:allow-exe-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$EXE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-exe-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$FONT` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-font-index`",
          "type": "string",
          "const": "fs:allow-font-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$FONT` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-font-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$FONT` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-font-recursive`",
          "type": "string",
          "const": "fs:allow-font-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$FONT` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-font-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$FONT` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-font`",
          "type": "string",
          "const": "fs:allow-font-read",
          "markdownDescription": "This allows non-recursive read access to the `$FONT` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-font`"
        },
        {
          "description": "This allows full recursive read access to the complete `$FONT` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-font-recursive`",
          "type": "string",
          "const": "fs:allow-font-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$FONT` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-font-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$FONT` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-font`",
          "type": "string",
          "const": "fs:allow-font-write",
          "markdownDescription": "This allows non-recursive write access to the `$FONT` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-font`"
        },
        {
          "description": "This allows full recursive write access to the complete `$FONT` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-font-recursive`",
          "type": "string",
          "const": "fs:allow-font-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$FONT` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-font-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$HOME` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-home-index`",
          "type": "string",
          "const": "fs:allow-home-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$HOME` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-home-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$HOME` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-home-recursive`",
          "type": "string",
          "const": "fs:allow-home-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$HOME` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-home-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$HOME` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-home`",
          "type": "string",
          "const": "fs:allow-home-read",
          "markdownDescription": "This allows non-recursive read access to the `$HOME` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-home`"
        },
        {
          "description": "This allows full recursive read access to the complete `$HOME` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-home-recursive`",
          "type": "string",
          "const": "fs:allow-home-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$HOME` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-home-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$HOME` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-home`",
          "type": "string",
          "const": "fs:allow-home-write",
          "markdownDescription": "This allows non-recursive write access to the `$HOME` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-home`"
        },
        {
          "description": "This allows full recursive write access to the complete `$HOME` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-home-recursive`",
          "type": "string",
          "const": "fs:allow-home-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$HOME` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-home-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$LOCALDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-localdata-index`",
          "type": "string",
          "const": "fs:allow-localdata-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$LOCALDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-localdata-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$LOCALDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-localdata-recursive`",
          "type": "string",
          "const": "fs:allow-localdata-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$LOCALDATA` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-localdata-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$LOCALDATA` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-localdata`",
          "type": "string",
          "const": "fs:allow-localdata-read",
          "markdownDescription": "This allows non-recursive read access to the `$LOCALDATA` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-localdata`"
        },
        {
          "description": "This allows full recursive read access to the complete `$LOCALDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-localdata-recursive`",
          "type": "string",
          "const": "fs:allow-localdata-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$LOCALDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-localdata-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$LOCALDATA` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-localdata`",
          "type": "string",
          "const": "fs:allow-localdata-write",
          "markdownDescription": "This allows non-recursive write access to the `$LOCALDATA` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-localdata`"
        },
        {
          "description": "This allows full recursive write access to the complete `$LOCALDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-localdata-recursive`",
          "type": "string",
          "const": "fs:allow-localdata-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$LOCALDATA` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-localdata-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$LOG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-log-index`",
          "type": "string",
          "const": "fs:allow-log-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$LOG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-log-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$LOG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-log-recursive`",
          "type": "string",
          "const": "fs:allow-log-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$LOG` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-log-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$LOG` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-log`",
          "type": "string",
          "const": "fs:allow-log-read",
          "markdownDescription": "This allows non-recursive read access to the `$LOG` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-log`"
        },
        {
          "description": "This allows full recursive read access to the complete `$LOG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-log-recursive`",
          "type": "string",
          "const": "fs:allow-log-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$LOG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-log-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$LOG` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-log`",
          "type": "string",
          "const": "fs:allow-log-write",
          "markdownDescription": "This allows non-recursive write access to the `$LOG` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-log`"
        },
        {
          "description": "This allows full recursive write access to the complete `$LOG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-log-recursive`",
          "type": "string",
          "const": "fs:allow-log-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$LOG` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-log-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$PICTURE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-picture-index`",
          "type": "string",
          "const": "fs:allow-picture-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$PICTURE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-picture-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$PICTURE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-picture-recursive`",
          "type": "string",
          "const": "fs:allow-picture-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$PICTURE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-picture-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$PICTURE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-picture`",
          "type": "string",
          "const": "fs:allow-picture-read",
          "markdownDescription": "This allows non-recursive read access to the `$PICTURE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-picture`"
        },
        {
          "description": "This allows full recursive read access to the complete `$PICTURE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-picture-recursive`",
          "type": "string",
          "const": "fs:allow-picture-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$PICTURE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-picture-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$PICTURE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-picture`",
          "type": "string",
          "const": "fs:allow-picture-write",
          "markdownDescription": "This allows non-recursive write access to the `$PICTURE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-picture`"
        },
        {
          "description": "This allows full recursive write access to the complete `$PICTURE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-picture-recursive`",
          "type": "string",
          "const": "fs:allow-picture-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$PICTURE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-picture-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$PUBLIC` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-public-index`",
          "type": "string",
          "const": "fs:allow-public-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$PUBLIC` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-public-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$PUBLIC` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-public-recursive`",
          "type": "string",
          "const": "fs:allow-public-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$PUBLIC` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-public-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$PUBLIC` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-public`",
          "type": "string",
          "const": "fs:allow-public-read",
          "markdownDescription": "This allows non-recursive read access to the `$PUBLIC` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-public`"
        },
        {
          "description": "This allows full recursive read access to the complete `$PUBLIC` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-public-recursive`",
          "type": "string",
          "const": "fs:allow-public-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$PUBLIC` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-public-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$PUBLIC` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-public`",
          "type": "string",
          "const": "fs:allow-public-write",
          "markdownDescription": "This allows non-recursive write access to the `$PUBLIC` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-public`"
        },
        {
          "description": "This allows full recursive write access to the complete `$PUBLIC` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-public-recursive`",
          "type": "string",
          "const": "fs:allow-public-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$PUBLIC` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-public-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$RESOURCE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-resource-index`",
          "type": "string",
          "const": "fs:allow-resource-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$RESOURCE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-resource-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$RESOURCE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-resource-recursive`",
          "type": "string",
          "const": "fs:allow-resource-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$RESOURCE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-resource-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$RESOURCE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-resource`",
          "type": "string",
          "const": "fs:allow-resource-read",
          "markdownDescription": "This allows non-recursive read access to the `$RESOURCE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-resource`"
        },
        {
          "description": "This allows full recursive read access to the complete `$RESOURCE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-resource-recursive`",
          "type": "string",
          "const": "fs:allow-resource-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$RESOURCE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-resource-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$RESOURCE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-resource`",
          "type": "string",
          "const": "fs:allow-resource-write",
          "markdownDescription": "This allows non-recursive write access to the `$RESOURCE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-resource`"
        },
        {
          "description": "This allows full recursive write access to the complete `$RESOURCE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-resource-recursive`",
          "type": "string",
          "const": "fs:allow-resource-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$RESOURCE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-resource-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$RUNTIME` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-runtime-index`",
          "type": "string",
          "const": "fs:allow-runtime-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$RUNTIME` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-runtime-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$RUNTIME` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-runtime-recursive`",
          "type": "string",
          "const": "fs:allow-runtime-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$RUNTIME` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-runtime-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$RUNTIME` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-runtime`",
          "type": "string",
          "const": "fs:allow-runtime-read",
          "markdownDescription": "This allows non-recursive read access to the `$RUNTIME` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-runtime`"
        },
        {
          "description": "This allows full recursive read access to the complete `$RUNTIME` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-runtime-recursive`",
          "type": "string",
          "const": "fs:allow-runtime-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$RUNTIME` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-runtime-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$RUNTIME` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-runtime`",
          "type": "string",
          "const": "fs:allow-runtime-write",
          "markdownDescription": "This allows non-recursive write access to the `$RUNTIME` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-runtime`"
        },
        {
          "description": "This allows full recursive write access to the complete `$RUNTIME` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-runtime-recursive`",
          "type": "string",
          "const": "fs:allow-runtime-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$RUNTIME` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-runtime-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$TEMP` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-temp-index`",
          "type": "string",
          "const": "fs:allow-temp-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$TEMP` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-temp-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$TEMP` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-temp-recursive`",
          "type": "string",
          "const": "fs:allow-temp-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$TEMP` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-temp-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$TEMP` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-temp`",
          "type": "string",
          "const": "fs:allow-temp-read",
          "markdownDescription": "This allows non-recursive read access to the `$TEMP` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-temp`"
        },
        {
          "description": "This allows full recursive read access to the complete `$TEMP` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-temp-recursive`",
          "type": "string",
          "const": "fs:allow-temp-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$TEMP` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-temp-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$TEMP` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-temp`",
          "type": "string",
          "const": "fs:allow-temp-write",
          "markdownDescription": "This allows non-recursive write access to the `$TEMP` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-temp`"
        },
        {
          "description": "This allows full recursive write access to the complete `$TEMP` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-temp-recursive`",
          "type": "string",
          "const": "fs:allow-temp-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$TEMP` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-temp-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$TEMPLATE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-template-index`",
          "type": "string",
          "const": "fs:allow-template-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$TEMPLATE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-template-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$TEMPLATE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-template-recursive`",
          "type": "string",
          "const": "fs:allow-template-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$TEMPLATE` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-template-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$TEMPLATE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-template`",
          "type": "string",
          "const": "fs:allow-template-read",
          "markdownDescription": "This allows non-recursive read access to the `$TEMPLATE` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-template`"
        },
        {
          "description": "This allows full recursive read access to the complete `$TEMPLATE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-template-recursive`",
          "type": "string",
          "const": "fs:allow-template-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$TEMPLATE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-template-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$TEMPLATE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-template`",
          "type": "string",
          "const": "fs:allow-template-write",
          "markdownDescription": "This allows non-recursive write access to the `$TEMPLATE` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-template`"
        },
        {
          "description": "This allows full recursive write access to the complete `$TEMPLATE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-template-recursive`",
          "type": "string",
          "const": "fs:allow-template-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$TEMPLATE` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-template-recursive`"
        },
        {
          "description": "This allows non-recursive read access to metadata of the `$VIDEO` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-video-index`",
          "type": "string",
          "const": "fs:allow-video-meta",
          "markdownDescription": "This allows non-recursive read access to metadata of the `$VIDEO` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-video-index`"
        },
        {
          "description": "This allows full recursive read access to metadata of the `$VIDEO` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-video-recursive`",
          "type": "string",
          "const": "fs:allow-video-meta-recursive",
          "markdownDescription": "This allows full recursive read access to metadata of the `$VIDEO` folder, including file listing and statistics.\n#### This permission set includes:\n\n- `read-meta`\n- `scope-video-recursive`"
        },
        {
          "description": "This allows non-recursive read access to the `$VIDEO` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-video`",
          "type": "string",
          "const": "fs:allow-video-read",
          "markdownDescription": "This allows non-recursive read access to the `$VIDEO` folder.\n#### This permission set includes:\n\n- `read-all`\n- `scope-video`"
        },
        {
          "description": "This allows full recursive read access to the complete `$VIDEO` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-video-recursive`",
          "type": "string",
          "const": "fs:allow-video-read-recursive",
          "markdownDescription": "This allows full recursive read access to the complete `$VIDEO` folder, files and subdirectories.\n#### This permission set includes:\n\n- `read-all`\n- `scope-video-recursive`"
        },
        {
          "description": "This allows non-recursive write access to the `$VIDEO` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-video`",
          "type": "string",
          "const": "fs:allow-video-write",
          "markdownDescription": "This allows non-recursive write access to the `$VIDEO` folder.\n#### This permission set includes:\n\n- `write-all`\n- `scope-video`"
        },
        {
          "description": "This allows full recursive write access to the complete `$VIDEO` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-video-recursive`",
          "type": "string",
          "const": "fs:allow-video-write-recursive",
          "markdownDescription": "This allows full recursive write access to the complete `$VIDEO` folder, files and subdirectories.\n#### This permission set includes:\n\n- `write-all`\n- `scope-video-recursive`"
        },
        {
          "description": "This denies access to dangerous Tauri relevant files and folders by default.\n#### This permission set includes:\n\n- `deny-webview-data-linux`\n- `deny-webview-data-windows`",
          "type": "string",
          "const": "fs:deny-default",
          "markdownDescription": "This denies access to dangerous Tauri relevant files and folders by default.\n#### This permission set includes:\n\n- `deny-webview-data-linux`\n- `deny-webview-data-windows`"
        },
        {
          "description": "Enables the copy_file command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-copy-file",
          "markdownDescription": "Enables the copy_file command without any pre-configured scope."
        },
        {
          "description": "Enables the create command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-create",
          "markdownDescription": "Enables the create command without any pre-configured scope."
        },
        {
          "description": "Enables the exists command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-exists",
          "markdownDescription": "Enables the exists command without any pre-configured scope."
        },
        {
          "description": "Enables the fstat command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-fstat",
          "markdownDescription": "Enables the fstat command without any pre-configured scope."
        },
        {
          "description": "Enables the ftruncate command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-ftruncate",
          "markdownDescription": "Enables the ftruncate command without any pre-configured scope."
        },
        {
          "description": "Enables the lstat command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-lstat",
          "markdownDescription": "Enables the lstat command without any pre-configured scope."
        },
        {
          "description": "Enables the mkdir command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-mkdir",
          "markdownDescription": "Enables the mkdir command without any pre-configured scope."
        },
        {
          "description": "Enables the open command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-open",
          "markdownDescription": "Enables the open command without any pre-configured scope."
        },
        {
          "description": "Enables the read command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-read",
          "markdownDescription": "Enables the read command without any pre-configured scope."
        },
        {
          "description": "Enables the read_dir command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-read-dir",
          "markdownDescription": "Enables the read_dir command without any pre-configured scope."
        },
        {
          "description": "Enables the read_file command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-read-file",
          "markdownDescription": "Enables the read_file command without any pre-configured scope."
        },
        {
          "description": "Enables the read_text_file command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-read-text-file",
          "markdownDescription": "Enables the read_text_file command without any pre-configured scope."
        },
        {
          "description": "Enables the read_text_file_lines command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-read-text-file-lines",
          "markdownDescription": "Enables the read_text_file_lines command without any pre-configured scope."
        },
        {
          "description": "Enables the read_text_file_lines_next command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-read-text-file-lines-next",
          "markdownDescription": "Enables the read_text_file_lines_next command without any pre-configured scope."
        },
        {
          "description": "Enables the remove command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-remove",
          "markdownDescription": "Enables the remove command without any pre-configured scope."
        },
        {
          "description": "Enables the rename command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-rename",
          "markdownDescription": "Enables the rename command without any pre-configured scope."
        },
        {
          "description": "Enables the seek command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-seek",
          "markdownDescription": "Enables the seek command without any pre-configured scope."
        },
        {
          "description": "Enables the size command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-size",
          "markdownDescription": "Enables the size command without any pre-configured scope."
        },
        {
          "description": "Enables the stat command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-stat",
          "markdownDescription": "Enables the stat command without any pre-configured scope."
        },
        {
          "description": "Enables the truncate command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-truncate",
          "markdownDescription": "Enables the truncate command without any pre-configured scope."
        },
        {
          "description": "Enables the unwatch command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-unwatch",
          "markdownDescription": "Enables the unwatch command without any pre-configured scope."
        },
        {
          "description": "Enables the watch command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-watch",
          "markdownDescription": "Enables the watch command without any pre-configured scope."
        },
        {
          "description": "Enables the write command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-write",
          "markdownDescription": "Enables the write command without any pre-configured scope."
        },
        {
          "description": "Enables the write_file command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-write-file",
          "markdownDescription": "Enables the write_file command without any pre-configured scope."
        },
        {
          "description": "Enables the write_text_file command without any pre-configured scope.",
          "type": "string",
          "const": "fs:allow-write-text-file",
          "markdownDescription": "Enables the write_text_file command without any pre-configured scope."
        },
        {
          "description": "This permissions allows to create the application specific directories.\n",
          "type": "string",
          "const": "fs:create-app-specific-dirs",
          "markdownDescription": "This permissions allows to create the application specific directories.\n"
        },
        {
          "description": "Denies the copy_file command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-copy-file",
          "markdownDescription": "Denies the copy_file command without any pre-configured scope."
        },
        {
          "description": "Denies the create command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-create",
          "markdownDescription": "Denies the create command without any pre-configured scope."
        },
        {
          "description": "Denies the exists command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-exists",
          "markdownDescription": "Denies the exists command without any pre-configured scope."
        },
        {
          "description": "Denies the fstat command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-fstat",
          "markdownDescription": "Denies the fstat command without any pre-configured scope."
        },
        {
          "description": "Denies the ftruncate command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-ftruncate",
          "markdownDescription": "Denies the ftruncate command without any pre-configured scope."
        },
        {
          "description": "Denies the lstat command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-lstat",
          "markdownDescription": "Denies the lstat command without any pre-configured scope."
        },
        {
          "description": "Denies the mkdir command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-mkdir",
          "markdownDescription": "Denies the mkdir command without any pre-configured scope."
        },
        {
          "description": "Denies the open command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-open",
          "markdownDescription": "Denies the open command without any pre-configured scope."
        },
        {
          "description": "Denies the read command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-read",
          "markdownDescription": "Denies the read command without any pre-configured scope."
        },
        {
          "description": "Denies the read_dir command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-read-dir",
          "markdownDescription": "Denies the read_dir command without any pre-configured scope."
        },
        {
          "description": "Denies the read_file command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-read-file",
          "markdownDescription": "Denies the read_file command without any pre-configured scope."
        },
        {
          "description": "Denies the read_text_file command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-read-text-file",
          "markdownDescription": "Denies the read_text_file command without any pre-configured scope."
        },
        {
          "description": "Denies the read_text_file_lines command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-read-text-file-lines",
          "markdownDescription": "Denies the read_text_file_lines command without any pre-configured scope."
        },
        {
          "description": "Denies the read_text_file_lines_next command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-read-text-file-lines-next",
          "markdownDescription": "Denies the read_text_file_lines_next command without any pre-configured scope."
        },
        {
          "description": "Denies the remove command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-remove",
          "markdownDescription": "Denies the remove command without any pre-configured scope."
        },
        {
          "description": "Denies the rename command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-rename",
          "markdownDescription": "Denies the rename command without any pre-configured scope."
        },
        {
          "description": "Denies the seek command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-seek",
          "markdownDescription": "Denies the seek command without any pre-configured scope."
        },
        {
          "description": "Denies the size command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-size",
          "markdownDescription": "Denies the size command without any pre-configured scope."
        },
        {
          "description": "Denies the stat command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-stat",
          "markdownDescription": "Denies the stat command without any pre-configured scope."
        },
        {
          "description": "Denies the truncate command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-truncate",
          "markdownDescription": "Denies the truncate command without any pre-configured scope."
        },
        {
          "description": "Denies the unwatch command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-unwatch",
          "markdownDescription": "Denies the unwatch command without any pre-configured scope."
        },
        {
          "description": "Denies the watch command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-watch",
          "markdownDescription": "Denies the watch command without any pre-configured scope."
        },
        {
          "description": "This denies read access to the\n`$APPLOCALDATA` folder on linux as the webview data and configuration values are stored here.\nAllowing access can lead to sensitive information disclosure and should be well considered.",
          "type": "string",
          "const": "fs:deny-webview-data-linux",
          "markdownDescription": "This denies read access to the\n`$APPLOCALDATA` folder on linux as the webview data and configuration values are stored here.\nAllowing access can lead to sensitive information disclosure and should be well considered."
        },
        {
          "description": "This denies read access to the\n`$APPLOCALDATA/EBWebView` folder on windows as the webview data and configuration values are stored here.\nAllowing access can lead to sensitive information disclosure and should be well considered.",
          "type": "string",
          "const": "fs:deny-webview-data-windows",
          "markdownDescription": "This denies read access to the\n`$APPLOCALDATA/EBWebView` folder on windows as the webview data and configuration values are stored here.\nAllowing access can lead to sensitive information disclosure and should be well considered."
        },
        {
          "description": "Denies the write command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-write",
          "markdownDescription": "Denies the write command without any pre-configured scope."
        },
        {
          "description": "Denies the write_file command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-write-file",
          "markdownDescription": "Denies the write_file command without any pre-configured scope."
        },
        {
          "description": "Denies the write_text_file command without any pre-configured scope.",
          "type": "string",
          "const": "fs:deny-write-text-file",
          "markdownDescription": "Denies the write_text_file command without any pre-configured scope."
        },
        {
          "description": "This enables all read related commands without any pre-configured accessible paths.",
          "type": "string",
          "const": "fs:read-all",
          "markdownDescription": "This enables all read related commands without any pre-configured accessible paths."
        },
        {
          "description": "This permission allows recursive read functionality on the application\nspecific base directories. \n",
          "type": "string",
          "const": "fs:read-app-specific-dirs-recursive",
          "markdownDescription": "This permission allows recursive read functionality on the application\nspecific base directories. \n"
        },
        {
          "description": "This enables directory read and file metadata related commands without any pre-configured accessible paths.",
          "type": "string",
          "const": "fs:read-dirs",
          "markdownDescription": "This enables directory read and file metadata related commands without any pre-configured accessible paths."
        },
        {
          "description": "This enables file read related commands without any pre-configured accessible paths.",
          "type": "string",
          "const": "fs:read-files",
          "markdownDescription": "This enables file read related commands without any pre-configured accessible paths."
        },
        {
          "description": "This enables all index or metadata related commands without any pre-configured accessible paths.",
          "type": "string",
          "const": "fs:read-meta",
          "markdownDescription": "This enables all index or metadata related commands without any pre-configured accessible paths."
        },
        {
          "description": "An empty permission you can use to modify the global scope.",
          "type": "string",
          "const": "fs:scope",
          "markdownDescription": "An empty permission you can use to modify the global scope."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the application folders.",
          "type": "string",
          "const": "fs:scope-app",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the application folders."
        },
        {
          "description": "This scope permits to list all files and folders in the application directories.",
          "type": "string",
          "const": "fs:scope-app-index",
          "markdownDescription": "This scope permits to list all files and folders in the application directories."
        },
        {
          "description": "This scope permits recursive access to the complete application folders, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-app-recursive",
          "markdownDescription": "This scope permits recursive access to the complete application folders, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$APPCACHE` folder.",
          "type": "string",
          "const": "fs:scope-appcache",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$APPCACHE` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$APPCACHE`folder.",
          "type": "string",
          "const": "fs:scope-appcache-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$APPCACHE`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$APPCACHE` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-appcache-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$APPCACHE` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$APPCONFIG` folder.",
          "type": "string",
          "const": "fs:scope-appconfig",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$APPCONFIG` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$APPCONFIG`folder.",
          "type": "string",
          "const": "fs:scope-appconfig-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$APPCONFIG`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$APPCONFIG` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-appconfig-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$APPCONFIG` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$APPDATA` folder.",
          "type": "string",
          "const": "fs:scope-appdata",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$APPDATA` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$APPDATA`folder.",
          "type": "string",
          "const": "fs:scope-appdata-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$APPDATA`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$APPDATA` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-appdata-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$APPDATA` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$APPLOCALDATA` folder.",
          "type": "string",
          "const": "fs:scope-applocaldata",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$APPLOCALDATA` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$APPLOCALDATA`folder.",
          "type": "string",
          "const": "fs:scope-applocaldata-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$APPLOCALDATA`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$APPLOCALDATA` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-applocaldata-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$APPLOCALDATA` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$APPLOG` folder.",
          "type": "string",
          "const": "fs:scope-applog",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$APPLOG` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$APPLOG`folder.",
          "type": "string",
          "const": "fs:scope-applog-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$APPLOG`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$APPLOG` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-applog-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$APPLOG` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$AUDIO` folder.",
          "type": "string",
          "const": "fs:scope-audio",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$AUDIO` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$AUDIO`folder.",
          "type": "string",
          "const": "fs:scope-audio-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$AUDIO`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$AUDIO` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-audio-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$AUDIO` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$CACHE` folder.",
          "type": "string",
          "const": "fs:scope-cache",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$CACHE` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$CACHE`folder.",
          "type": "string",
          "const": "fs:scope-cache-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$CACHE`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$CACHE` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-cache-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$CACHE` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$CONFIG` folder.",
          "type": "string",
          "const": "fs:scope-config",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$CONFIG` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$CONFIG`folder.",
          "type": "string",
          "const": "fs:scope-config-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$CONFIG`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$CONFIG` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-config-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$CONFIG` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$DATA` folder.",
          "type": "string",
          "const": "fs:scope-data",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$DATA` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$DATA`folder.",
          "type": "string",
          "const": "fs:scope-data-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$DATA`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$DATA` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-data-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$DATA` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$DESKTOP` folder.",
          "type": "string",
          "const": "fs:scope-desktop",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$DESKTOP` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$DESKTOP`folder.",
          "type": "string",
          "const": "fs:scope-desktop-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$DESKTOP`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$DESKTOP` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-desktop-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$DESKTOP` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$DOCUMENT` folder.",
          "type": "string",
          "const": "fs:scope-document",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$DOCUMENT` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$DOCUMENT`folder.",
          "type": "string",
          "const": "fs:scope-document-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$DOCUMENT`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$DOCUMENT` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-document-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$DOCUMENT` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$DOWNLOAD` folder.",
          "type": "string",
          "const": "fs:scope-download",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$DOWNLOAD` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$DOWNLOAD`folder.",
          "type": "string",
          "const": "fs:scope-download-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$DOWNLOAD`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$DOWNLOAD` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-download-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$DOWNLOAD` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$EXE` folder.",
          "type": "string",
          "const": "fs:scope-exe",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$EXE` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$EXE`folder.",
          "type": "string",
          "const": "fs:scope-exe-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$EXE`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$EXE` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-exe-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$EXE` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$FONT` folder.",
          "type": "string",
          "const": "fs:scope-font",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$FONT` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$FONT`folder.",
          "type": "string",
          "const": "fs:scope-font-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$FONT`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$FONT` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-font-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$FONT` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$HOME` folder.",
          "type": "string",
          "const": "fs:scope-home",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$HOME` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$HOME`folder.",
          "type": "string",
          "const": "fs:scope-home-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$HOME`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$HOME` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-home-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$HOME` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$LOCALDATA` folder.",
          "type": "string",
          "const": "fs:scope-localdata",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$LOCALDATA` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$LOCALDATA`folder.",
          "type": "string",
          "const": "fs:scope-localdata-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$LOCALDATA`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$LOCALDATA` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-localdata-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$LOCALDATA` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$LOG` folder.",
          "type": "string",
          "const": "fs:scope-log",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$LOG` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$LOG`folder.",
          "type": "string",
          "const": "fs:scope-log-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$LOG`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$LOG` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-log-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$LOG` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$PICTURE` folder.",
          "type": "string",
          "const": "fs:scope-picture",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$PICTURE` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$PICTURE`folder.",
          "type": "string",
          "const": "fs:scope-picture-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$PICTURE`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$PICTURE` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-picture-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$PICTURE` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$PUBLIC` folder.",
          "type": "string",
          "const": "fs:scope-public",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$PUBLIC` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$PUBLIC`folder.",
          "type": "string",
          "const": "fs:scope-public-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$PUBLIC`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$PUBLIC` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-public-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$PUBLIC` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$RESOURCE` folder.",
          "type": "string",
          "const": "fs:scope-resource",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$RESOURCE` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$RESOURCE`folder.",
          "type": "string",
          "const": "fs:scope-resource-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$RESOURCE`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$RESOURCE` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-resource-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$RESOURCE` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$RUNTIME` folder.",
          "type": "string",
          "const": "fs:scope-runtime",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$RUNTIME` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$RUNTIME`folder.",
          "type": "string",
          "const": "fs:scope-runtime-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$RUNTIME`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$RUNTIME` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-runtime-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$RUNTIME` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$TEMP` folder.",
          "type": "string",
          "const": "fs:scope-temp",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$TEMP` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$TEMP`folder.",
          "type": "string",
          "const": "fs:scope-temp-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$TEMP`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$TEMP` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-temp-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$TEMP` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$TEMPLATE` folder.",
          "type": "string",
          "const": "fs:scope-template",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$TEMPLATE` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$TEMPLATE`folder.",
          "type": "string",
          "const": "fs:scope-template-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$TEMPLATE`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$TEMPLATE` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-template-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$TEMPLATE` folder, including sub directories and files."
        },
        {
          "description": "This scope permits access to all files and list content of top level directories in the `$VIDEO` folder.",
          "type": "string",
          "const": "fs:scope-video",
          "markdownDescription": "This scope permits access to all files and list content of top level directories in the `$VIDEO` folder."
        },
        {
          "description": "This scope permits to list all files and folders in the `$VIDEO`folder.",
          "type": "string",
          "const": "fs:scope-video-index",
          "markdownDescription": "This scope permits to list all files and folders in the `$VIDEO`folder."
        },
        {
          "description": "This scope permits recursive access to the complete `$VIDEO` folder, including sub directories and files.",
          "type": "string",
          "const": "fs:scope-video-recursive",
          "markdownDescription": "This scope permits recursive access to the complete `$VIDEO` folder, including sub directories and files."
        },
        {
          "description": "This enables all write related commands without any pre-configured accessible paths.",
          "type": "string",
          "const": "fs:write-all",
          "markdownDescription": "This enables all write related commands without any pre-configured accessible paths."
        },
        {
          "description": "This enables all file write related commands without any pre-configured accessible paths.",
          "type": "string",
          "const": "fs:write-files",
          "markdownDescription": "This enables all file write related commands without any pre-configured accessible paths."
        },
        {
          "description": "This permission set allows opening `mailto:`, `tel:`, `https://` and `http://` urls using their default application\nas well as reveal file in directories using default file explorer\n#### This default permission set includes:\n\n- `allow-open-url`\n- `allow-reveal-item-in-dir`\n- `allow-default-urls`",
          "type": "string",
          "const": "opener:default",
          "markdownDescription": "This permission set allows opening `mailto:`, `tel:`, `https://` and `http://` urls using their default application\nas well as reveal file in directories using default file explorer\n#### This default permission set includes:\n\n- `allow-open-url`\n- `allow-reveal-item-in-dir`\n- `allow-default-urls`"
        },
        {
          "description": "This enables opening `mailto:`, `tel:`, `https://` and `http://` urls using their default application.",
          "type": "string",
          "const": "opener:allow-default-urls",
          "markdownDescription": "This enables opening `mailto:`, `tel:`, `https://` and `http://` urls using their default application."
        },
        {
          "description": "Enables the open_path command without any pre-configured scope.",
          "type": "string",
          "const": "opener:allow-open-path",
          "markdownDescription": "Enables the open_path command without any pre-configured scope."
        },
        {
          "description": "Enables the open_url command without any pre-configured scope.",
          "type": "string",
          "const": "opener:allow-open-url",
          "markdownDescription": "Enables the open_url command without any pre-configured scope."
        },
        {
          "description": "Enables the reveal_item_in_dir command without any pre-configured scope.",
          "type": "string",
          "const": "opener:allow-reveal-item-in-dir",
          "markdownDescription": "Enables the reveal_item_in_dir command without any pre-configured scope."
        },
        {
          "description": "Denies the open_path command without any pre-configured scope.",
          "type": "string",
          "const": "opener:deny-open-path",
          "markdownDescription": "Denies the open_path command without any pre-configured scope."
        },
        {
          "description": "Denies the open_url command without any pre-configured scope.",
          "type": "string",
          "const": "opener:deny-open-url",
          "markdownDescription": "Denies the open_url command without any pre-configured scope."
        },
        {
          "description": "Denies the reveal_item_in_dir command without any pre-configured scope.",
          "type": "string",
          "const": "opener:deny-reveal-item-in-dir",
          "markdownDescription": "Denies the reveal_item_in_dir command without any pre-configured scope."
        },
        {
          "description": "This permission set configures which\nshell functionality is exposed by default.\n\n#### Granted Permissions\n\nIt allows to use the `open` functionality with a reasonable\nscope pre-configured. It will allow opening `http(s)://`,\n`tel:` and `mailto:` links.\n\n#### This default permission set includes:\n\n- `allow-open`",
          "type": "string",
          "const": "shell:default",
          "markdownDescription": "This permission set configures which\nshell functionality is exposed by default.\n\n#### Granted Permissions\n\nIt allows to use the `open` functionality with a reasonable\nscope pre-configured. It will allow opening `http(s)://`,\n`tel:` and `mailto:` links.\n\n#### This default permission set includes:\n\n- `allow-open`"
        },
        {
          "description": "Enables the execute command without any pre-configured scope.",
          "type": "string",
          "const": "shell:allow-execute",
          "markdownDescription": "Enables the execute command without any pre-configured scope."
        },
        {
          "description": "Enables the kill command without any pre-configured scope.",
          "type": "string",
          "const": "shell:allow-kill",
          "markdownDescription": "Enables the kill command without any pre-configured scope."
        },
        {
          "description": "Enables the open command without any pre-configured scope.",
          "type": "string",
          "const": "shell:allow-open",
          "markdownDescription": "Enables the open command without any pre-configured scope."
        },
        {
          "description": "Enables the spawn command without any pre-configured scope.",
          "type": "string",
          "const": "shell:allow-spawn",
          "markdownDescription": "Enables the spawn command without any pre-configured scope."
        },
        {
          "description": "Enables the stdin_write command without any pre-configured scope.",
          "type": "string",
          "const": "shell:allow-stdin-write",
          "markdownDescription": "Enables the stdin_write command without any pre-configured scope."
        },
        {
          "description": "Denies the execute command without any pre-configured scope.",
          "type": "string",
          "const": "shell:deny-execute",
          "markdownDescription": "Denies the execute command without any pre-configured scope."
        },
        {
          "description": "Denies the kill command without any pre-configured scope.",
          "type": "string",
          "const": "shell:deny-kill",
          "markdownDescription": "Denies the kill command without any pre-configured scope."
        },
        {
          "description": "Denies the open command without any pre-configured scope.",
          "type": "string",
          "const": "shell:deny-open",
          "markdownDescription": "Denies the open command without any pre-configured scope."
        },
        {
          "description": "Denies the spawn command without any pre-configured scope.",
          "type": "string",
          "const": "shell:deny-spawn",
          "markdownDescription": "Denies the spawn command without any pre-configured scope."
        },
        {
          "description": "Denies the stdin_write command without any pre-configured scope.",
          "type": "string",
          "const": "shell:deny-stdin-write",
          "markdownDescription": "Denies the stdin_write command without any pre-configured scope."
        }
      ]
    },
    "Value": {
      "description": "All supported ACL values.",
      "anyOf": [
        {
          "description": "Represents a null JSON value.",
          "type": "null"
        },
        {
          "description": "Represents a [`bool`].",
          "type": "boolean"
        },
        {
          "description": "Represents a valid ACL [`Number`].",
          "allOf": [
            {
              "$ref": "#/definitions/Number"
            }
          ]
        },
        {
          "description": "Represents a [`String`].",
          "type": "string"
        },
        {
          "description": "Represents a list of other [`Value`]s.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Value"
          }
        },
        {
          "description": "Represents a map of [`String`] keys to [`Value`]s.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Value"
          }
        }
      ]
    },
    "Number": {
      "description": "A valid ACL number.",
      "anyOf": [
        {
          "description": "Represents an [`i64`].",
          "type": "integer",
          "format": "int64"
        },
        {
          "description": "Represents a [`f64`].",
          "type": "number",
          "format": "double"
        }
      ]
    },
    "Target": {
      "description": "Platform target.",
      "oneOf": [
        {
          "description": "MacOS.",
          "type": "string",
          "enum": [
            "macOS"
          ]
        },
        {
          "description": "Windows.",
          "type": "string",
          "enum": [
            "windows"
          ]
        },
        {
          "description": "Linux.",
          "type": "string",
          "enum": [
            "linux"
          ]
        },
        {
          "description": "Android.",
          "type": "string",
          "enum": [
            "android"
          ]
        },
        {
          "description": "iOS.",
          "type": "string",
          "enum": [
            "iOS"
          ]
        }
      ]
    },
    "Application": {
      "description": "Opener scope application.",
      "anyOf": [
        {
          "description": "Open in default application.",
          "type": "null"
        },
        {
          "description": "If true, allow open with any application.",
          "type": "boolean"
        },
        {
          "description": "Allow specific application to open with.",
          "type": "string"
        }
      ]
    },
    "ShellScopeEntryAllowedArg": {
      "description": "A command argument allowed to be executed by the webview API.",
      "anyOf": [
        {
          "description": "A non-configurable argument that is passed to the command in the order it was specified.",
          "type": "string"
        },
        {
          "description": "A variable that is set while calling the command from the webview API.",
          "type": "object",
          "required": [
            "validator"
          ],
          "properties": {
            "raw": {
              "description": "Marks the validator as a raw regex, meaning the plugin should not make any modification at runtime.\n\nThis means the regex will not match on the entire string by default, which might be exploited if your regex allow unexpected input to be considered valid. When using this option, make sure your regex is correct.",
              "default": false,
              "type": "boolean"
            },
            "validator": {
              "description": "[regex] validator to require passed values to conform to an expected input.\n\nThis will require the argument value passed to this variable to match the `validator` regex before it will be executed.\n\nThe regex string is by default surrounded by `^...$` to match the full string. For example the `https?://\\w+` regex would be registered as `^https?://\\w+$`.\n\n[regex]: <https://docs.rs/regex/latest/regex/#syntax>",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ShellScopeEntryAllowedArgs": {
      "description": "A set of command arguments allowed to be executed by the webview API.\n\nA value of `true` will allow any arguments to be passed to the command. `false` will disable all arguments. A list of [`ShellScopeEntryAllowedArg`] will set those arguments as the only valid arguments to be passed to the attached command configuration.",
      "anyOf": [
        {
          "description": "Use a simple boolean to allow all or disable all arguments to this command configuration.",
          "type": "boolean"
        },
        {
          "description": "A specific set of [`ShellScopeEntryAllowedArg`] that are valid to call for the command configuration.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShellScopeEntryAllowedArg"
          }
        }
      ]
    }
  }
}

//-==================== END OF FILE: src-tauri\gen\schemas\windows-schema.json ====================-//

//-==================== START OF FILE: src-tauri\src\commands\custom_skins.rs ====================-//

use crate::commands::types::*;
use tauri::Manager;
use chrono;
use serde_json;
#[cfg(target_os = "windows")]
use std::os::windows::process::CommandExt;

// TODO: Move these functions from commands.rs:
#[tauri::command]
pub async fn upload_custom_skin(
    app: tauri::AppHandle,
    champion_id: u32,
    skin_name: String,
) -> Result<CustomSkinData, String> {
    println!("Uploading custom skin: {}", skin_name);
    println!("For champion ID: {}", champion_id);
    
    // Open file dialog for the user to select a skin file
    #[cfg(target_os = "windows")]
    let file_path = {
        use std::process::Command;
        const CREATE_NO_WINDOW: u32 = 0x08000000;

        let mut command = Command::new("powershell");
        command.creation_flags(CREATE_NO_WINDOW);
        command.args([
            "-NoProfile",
            "-Command",
            r#"Add-Type -AssemblyName System.Windows.Forms; 
            $dialog = New-Object System.Windows.Forms.OpenFileDialog;
            $dialog.Filter = 'Skin files (*.fantome;*.wad;*.client;*.zip)|*.fantome;*.wad;*.client;*.zip';
            $dialog.Title = 'Select Custom Skin File';
            if($dialog.ShowDialog() -eq 'OK') { $dialog.FileName }"#,
        ]);
        
        let output = command
            .output()
            .map_err(|e| format!("Failed to execute file dialog command: {}", e))?;

        if !output.status.success() {
            return Err("File selection cancelled".to_string());
        }

        let path = String::from_utf8(output.stdout)
            .map_err(|e| format!("Failed to parse selected path: {}", e))?
            .trim()
            .to_string();

        if path.is_empty() {
            return Err("No file selected".to_string());
        }
        
        path
    };
    
    #[cfg(not(target_os = "windows"))]
    let file_path = {
        return Err("File selection is only supported on Windows for now".to_string());
    };
    
    println!("Selected file: {}", file_path);
    
    // Get the app data directory
    let app_data_dir = app.path().app_data_dir()
        .or_else(|e| Err(format!("Failed to get app data directory: {}", e)))?;
    
    // Create custom skins directory if it doesn't exist
    let custom_skins_dir = app_data_dir.join("custom_skins");
    std::fs::create_dir_all(&custom_skins_dir)
        .map_err(|e| format!("Failed to create custom skins directory: {}", e))?;
        
    // Get champion name (for organization)
    let champion_name = if let Ok(champion_data) = get_champion_name(&app, champion_id).await {
        champion_data
    } else {
        format!("champion_{}", champion_id) // Fallback if name not found
    };
    
    // Create directory for this champion's custom skins
    let champion_dir = custom_skins_dir.join(&champion_name);
    std::fs::create_dir_all(&champion_dir)
        .map_err(|e| format!("Failed to create champion directory: {}", e))?;
        
    // Generate a unique ID for this skin
    let skin_id = format!("custom_{}_{}", champion_id, chrono::Utc::now().timestamp());
    
    // Copy the file to the custom skins directory with a new name
    let source_path = std::path::Path::new(&file_path);
    let file_ext = source_path.extension()
        .map(|ext| ext.to_string_lossy().to_string())
        .unwrap_or_else(|| "fantome".to_string());
    
    // Create filename: champion_name_skinid.extension
    let dest_filename = format!("{}_{}.{}", champion_name, skin_id, file_ext);
    let dest_path = champion_dir.join(&dest_filename);
    
    // Copy the file
    std::fs::copy(source_path, &dest_path)
        .map_err(|e| format!("Failed to copy skin file: {}", e))?;
        
    // Create metadata for the custom skin
    let custom_skin = CustomSkinData {
        id: skin_id,
        name: skin_name,
        champion_id,
        champion_name,
        file_path: dest_path.to_string_lossy().to_string(),
        created_at: chrono::Utc::now().timestamp() as u64,
        preview_image: None, // We'll leave preview generation for a future enhancement
    };
    
    // Save metadata about this custom skin
    save_custom_skin(&app, &custom_skin).await?;
    
    Ok(custom_skin)
}

#[tauri::command]
pub async fn get_custom_skins(
    app: tauri::AppHandle
) -> Result<Vec<CustomSkinData>, String> {
    let config_dir = app.path().app_data_dir()
        .map_err(|e| format!("Failed to get app data dir: {}", e))?
        .join("config");
    let file = config_dir.join("custom_skins.json");
    
    if !file.exists() {
        return Ok(Vec::new());
    }
    
    let data = std::fs::read_to_string(&file)
        .map_err(|e| format!("Failed to read custom skins data: {}", e))?;
        
    let custom_skins: Vec<CustomSkinData> = serde_json::from_str(&data)
        .map_err(|e| format!("Failed to parse custom skins data: {}", e))?;
        
    Ok(custom_skins)
}


#[tauri::command]
pub async fn delete_custom_skin(
    app: tauri::AppHandle,
    skin_id: String
) -> Result<(), String> {
    // Get all custom skins
    let custom_skins = get_custom_skins(app.clone()).await?;
    
    // Find the skin to delete
    let skin_to_delete = custom_skins.iter().find(|skin| skin.id == skin_id)
        .ok_or_else(|| format!("Custom skin with ID {} not found", skin_id))?;
    
    // Delete the skin file
    let file_path = std::path::Path::new(&skin_to_delete.file_path);
    if file_path.exists() {
        std::fs::remove_file(file_path)
            .map_err(|e| format!("Failed to delete skin file: {}", e))?;
    }
    
    // Update the custom skins list
    let updated_skins: Vec<CustomSkinData> = custom_skins.into_iter()
        .filter(|skin| skin.id != skin_id)
        .collect();
        
    // Save the updated list
    let config_dir = app.path().app_data_dir()
        .map_err(|e| format!("Failed to get app data dir: {}", e))?
        .join("config");
    std::fs::create_dir_all(&config_dir)
        .map_err(|e| format!("Failed to create config dir: {}", e))?;
        
    let file = config_dir.join("custom_skins.json");
    let data = serde_json::to_string_pretty(&updated_skins)
        .map_err(|e| format!("Failed to serialize custom skins: {}", e))?;
        
    std::fs::write(&file, data)
        .map_err(|e| format!("Failed to write custom_skins.json: {}", e))?;
        
    Ok(())
}

async fn get_champion_name(app: &tauri::AppHandle, champion_id: u32) -> Result<String, String> {
    let app_data_dir = app.path().app_data_dir()
        .map_err(|e| format!("Failed to get app data dir: {}", e))?;
        
    let champions_dir = app_data_dir.join("champions");
    
    // Look through champion directories to find the one with matching ID
    if champions_dir.exists() {
        for entry in std::fs::read_dir(champions_dir).map_err(|e| e.to_string())? {
            if let Ok(entry) = entry {
                let path = entry.path();
                if path.is_dir() {
                    let json_file = path.join(format!("{}.json", entry.file_name().to_string_lossy()));
                    
                    if json_file.exists() {
                        if let Ok(content) = std::fs::read_to_string(&json_file) {
                            if let Ok(data) = serde_json::from_str::<serde_json::Value>(&content) {
                                if let Some(id) = data.get("id").and_then(|v| v.as_u64()) {
                                    if id as u32 == champion_id {
                                        if let Some(name) = data.get("name").and_then(|v| v.as_str()) {
                                            let _name = name;
                                            // Use champion directory name instead of display name for consistency
                                            return Ok(entry.file_name().to_string_lossy().to_string());
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    // Fallback
    Ok(format!("champion_{}", champion_id))
}

async fn save_custom_skin(app: &tauri::AppHandle, custom_skin: &CustomSkinData) -> Result<(), String> {
    // Get all existing custom skins
    let mut custom_skins = get_custom_skins(app.clone()).await.unwrap_or_default();
    
    // Add the new skin
    custom_skins.push(custom_skin.clone());
    
    // Save to file
    let config_dir = app.path().app_data_dir()
        .map_err(|e| format!("Failed to get app data dir: {}", e))?
        .join("config");
    std::fs::create_dir_all(&config_dir)
        .map_err(|e| format!("Failed to create config dir: {}", e))?;
        
    let file = config_dir.join("custom_skins.json");
    let data = serde_json::to_string_pretty(&custom_skins)
        .map_err(|e| format!("Failed to serialize custom skins: {}", e))?;
        
    std::fs::write(&file, data)
        .map_err(|e| format!("Failed to write custom_skins.json: {}", e))?;
    
    Ok(())
}

//-==================== END OF FILE: src-tauri\src\commands\custom_skins.rs ====================-//

//-==================== START OF FILE: src-tauri\src\commands\data_updates.rs ====================-//

use crate::commands::types::*;
use tauri::{AppHandle, Manager, State};
use std::fs;
use std::path::PathBuf;
use serde_json;
use chrono;
use super::manifest::{build_skin_manifest, ManifestState};

#[tauri::command]
pub async fn check_data_updates(app: tauri::AppHandle) -> Result<DataUpdateResult, String> {
    let app_data_dir = app.path().app_data_dir()
        .map_err(|e| format!("Failed to get app data directory: {}", e))?;
    let champions_dir = app_data_dir.join("champions");
    if !champions_dir.exists() {
        return Ok(DataUpdateResult {
            success: true,
            error: None,
            updated_champions: vec!["all".to_string()],
            has_update: false,
            current_version: None,
            available_version: None,
            update_message: Some("Initial data download required".to_string()),
        });
    }
    match check_github_updates(app.clone()).await {
        Ok(update_info) => Ok(update_info),
        Err(e) => Ok(DataUpdateResult {
            success: false,
            error: Some(format!("Failed to check for updates: {}", e)),
            updated_champions: vec![],
            has_update: false,
            current_version: None,
            available_version: None,
            update_message: Some("Failed to check for updates".to_string()),
        }),
    }
}

#[tauri::command]
pub async fn update_champion_data(
    app: tauri::AppHandle,
    champion_name: String,
    data: String,
) -> Result<(), String> {
    let app_data_dir = app.path().app_data_dir()
        .or_else(|e| Err(format!("Failed to get app data directory: {}", e)))?;
    
    let champion_dir = app_data_dir.join("champions").join(&champion_name);
    fs::create_dir_all(&champion_dir)
        .map_err(|e| format!("Failed to create champion directory: {}", e))?;

    let champion_file = champion_dir.join(format!("{}.json", champion_name));
    fs::write(champion_file, data)
        .map_err(|e| format!("Failed to write champion data: {}", e))?;

    Ok(())
}

#[tauri::command]
pub async fn check_champions_data(app: tauri::AppHandle) -> Result<bool, String> {
    let app_data_dir = app.path().app_data_dir()
        .or_else(|e| Err(format!("Failed to get app data directory: {}", e)))?;
    
    let champions_dir = app_data_dir.join("champions");
    if !champions_dir.exists() {
        return Ok(false);
    }

    let has_data = fs::read_dir(champions_dir)
        .map_err(|e| format!("Failed to read champions directory: {}", e))?
        .filter_map(|entry| entry.ok())
        .filter(|entry| entry.path().is_dir())
        .any(|champion_dir| {
            fs::read_dir(champion_dir.path())
                .ok()
                .map_or(false, |mut entries| {
                    entries.any(|entry| {
                        entry.map_or(false, |e| {
                            e.path().extension().and_then(|s| s.to_str()) == Some("json")
                        })
                    })
                })
        });

    Ok(has_data)
}

#[tauri::command]
pub async fn check_github_updates(app: tauri::AppHandle) -> Result<DataUpdateResult, String> {
    println!("Checking for skin data updates from GitHub...");
    
    let client = reqwest::Client::builder()
        .user_agent(USER_AGENT)
        .build()
        .map_err(|e| format!("Failed to create HTTP client: {}", e))?;

    let url = format!("{}/commits/main", GITHUB_API_URL);
    
    let response = client.get(&url)
        .header("Accept", "application/vnd.github+json")
        .header("X-GitHub-Api-Version", GITHUB_API_VERSION)
        .send()
        .await
        .map_err(|e| format!("Network error connecting to GitHub: {}", e))?;
    
    if !response.status().is_success() {
        let status = response.status();
        let error_body = response.text().await.unwrap_or_else(|_| "Unknown error".to_string());
        return Err(format!("GitHub API returned error: {} - {}", status, error_body));
    }

    let latest_commit: GitHubCommit = response.json().await.map_err(|e| format!("Failed to parse GitHub response: {}", e))?;
    
    let current_version = load_data_version(&app)?;
    let has_update = match &current_version {
        Some(current) => current.commit_hash.as_ref() != Some(&latest_commit.sha),
        None => true,
    };
    
    let current_version_str = current_version.map(|v| v.version);
        
    let result = DataUpdateResult {
        success: true,
        error: None,
        updated_champions: Vec::new(),
        has_update,
        current_version: current_version_str,
        available_version: Some(latest_commit.sha[0..7].to_string()),
        update_message: Some(latest_commit.commit.message.lines().next().unwrap_or("Update available").to_string()),
    };
    
    Ok(result)
}

#[tauri::command]
pub async fn update_champion_data_from_github(app: tauri::AppHandle, state: State<'_, ManifestState>) -> Result<DataUpdateResult, String> {
    println!("Updating skin manifest from GitHub...");
    
    build_skin_manifest(app.clone(), state).await?;

    let client = reqwest::Client::builder().user_agent(USER_AGENT).build().map_err(|e| e.to_string())?;
    let url = format!("{}/commits/main", GITHUB_API_URL);
    let latest_commit: GitHubCommit = client.get(&url).send().await.map_err(|e| e.to_string())?.json().await.map_err(|e| e.to_string())?;

    let new_version = DataVersion {
        version: latest_commit.sha[0..7].to_string(),
        timestamp: latest_commit.commit.committer.date.clone(),
        commit_hash: Some(latest_commit.sha.clone()),
        last_checked: chrono::Utc::now().timestamp(),
        last_updated: chrono::Utc::now().timestamp(),
    };
    
    save_data_version(&app, &new_version)?;
    
    Ok(DataUpdateResult {
        success: true,
        error: None,
        updated_champions: Vec::new(),
        has_update: false,
        current_version: Some(new_version.version.clone()),
        available_version: Some(new_version.version),
        update_message: Some("Skin manifest updated successfully.".to_string()),
    })
}

fn get_data_version_path(app: &AppHandle) -> Result<PathBuf, String> {
    let config_dir = app.path().app_data_dir().map_err(|e| e.to_string())?.join("config");
    fs::create_dir_all(&config_dir).map_err(|e| e.to_string())?;
    Ok(config_dir.join("data_version.json"))
}

fn save_data_version(app: &AppHandle, version: &DataVersion) -> Result<(), String> {
    let file_path = get_data_version_path(app)?;
    let data = serde_json::to_string_pretty(version).map_err(|e| e.to_string())?;
    fs::write(&file_path, data).map_err(|e| e.to_string())
}

fn load_data_version(app: &AppHandle) -> Result<Option<DataVersion>, String> {
    let file_path = get_data_version_path(app)?;
    if !file_path.exists() {
        return Ok(None);
    }
    let content = fs::read_to_string(&file_path).map_err(|e| e.to_string())?;
    if content.trim().is_empty() {
        return Ok(None);
    }
    let version: DataVersion = serde_json::from_str(&content).map_err(|e| e.to_string())?;
    Ok(Some(version))
}

//-==================== END OF FILE: src-tauri\src\commands\data_updates.rs ====================-//

//-==================== START OF FILE: src-tauri\src\commands\file_operations.rs ====================-//

use crate::commands::types::*;
use tauri::{Manager};
use std::fs;
use serde_json;

#[tauri::command]
pub async fn save_fantome_file(
    app: tauri::AppHandle,
    champion_name: String,
    skin_name: String,
    is_chroma: bool,
    chroma_id: Option<u32>,
    content: Vec<u8>,
) -> Result<(), String> {
    let app_data_dir = app.path().app_data_dir()
        .or_else(|e| Err(format!("Failed to get app data directory: {}", e)))?;
    
    // Create champions directory if it doesn't exist
    let champions_dir = app_data_dir.join("champions");
    fs::create_dir_all(&champions_dir)
        .map_err(|e| format!("Failed to create champions directory: {}", e))?;
    
    // Create champion directory if it doesn't exist
    let champion_dir = champions_dir.join(&champion_name);
    fs::create_dir_all(&champion_dir)
        .map_err(|e| format!("Failed to create champion directory: {}", e))?;
    
    let fantome_file = if is_chroma {
        champion_dir.join(format!("{}_chroma_{}.fantome", skin_name, chroma_id.unwrap_or(0)))
    } else {
        champion_dir.join(format!("{}.fantome", skin_name))
    };
    
    // Ensure parent directory exists
    if let Some(parent) = fantome_file.parent() {
        fs::create_dir_all(parent)
            .map_err(|e| format!("Failed to create parent directory: {}", e))?;
    }
    
    fs::write(&fantome_file, content)
        .map_err(|e| format!("Failed to write fantome file: {}", e))?;

    Ok(())
}

#[tauri::command]
pub async fn get_champion_data(
    app: tauri::AppHandle,
    champion_id: u32,
) -> Result<String, String> {
    let app_data_dir = app.path().app_data_dir()
        .or_else(|e| Err(format!("Failed to get app data directory: {}", e)))?;
    
    let champions_dir = app_data_dir.join("champions");
    if !champions_dir.exists() {
        return Ok("[]".to_string()); // Return empty array if no champions directory exists
    }

    // If champion_id is 0, return all champions
    if champion_id == 0 {
        let mut all_champions = Vec::new();
        for entry in fs::read_dir(champions_dir)
            .map_err(|e| format!("Failed to read champions directory: {}", e))? {
            let entry = entry.map_err(|e| format!("Failed to read directory entry: {}", e))?;
            let path = entry.path();
            if path.is_dir() {
                // Look for JSON files in the champion directory
                for champion_file in fs::read_dir(path)
                    .map_err(|e| format!("Failed to read champion directory: {}", e))? {
                    let champion_file = champion_file.map_err(|e| format!("Failed to read champion file: {}", e))?;
                    let file_path = champion_file.path();
                    if file_path.extension().and_then(|s| s.to_str()) == Some("json") {
                        let data = fs::read_to_string(&file_path)
                            .map_err(|e| format!("Failed to read champion file: {}", e))?;
                        all_champions.push(data);
                    }
                }
            }
        }
        return Ok(format!("[{}]", all_champions.join(",")));
    }

    // Otherwise, return data for specific champion
    // We need to search through all champion directories to find the one with matching ID
    for entry in fs::read_dir(champions_dir)
        .map_err(|e| format!("Failed to read champions directory: {}", e))? {
        let entry = entry.map_err(|e| format!("Failed to read directory entry: {}", e))?;
        let path = entry.path();
        if path.is_dir() {
            let champion_name = path.file_name()
                .and_then(|n| n.to_str())
                .ok_or_else(|| format!("Invalid champion directory name"))?;
            let champion_file = path.join(format!("{}.json", champion_name));
            if champion_file.exists() {
                return fs::read_to_string(champion_file)
                    .map_err(|e| format!("Failed to read champion data: {}", e));
            }
        }
    }

    Err(format!("Champion data not found for ID: {}", champion_id))
}

#[tauri::command]
pub async fn delete_champions_cache(app: tauri::AppHandle) -> Result<(), String> {
    let app_data_dir = app.path().app_data_dir()
        .or_else(|e| Err(format!("Failed to get app data directory: {}", e)))?;
    
    let champions_dir = app_data_dir.join("champions");
    
    // If the directory exists, remove it and all its contents
    if champions_dir.exists() {
        fs::remove_dir_all(&champions_dir)
            .map_err(|e| format!("Failed to delete champions cache: {}", e))?;
    }
    
    Ok(())
}

#[tauri::command]
pub async fn save_selected_skins(
    app: tauri::AppHandle, 
    league_path: String, 
    skins: Vec<SkinData>, 
    favorites: Vec<u32>,
    theme: Option<ThemePreferences>
) -> Result<(), String> {
    let config_dir = app.path().app_data_dir()
        .map_err(|e| format!("Failed to get app data dir: {}", e))?
        .join("config");
    std::fs::create_dir_all(&config_dir)
        .map_err(|e| format!("Failed to create config dir: {}", e))?;
    let file = config_dir.join("config.json");
    // build combined JSON
    let config_json = serde_json::json!({
        "league_path": league_path,
        "skins": skins,
        "favorites": favorites,
        "theme": theme
    });
    let data = serde_json::to_string_pretty(&config_json)
        .map_err(|e| format!("Failed to serialize config: {}", e))?;
    std::fs::write(&file, data)
        .map_err(|e| format!("Failed to write config.json: {}", e))?;
    Ok(())
}

// New command to load config.json (league path + skins)
#[tauri::command]
pub async fn load_config(app: tauri::AppHandle) -> Result<SavedConfig, String> {
    let config_dir = app.path().app_data_dir()
        .map_err(|e| format!("Failed to get app data dir: {}", e))?
        .join("config");
    let file = config_dir.join("config.json");
    if !file.exists() {
        return Ok(SavedConfig { league_path: None, skins: Vec::new(), favorites: Vec::new(), theme: None });
    }
    let content = std::fs::read_to_string(&file)
        .map_err(|e| format!("Failed to read config.json: {}", e))?;
    let cfg: SavedConfig = serde_json::from_str(&content)
        .map_err(|e| format!("Failed to parse config.json: {}", e))?;
    Ok(cfg)
}

//-==================== END OF FILE: src-tauri\src\commands\file_operations.rs ====================-//

//-==================== START OF FILE: src-tauri\src\commands\lcu_communication.rs ====================-//

use crate::commands::types::Friend;
use tauri::{AppHandle};
use std::fs;
use std::time::Duration;
use serde_json;
use std::path::Path;
use crate::commands::skin_management::{inject_skins_for_champions};
use base64::Engine as _;
use std::sync::OnceLock;

#[tauri::command]
pub async fn start_lcu_watcher(app: AppHandle, league_path: String) -> Result<(), String> {
    println!("Starting LCU status watcher for path: {}", league_path);
    let app_handle = app.clone();
    let league_path_clone = league_path.clone();
    tokio::spawn(async move {
        let mut last_phase = String::new();
        let mut last_champion_ids: Vec<i64> = Vec::new();
        let client = get_lcu_client();
        loop {
            let fast_phases = ["ChampSelect", "Matchmaking", "Preparing"];
            let sleep_duration = if fast_phases.contains(&last_phase.as_str()) {
                Duration::from_secs(1)
            } else {
                Duration::from_secs(3)
            };

            if let Some((port, token)) = find_and_parse_lockfile(&league_path_clone) {
                let auth = base64::engine::general_purpose::STANDARD.encode(format!("riot:{}", token));
                let phase_url = format!("https://127.0.0.1:{}/lol-gameflow/v1/gameflow-phase", port);
                
                let phase = match client.get(&phase_url).header("Authorization", format!("Basic {}", auth)).send().await {
                    Ok(resp) if resp.status().is_success() => resp.text().await.unwrap_or_else(|_| "None".to_string()).trim_matches('"').to_string(),
                    _ => "None".to_string(),
                };
                
                let mut champion_ids: Vec<i64> = Vec::new();
                let endpoints = ["/lol-champ-select/v1/session", "/lol-gameflow/v1/session", "/lol-lobby/v2/lobby"];
                for endpoint in endpoints.iter() {
                    let url = format!("https://127.0.0.1:{}{}", port, endpoint);
                    if let Ok(resp) = client.get(&url).header("Authorization", format!("Basic {}", &auth)).send().await {
                        if resp.status().is_success() {
                            if let Ok(json) = resp.json::<serde_json::Value>().await {
                                let ids = get_selected_champions_universal(&json);
                                if !ids.is_empty() {
                                    champion_ids = ids;
                                    break;
                                }
                            }
                        }
                    }
                }
                
                if champion_ids != last_champion_ids {
                    let valid_champion_ids: Vec<i64> = champion_ids.iter().filter(|&&id| id > 0).cloned().collect();
                    if !valid_champion_ids.is_empty() {
                        println!("[INJECT] Injecting skins for champion IDs: {:?} | Phase: {}", valid_champion_ids, phase);
                        inject_skins_for_champions(&app_handle, &league_path_clone, &valid_champion_ids);
                        last_champion_ids = valid_champion_ids;
                    }
                }
                last_phase = phase;
            }
            tokio::time::sleep(sleep_duration).await;
        }
    });
    Ok(())
}

#[tauri::command]
pub async fn get_lcu_friends(app: AppHandle, league_path: String) -> Result<Vec<Friend>, String> {
    let _app = app;
    let (port, token) = find_and_parse_lockfile(&league_path).ok_or("Lockfile not found")?;
    
    let client = get_lcu_client();
    let url = format!("https://127.0.0.1:{}/lol-chat/v1/friends", port);
    let auth = base64::engine::general_purpose::STANDARD.encode(format!("riot:{}", token));
    
    let resp = client.get(&url).header("Authorization", format!("Basic {}", auth)).send().await.map_err(|e| e.to_string())?;
    
    if resp.status().is_success() {
        let friends: Vec<Friend> = resp.json().await.map_err(|e| e.to_string())?;
        Ok(friends.into_iter().filter(|f| !f.id.is_empty() && !f.name.is_empty()).collect())
    } else {
        Err(format!("LCU API returned error: {}", resp.status()))
    }
}

#[tauri::command]
pub async fn send_lcu_message(_app: AppHandle, league_path: String, friend_id: String, message: String) -> Result<(), String> {
    let (port, token) = find_and_parse_lockfile(&league_path).ok_or("Lockfile not found")?;
    let client = get_lcu_client();
    let url = format!("https://127.0.0.1:{}/lol-chat/v1/conversations/{}/messages", port, friend_id);
    let auth = base64::engine::general_purpose::STANDARD.encode(format!("riot:{}", token));
    
    let payload = serde_json::json!({ "body": message, "type": "chat" });
    
    let resp = client.post(&url)
        .header("Authorization", format!("Basic {}", auth))
        .json(&payload)
        .send()
        .await
        .map_err(|e| e.to_string())?;

    if resp.status().is_success() {
        Ok(())
    } else {
        Err(format!("LCU API returned error: {}", resp.status()))
    }
}

#[tauri::command]
pub async fn get_lcu_messages(_app: AppHandle, league_path: String, friend_id: String) -> Result<serde_json::Value, String> {
    let (port, token) = find_and_parse_lockfile(&league_path).ok_or("Lockfile not found")?;
    let client = get_lcu_client();
    let auth = base64::engine::general_purpose::STANDARD.encode(format!("riot:{}", token));
    
    let summoner_url = format!("https://127.0.0.1:{}/lol-summoner/v1/current-summoner", port);
    let my_summoner: serde_json::Value = client.get(&summoner_url).header("Authorization", format!("Basic {}", &auth)).send().await.map_err(|e| e.to_string())?.json().await.map_err(|e| e.to_string())?;
    
    let my_puuid = my_summoner.get("puuid").and_then(|id| id.as_str()).ok_or("Could not get current summoner PUUID")?;
    
    let clean_friend_id = friend_id.split('@').next().unwrap_or(&friend_id);
    let mut ids = vec![my_puuid, clean_friend_id];
    ids.sort();
    let conversation_id = ids.join("_");
    
    let url = format!("https://127.0.0.1:{}/lol-chat/v1/conversations/{}/messages", port, conversation_id);
    let resp = client.get(&url).header("Authorization", format!("Basic {}", auth)).send().await.map_err(|e| e.to_string())?;
    
    if resp.status().is_success() {
        resp.json().await.map_err(|e| e.to_string())
    } else if resp.status() == 404 {
        Ok(serde_json::json!([]))
    } else {
        Err(format!("LCU API returned error: {}", resp.status()))
    }
}

pub fn get_lcu_client() -> reqwest::Client {
    static CLIENT: OnceLock<reqwest::Client> = OnceLock::new();
    CLIENT.get_or_init(|| {
        reqwest::Client::builder()
            .danger_accept_invalid_certs(true)
            .timeout(Duration::from_secs(5))
            .build()
            .unwrap()
    }).clone()
}

pub fn find_and_parse_lockfile(league_path: &str) -> Option<(String, String)> {
    for name in ["lockfile", "LeagueClientUx.lockfile", "LeagueClient.lockfile"] {
        let path = Path::new(league_path).join(name);
        if let Ok(content) = fs::read_to_string(path) {
            let parts: Vec<&str> = content.split(':').collect();
            if parts.len() >= 5 {
                return Some((parts[2].to_string(), parts[3].to_string()));
            }
        }
    }
    None
}

pub fn get_selected_champions_universal(json: &serde_json::Value) -> Vec<i64> {
    if let Some(my_team) = json.get("myTeam").and_then(|v| v.as_array()) {
        if let Some(local_player_cell_id) = json.get("localPlayerCellId").and_then(|v| v.as_i64()) {
            for player in my_team {
                if player.get("cellId").and_then(|v| v.as_i64()) == Some(local_player_cell_id) {
                    if let Some(champion_id) = player.get("championId").and_then(|v| v.as_i64()) {
                        if champion_id > 0 { return vec![champion_id]; }
                    }
                }
            }
        }
    }
    vec![]
}

pub fn detect_game_mode(json: &serde_json::Value) -> String {
    if let Some(game_data) = json.get("gameData") {
        if let Some(queue) = game_data.get("queue") {
            if let Some(mode) = queue.get("gameMode").and_then(|m| m.as_str()) {
                return mode.to_string();
            }
        }
    }
    "UNKNOWN".to_string()
}

pub fn extract_lobby_champions(json: &serde_json::Value, mode: &str, _league_path: &str) -> Vec<i64> {
    let mut champion_ids = Vec::new();
    if mode.to_uppercase().contains("SWIFT") || mode.to_uppercase().contains("ARENA") {
        if let Some(local_member) = json.get("localMember") {
            if let Some(slots) = local_member.get("playerSlots").and_then(|s| s.as_array()) {
                for slot in slots {
                    if let Some(id) = slot.get("championId").and_then(|c| c.as_i64()) {
                        if id > 0 { champion_ids.push(id); }
                    }
                }
            }
        }
    }
    champion_ids
}

//-==================== END OF FILE: src-tauri\src\commands\lcu_communication.rs ====================-//

//-==================== START OF FILE: src-tauri\src\commands\league_detection.rs ====================-//

use crate::commands::types::*;
use tauri::{AppHandle, Manager};
use std::path::Path;
use std::process::Command;
use std::fs;
use serde_json;
#[cfg(target_os = "windows")]
use std::os::windows::process::CommandExt;

#[tauri::command]
pub async fn select_league_directory() -> Result<String, String> {
    #[cfg(target_os = "windows")]
    const CREATE_NO_WINDOW: u32 = 0x08000000;

    let mut command = Command::new("powershell");
    
    #[cfg(target_os = "windows")]
    command.creation_flags(CREATE_NO_WINDOW); // CREATE_NO_WINDOW flag

    command
        .args([
            "-NoProfile",
            "-Command",
            r#"Add-Type -AssemblyName System.Windows.Forms; 
            $dialog = New-Object System.Windows.Forms.FolderBrowserDialog; 
            $dialog.Description = 'Select League of Legends Installation Directory'; 
            if($dialog.ShowDialog() -eq 'OK') { $dialog.SelectedPath }"#,
        ]);
    
    let output = command
        .output()
        .map_err(|e| format!("Failed to execute powershell command: {}", e))?;

    if !output.status.success() {
        return Err("Directory selection cancelled".to_string());
    }

    let path = String::from_utf8(output.stdout)
        .map_err(|e| format!("Failed to parse selected path: {}", e))?
        .trim()
        .to_string();

    if path.is_empty() {
        return Err("No directory selected".to_string());
    }

    // Validate that this appears to be a League of Legends directory
    // Check for either the Game\League of Legends.exe or LeagueClient.exe
    let selected_dir = Path::new(&path);
    let game_exe_path = selected_dir.join("Game").join("League of Legends.exe");
    let client_exe_path = selected_dir.join("LeagueClient.exe");
    
    if !client_exe_path.exists() && !game_exe_path.exists() {
        return Err("Selected directory does not appear to be a valid League of Legends installation".to_string());
    }

    // Always return the root League directory path
    Ok(path)
}

#[tauri::command]
pub async fn auto_detect_league() -> Result<String, String> {
    // Common League of Legends installation paths on Windows
    let common_paths = [
        r"C:\Riot Games\League of Legends",
        r"C:\Program Files\Riot Games\ League of Legends",
        r"C:\Program Files (x86)\Riot Games\League of Legends",
    ];

    for path in common_paths.iter() {
        let client_path = Path::new(path).join("LeagueClient.exe");
        if client_path.exists() {
            return Ok(path.to_string());
        }
    }

    // Try to find through registry as fallback
    let mut command = Command::new("powershell");
    #[cfg(target_os = "windows")]
    command.creation_flags(0x08000000); // CREATE_NO_WINDOW flag

    command
        .args([
            "-NoProfile",
            "-Command",
            r#"Get-ItemProperty -Path 'HKLM:\SOFTWARE\WOW6432Node\Riot Games, Inc\League of Legends' -Name 'Location' -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Location"#,
        ]);

    if let Ok(output) = command.output() {
        if output.status.success() {
            if let Ok(path) = String::from_utf8(output.stdout) {
                let path = path.trim();
                if !path.is_empty() {
                    let path = Path::new(path);
                    if path.join("LeagueClient.exe").exists() {
                        return Ok(path.to_string_lossy().to_string());
                    }
                }
            }
        }
    }

    Err("League of Legends installation not found".to_string())
}

// Add functions to save and load game path
#[tauri::command]
pub async fn save_league_path(app: tauri::AppHandle, path: String) -> Result<(), String> {
    println!("Saving League path: {}", path);
    
    let app_data_dir = app.path().app_data_dir()
        .or_else(|e| Err(format!("Failed to get app data directory: {}", e)))?;
    
    // Create config directory if it doesn't exist
    let config_dir = app_data_dir.join("config");
    fs::create_dir_all(&config_dir)
        .map_err(|e| format!("Failed to create config directory: {}", e))?;
    
    // Save path to config file
    let config_file = config_dir.join("league_path.txt");
    fs::write(&config_file, &path)
        .map_err(|e| format!("Failed to write league path: {}", e))?;
    
    Ok(())
}

#[tauri::command]
pub async fn load_league_path(app: tauri::AppHandle) -> Result<String, String> {
    let app_data_dir = app.path().app_data_dir()
        .or_else(|e| Err(format!("Failed to get app data directory: {}", e)))?;
    
    let config_file = app_data_dir.join("config").join("league_path.txt");
    
    if !config_file.exists() {
        return Ok(String::new()); // Return empty string if no saved path
    }
    
    let path = fs::read_to_string(&config_file)
        .map_err(|e| format!("Failed to read league path: {}", e))?;
    
    // Verify the path still exists and contains either:
    // - Game/League of Legends.exe (game executable)
    // - LeagueClient.exe (client executable)
    let game_path = Path::new(&path);
    let game_exe_path = game_path.join("Game").join("League of Legends.exe");
    let client_exe_path = game_path.join("LeagueClient.exe");
    
    if !game_path.exists() || (!game_exe_path.exists() && !client_exe_path.exists()) {
        return Ok(String::new()); // Return empty if path is no longer valid
    }
    
    println!("Loaded League path: {}", path);
    Ok(path)
}

// Helper function to get league path from config
#[allow(dead_code)]
pub fn get_league_path_from_config(app_handle: &AppHandle) -> Option<String> {
    if let Ok(app_data_dir) = app_handle.path().app_data_dir() {
        let config_file = app_data_dir.join("config").join("config.json");
        if config_file.exists() {
            if let Ok(content) = fs::read_to_string(&config_file) {
                if let Ok(config) = serde_json::from_str::<SavedConfig>(&content) {
                    return config.league_path;
                }
            }
        }
        
        // Try the legacy league_path.txt file as fallback
        let legacy_path_file = app_data_dir.join("config").join("league_path.txt");
        if legacy_path_file.exists() {
            if let Ok(path) = fs::read_to_string(&legacy_path_file) {
                if !path.trim().is_empty() {
                    return Some(path.trim().to_string());
                }
            }
        }
    }
    None
}


//-==================== END OF FILE: src-tauri\src\commands\league_detection.rs ====================-//

//-==================== START OF FILE: src-tauri\src\commands\manifest.rs ====================-//

use serde::{Deserialize, Serialize};
use std::collections::HashMap;
use std::fs;
use std::path::{Path, PathBuf};
use std::sync::{Arc, Mutex};
use std::time::{Instant, SystemTime, UNIX_EPOCH};
use tauri::{AppHandle, Manager, State};
use anyhow::Result;

use super::types::{USER_AGENT, GITHUB_API_URL, GITHUB_API_VERSION};

#[derive(Serialize, Deserialize, Debug, Clone)]
struct SkinManifest {
    mappings: HashMap<u32, String>,
    last_updated_secs: u64,
}

impl Default for SkinManifest {
    fn default() -> Self {
        SkinManifest {
            mappings: HashMap::new(),
            last_updated_secs: 0,
        }
    }
}

#[derive(Deserialize, Debug)]
struct CommunityDragonSkin {
    id: i64,
    name: String,
}

#[derive(Deserialize, Debug)]
struct GitHubTreeItem {
    path: String,
    #[serde(rename = "type")]
    item_type: String,
}

#[derive(Deserialize, Debug)]
struct GitHubTreeResponse {
    tree: Vec<GitHubTreeItem>,
}

pub struct ManifestState(pub Arc<Mutex<SkinManifest>>);

impl ManifestState {
    pub fn new() -> Self {
        Self(Arc::new(Mutex::new(SkinManifest::default())))
    }
}

fn sanitize_name(name: &str) -> String {
    name.to_lowercase()
        .chars()
        .filter(|c| c.is_alphanumeric())
        .collect()
}

async fn fetch_community_dragon_skins() -> Result<Vec<CommunityDragonSkin>> {
    let url = "https://raw.communitydragon.org/latest/plugins/rcp-be-lol-game-data/global/default/v1/skins.json";
    let client = reqwest::Client::new();
    let response = client.get(url).send().await?.json::<serde_json::Value>().await?;
    let skins_map: HashMap<String, CommunityDragonSkin> = serde_json::from_value(response)?;
    Ok(skins_map.into_values().collect())
}

async fn fetch_github_repo_files() -> Result<Vec<GitHubTreeItem>> {
    let url = format!("{}/git/trees/main?recursive=1", GITHUB_API_URL);
    let client = reqwest::Client::builder().user_agent(USER_AGENT).build()?;
    let response = client.get(&url)
        .header("Accept", "application/vnd.github+json")
        .header("X-GitHub-Api-Version", GITHUB_API_VERSION)
        .send()
        .await?
        .json::<GitHubTreeResponse>()
        .await?;
    Ok(response.tree)
}

fn get_manifest_path(app: &AppHandle) -> Result<PathBuf> {
    let path = app.path().app_data_dir()?.join("skin_manifest.json");
    Ok(path)
}

pub fn load_manifest_from_disk(app: &AppHandle) -> SkinManifest {
    if let Ok(path) = get_manifest_path(app) {
        if let Ok(data) = fs::read_to_string(path) {
            if let Ok(manifest) = serde_json::from_str::<SkinManifest>(&data) {
                let now_secs = SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_secs();
                if now_secs.saturating_sub(manifest.last_updated_secs) > (24 * 3600) {
                    println!("Manifest is older than 24 hours, will be refreshed.");
                    return SkinManifest::default();
                }
                return manifest;
            }
        }
    }
    SkinManifest::default()
}

#[tauri::command]
pub async fn build_skin_manifest(app: AppHandle, state: State<'_, ManifestState>) -> Result<(), String> {
    println!("Building skin manifest...");
    let start_time = Instant::now();

    let cdrag_handle = tokio::spawn(fetch_community_dragon_skins());
    let github_handle = tokio::spawn(fetch_github_repo_files());

    let cdrag_skins = cdrag_handle.await.map_err(|e| e.to_string())?.map_err(|e| e.to_string())?;
    let github_files = github_handle.await.map_err(|e| e.to_string())?.map_err(|e| e.to_string())?;

    let mut repo_map: HashMap<String, String> = HashMap::new();
    for item in github_files {
        if item.item_type == "blob" && item.path.starts_with("skins/") && item.path.ends_with(".zip") {
            if let Some(sanitized_name) = Path::new(&item.path).file_stem().and_then(|s| s.to_str()).map(sanitize_name) {
                let repo_path = item.path.strip_prefix("skins/").unwrap_or(&item.path).to_string();
                repo_map.insert(sanitized_name, repo_path);
            }
        }
    }

    let mut final_manifest: HashMap<u32, String> = HashMap::new();
    for skin in cdrag_skins {
        let sanitized_cdrag_name = sanitize_name(&skin.name);
        if let Some(repo_path) = repo_map.get(&sanitized_cdrag_name) {
            final_manifest.insert(skin.id as u32, repo_path.clone());
        }
    }
    
    let manifest_to_save = SkinManifest {
        mappings: final_manifest.clone(),
        last_updated_secs: SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_secs(),
    };

    let manifest_path = get_manifest_path(&app).map_err(|e| e.to_string())?;
    let manifest_json = serde_json::to_string(&manifest_to_save).map_err(|e| e.to_string())?;
    fs::write(manifest_path, manifest_json).map_err(|e| e.to_string())?;

    let mut state_lock = state.0.lock().unwrap();
    *state_lock = manifest_to_save;

    println!("Skin manifest built successfully in {:?}. Mapped {} skins.", start_time.elapsed(), state_lock.mappings.len());
    Ok(())
}

#[tauri::command]
pub async fn get_skin_path(skin_id: u32, state: State<'_, ManifestState>) -> Result<Option<String>, String> {
    let state_lock = state.0.lock().unwrap();
    Ok(state_lock.mappings.get(&skin_id).cloned())
}

//-==================== END OF FILE: src-tauri\src\commands\manifest.rs ====================-//

//-==================== START OF FILE: src-tauri\src\commands\mod.rs ====================-//

pub mod skin_management;
pub mod league_detection;
pub mod data_updates;
pub mod lcu_communication;
pub mod custom_skins;
pub mod file_operations;
pub mod types;
pub mod manifest;

pub use skin_management::*;
pub use league_detection::*;
pub use data_updates::*;
pub use lcu_communication::*;
pub use custom_skins::*;
pub use file_operations::*;
pub use manifest::*;

//-==================== END OF FILE: src-tauri\src\commands\mod.rs ====================-//

//-==================== START OF FILE: src-tauri\src\commands\skin_management.rs ====================-//

use crate::injection::{Skin, inject_skins as inject_skins_impl};
use crate::commands::types::*;
use tauri::{AppHandle, Manager, Emitter};
use std::path::{Path, PathBuf};
use std::fs;
use serde_json;
use crate::commands::league_detection::save_league_path;

#[tauri::command]
pub async fn inject_skins(
    app: tauri::AppHandle,
    request: SkinInjectionRequest,
) -> Result<(), String> {
    println!("Starting skin injection process");
    println!("League path: {}", request.league_path);
    println!("Number of skins to inject: {}", request.skins.len());
    
    let app_data_dir = app.path().app_data_dir()
        .or_else(|e| Err(format!("Failed to get app data directory: {}", e)))?;
    
    let fantome_files_dir = app_data_dir.join("champions");
    println!("Fantome files directory: {}", fantome_files_dir.display());
    
    let _ = app.emit("injection-status", "injecting");
    
    let result = inject_skins_impl(
        &app,
        &request.league_path,
        &request.skins,
        &fantome_files_dir,
    );
    
    match result {
        Ok(_) => {
            println!("Skin injection completed successfully");
            let _ = app.emit("injection-status", "success");
            Ok(())
        },
        Err(err) => {
            println!("Skin injection failed: {}", err);
            Err(format!("Injection failed: {}", err))
        }
    }
}

#[tauri::command]
pub async fn inject_game_skins(
    app_handle: AppHandle,
    game_path: String,
    skins: Vec<SkinData>, 
    fantome_files_dir: String
) -> Result<String, String> {
    println!("Starting skin injection process");
    println!("League path: {}", game_path);
    println!("Number of skins to inject: {}", skins.len());
    println!("Fantome files directory: {}", fantome_files_dir);

    let _ = app_handle.emit("injection-status", true);

    if !Path::new(&game_path).exists() {
        let _ = app_handle.emit("injection-status", false);
        return Err(format!("League of Legends directory not found: {}", game_path));
    }
    
    let base_path = Path::new(&fantome_files_dir);
    if !base_path.exists() {
        println!("Creating fantome files directory: {}", base_path.display());
        fs::create_dir_all(base_path)
            .map_err(|e| {
                let _ = app_handle.emit("injection-status", false);
                format!("Failed to create fantome directory: {}", e)
            })?;
    }

    save_league_path(app_handle.clone(), game_path.clone()).await?;

    let internal_skins: Vec<Skin> = skins.iter().map(|s| {
        Skin {
            champion_id: s.champion_id,
            skin_id: s.skin_id,
            chroma_id: s.chroma_id,
            fantome_path: s.fantome.clone(),
        }
    }).collect();

    let result = match inject_skins_impl(
        &app_handle,
        &game_path,
        &internal_skins,
        base_path
    ) {
        Ok(_) => {
            println!("Skin injection completed successfully");
            Ok("Skin injection completed successfully".to_string())
        },
        Err(e) => {
            println!("Skin injection failed: {}", e);
            Err(format!("Skin injection failed: {}", e))
        },
    };

    let _ = app_handle.emit("injection-status", false);
    
    result
}

pub fn inject_skins_for_champions(app: &AppHandle, league_path: &str, champion_ids: &[i64]) {
    println!("[LCU Injection] Attempting to inject skins for champions: {:?}", champion_ids);
    
    let valid_champion_ids: Vec<i64> = champion_ids.iter()
        .filter(|&&id| id > 0)
        .cloned()
        .collect();
        
    if valid_champion_ids.is_empty() {
        println!("[LCU Injection] No valid champion IDs to inject");
         return;
    }
    
    println!("[LCU Injection] Valid champion IDs: {:?}", valid_champion_ids);
    
    let config_dir = app.path().app_data_dir()
        .unwrap_or_else(|_| PathBuf::from("."))
        .join("config");
    let cfg_file = config_dir.join("config.json");
    
    if let Ok(data) = std::fs::read_to_string(&cfg_file) {
        if let Ok(config) = serde_json::from_str::<SavedConfig>(&data) {
            let mut skins_to_inject = Vec::new();
            
            for champ_id in &valid_champion_ids {
                let champ_id_u32 = *champ_id as u32;
                if let Some(skin) = config.skins.iter().find(|s| s.champion_id == champ_id_u32) {
                    skins_to_inject.push(Skin {
                        champion_id: skin.champion_id,
                        skin_id: skin.skin_id,
                        chroma_id: skin.chroma_id,
                        fantome_path: skin.fantome.clone(),
                    });
                }
            }
            
            if !skins_to_inject.is_empty() {
                let champions_dir = app.path().app_data_dir()
                    .unwrap_or_else(|_| PathBuf::from("."))
                    .join("champions");
                
                match crate::injection::inject_skins(app, league_path, &skins_to_inject, &champions_dir) {
                    Ok(_) => { let _ = app.emit("injection-status", "success"); },
                    Err(e) => { println!("Error injecting skins: {}", e); }
                }
            }
        }
    }
}

#[tauri::command]
pub async fn start_auto_inject(app: AppHandle, league_path: String) -> Result<(), String> {
    println!("Starting auto-inject for path: {}", league_path);
    
    crate::commands::lcu_communication::start_lcu_watcher(app.clone(), league_path.clone());
    Ok(())
}

#[tauri::command]
pub async fn force_inject_selected_skin(app: tauri::AppHandle, champion_id: u32) -> Result<(), String> {
    let app_data_dir = app.path().app_data_dir()
        .map_err(|e| format!("Failed to get app data directory: {}", e))?;
    let config_file = app_data_dir.join("config").join("config.json");
    if !config_file.exists() {
        return Err("No config file found with skin selections".to_string());
    }
    let config: SavedConfig = serde_json::from_str(&std::fs::read_to_string(&config_file).map_err(|e| e.to_string())?)
        .map_err(|e| format!("Failed to parse config: {}", e))?;
    let skin = config.skins.iter().find(|s| s.champion_id == champion_id)
        .ok_or_else(|| "No skin selected for this champion".to_string())?;
    let league_path = config.league_path.clone().ok_or_else(|| "No League path configured".to_string())?;
    let champions_dir = app_data_dir.join("champions");
    let inject_skin = crate::injection::Skin {
        champion_id: skin.champion_id,
        skin_id: skin.skin_id,
        chroma_id: skin.chroma_id,
        fantome_path: skin.fantome.clone(),
    };
    crate::injection::inject_skins(&app, &league_path, &[inject_skin], &champions_dir)
        .map_err(|e| format!("Injection failed: {}", e))
}

//-==================== END OF FILE: src-tauri\src\commands\skin_management.rs ====================-//

//-==================== START OF FILE: src-tauri\src\commands\types.rs ====================-//

use serde::{Deserialize, Serialize};
use crate::injection::Skin;

#[derive(Debug, Serialize, Deserialize)]
pub struct DataUpdateProgress {
    pub current_champion: String,
    pub total_champions: usize,
    pub processed_champions: usize,
    pub status: String,
    pub progress: f64,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SkinInjectionRequest {
    pub league_path: String,
    pub skins: Vec<Skin>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SkinData {
    pub champion_id: u32,
    pub skin_id: u32,
    pub chroma_id: Option<u32>,
    pub fantome: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct CustomSkinData {
    pub id: String,
    pub name: String,
    pub champion_id: u32,
    pub champion_name: String,
    pub file_path: String,
    pub created_at: u64,
    pub preview_image: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct DataVersion {
    pub version: String,
    pub timestamp: String,
    pub commit_hash: Option<String>,
    pub last_checked: i64,
    pub last_updated: i64,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct GitHubCommit {
    pub sha: String,
    pub commit: GitHubCommitDetail,
    pub html_url: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct GitHubCommitDetail {
    pub message: String,
    pub author: GitHubAuthor,
    pub committer: GitHubAuthor,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct GitHubAuthor {
    pub name: String,
    pub email: String,
    pub date: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GitHubCommitter {
    pub date: String,
    pub name: String,
    pub email: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GitHubCommitDetails {
    pub message: String,
    pub committer: GitHubCommitter,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct DataUpdateResult {
    pub success: bool,
    pub error: Option<String>,
    #[serde(default)]
    pub updated_champions: Vec<String>,
    #[serde(default)]
    pub has_update: bool,
    #[serde(default)]
    pub current_version: Option<String>,
    #[serde(default)]
    pub available_version: Option<String>,
    #[serde(default)]
    pub update_message: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct ThemePreferences {
    pub tone: Option<String>,
    pub is_dark: Option<bool>,
    pub auto_update_champion_data: Option<bool>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SavedConfig {
    pub league_path: Option<String>,
    pub skins: Vec<SkinData>,
    pub favorites: Vec<u32>,
    #[serde(default)]
    pub theme: Option<ThemePreferences>,
}

#[derive(Clone, Serialize, Deserialize)]
pub struct TerminalLog {
    pub message: String,
    pub log_type: String,
    pub timestamp: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Friend {
    pub id: String,
    pub name: String,
    pub availability: String,
    #[serde(rename = "gameTag")]
    pub game_tag: Option<String>,
    #[serde(rename = "note")]
    pub note: Option<String>,
}

pub const GITHUB_API_URL: &str = "https://api.github.com/repos/darkseal-org/lol-skins";
pub const USER_AGENT: &str = "osskins-app/1.1.2";
pub const GITHUB_API_VERSION: &str = "2022-11-28";

//-==================== END OF FILE: src-tauri\src\commands\types.rs ====================-//

//-==================== START OF FILE: src-tauri\src\debug_matchmaking.rs ====================-//

// Debug utilities for matchmaking phase detection

use serde_json::Value;

/// Utility for analyzing and recording matchmaking data for debugging
pub fn analyze_matchmaking_data(json: &Value, phase: &str) {
    // Only analyze matchmaking-related data
    let state = json.get("state").and_then(|s| s.as_str()).unwrap_or("UNKNOWN");
    
    if state == "MATCHMAKING" || state == "GAMESTARTING" || state == "PREPARING" || phase == "Matchmaking" {
        // All debug println! removed for cleaner logs
    }
}


//-==================== END OF FILE: src-tauri\src\debug_matchmaking.rs ====================-//

//-==================== START OF FILE: src-tauri\src\debug_swift_play.rs ====================-//

// Debug utilities for Swift Play specific issues

use serde_json::Value;

/// Utility for analyzing and recording Swift Play specific JSON data for debugging
pub fn analyze_swift_play_data(json: &Value, phase: &str) {
    // Only log relevant Swift Play data
    if let Some(game_data) = json.get("gameData") {
        let queue_id = game_data.get("queue")
            .and_then(|q| q.get("id"))
            .and_then(|id| id.as_i64())
            .unwrap_or(0);
            
        // Only log for Swift Play queue IDs
        if queue_id == 480 || queue_id == 1700 {
            // All debug println! removed for cleaner logs
        }
    }
}

//-==================== END OF FILE: src-tauri\src\debug_swift_play.rs ====================-//

//-==================== START OF FILE: src-tauri\src\injection\error.rs ====================-//

use std::io;

// Error handling similar to CS LOL Manager
#[derive(Debug)]
#[allow(dead_code)]
pub enum InjectionError {
    IoError(io::Error),
    InvalidGamePath(String),
    MissingFantomeFile(String),
    ProcessError(String),
    ConfigError(String),
    OverlayError(String),
    Timeout(String),
    Aborted(String),
    WalkdirError(walkdir::Error),
    ZipError(zip::result::ZipError),
}

impl std::fmt::Display for InjectionError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::IoError(err) => write!(f, "IO Error: {}", err),
            Self::InvalidGamePath(msg) => write!(f, "Invalid game path: {}", msg),
            Self::MissingFantomeFile(msg) => write!(f, "Missing fantome file: {}", msg),
            Self::ProcessError(msg) => write!(f, "Process error: {}", msg),
            Self::ConfigError(msg) => write!(f, "Configuration error: {}", msg),
            Self::OverlayError(msg) => write!(f, "Overlay error: {}", msg),
            Self::Timeout(msg) => write!(f, "Timeout: {}", msg),
            Self::Aborted(msg) => write!(f, "Aborted: {}", msg),
            Self::WalkdirError(err) => write!(f, "Walkdir error: {}", err),
            Self::ZipError(err) => write!(f, "Zip error: {}", err),
        }
    }
}

impl std::error::Error for InjectionError {}

impl From<io::Error> for InjectionError {
    fn from(err: io::Error) -> Self {
        Self::IoError(err)
    }
}

impl From<walkdir::Error> for InjectionError {
    fn from(err: walkdir::Error) -> Self {
        Self::WalkdirError(err)
    }
}

impl From<zip::result::ZipError> for InjectionError {
    fn from(err: zip::result::ZipError) -> Self {
        Self::ZipError(err)
    }
}

//-==================== END OF FILE: src-tauri\src\injection\error.rs ====================-//

//-==================== START OF FILE: src-tauri\src\injection\injector.rs ====================-//

use std::fs::{self, File};
use std::io::{self, Write};
use std::path::{Path, PathBuf};
use crate::injection::error::InjectionError;
use crate::injection::types::{Skin, ModState};
use tauri::{AppHandle, Manager, Emitter};
use walkdir::WalkDir;
use zip::ZipArchive;
use std::env;
use memmap2::MmapOptions;
use std::sync::{Arc, Mutex};
use once_cell::sync::Lazy;
#[cfg(target_os = "windows")]
use std::os::windows::process::CommandExt;

#[cfg(target_os = "windows")]
const CREATE_NO_WINDOW: u32 = 0x08000000;

static INJECTION_MUTEX: Lazy<Arc<Mutex<()>>> = Lazy::new(|| {
    Arc::new(Mutex::new(()))
});

pub struct SkinInjector {
    state: ModState,
    app_dir: PathBuf,
    #[allow(dead_code)]
    root_path: PathBuf,
    game_path: PathBuf,
    status: String,
    log_file: Option<File>,
    mod_tools_path: Option<PathBuf>,
    champion_names: std::collections::HashMap<u32, String>,
    app_handle: Option<AppHandle>,
}

impl SkinInjector {
    pub fn new(app_handle: &AppHandle, root_path: &str) -> Result<Self, InjectionError> {
        let app_dir = app_handle.path().app_data_dir()
            .map_err(|e| InjectionError::IoError(io::Error::new(io::ErrorKind::NotFound, format!("{}", e))))?;
        
        let root_path = PathBuf::from(root_path);
        let game_path = root_path.join("Game");
        
        if !game_path.join("League of Legends.exe").exists() {
            return Err(InjectionError::InvalidGamePath("Game\\League of Legends.exe not found".into()));
        }
        
        fs::create_dir_all(app_dir.join("mods"))?;
        fs::create_dir_all(app_dir.join("temp"))?;
        
        let log_path = app_dir.join("log.txt");
        let log_file = File::create(&log_path)?;

        let champion_names = std::collections::HashMap::new();

        let mut mod_tools_path = None;
        
        if let Ok(resource_dir) = app_handle.path().resource_dir() {
            let direct = resource_dir.join("mod-tools.exe");
            if direct.exists() {
                mod_tools_path = Some(direct.clone());
            }
            let sub = resource_dir.join("cslol-tools").join("mod-tools.exe");
            if sub.exists() {
                mod_tools_path = Some(sub.clone());
            }
        }
        
        if mod_tools_path.is_none() {
            if let Ok(app_local_dir) = app_handle.path().app_local_data_dir() {
                let candidate = app_local_dir.join("mod-tools.exe");
                if candidate.exists() {
                    mod_tools_path = Some(candidate);
                }
            }
        }
        
        if mod_tools_path.is_none() {
            if let Ok(app_local_dir) = app_handle.path().app_local_data_dir() {
                let candidate = app_local_dir.join("cslol-tools").join("mod-tools.exe");
                if candidate.exists() {
                    mod_tools_path = Some(candidate);
                }
                
                let candidate = app_local_dir.join("..").join("cslol-manager-2024-10-27-401067d-prerelease").join("cslol-tools").join("mod-tools.exe");
                if candidate.exists() {
                    mod_tools_path = Some(candidate.canonicalize().unwrap_or(candidate));
                }
            }
        }
        
        if mod_tools_path.is_none() {
            if let Ok(exe_path) = env::current_exe() {
                if let Some(exe_dir) = exe_path.parent() {
                    let cand1 = exe_dir.join("cslol-tools").join("mod-tools.exe");
                    if cand1.exists() { mod_tools_path = Some(cand1.clone()); }
                    let cand2 = exe_dir.join("resources").join("cslol-tools").join("mod-tools.exe");
                    if cand2.exists() { mod_tools_path = Some(cand2.clone()); }
                    let cand3 = exe_dir.join("mod-tools.exe");
                    if cand3.exists() { mod_tools_path = Some(cand3.clone()); }
                }
            }
        }
        
        Ok(Self {
            state: ModState::Uninitialized,
            app_dir,
            root_path,
            game_path,
            status: String::new(),
            log_file: Some(log_file),
            mod_tools_path,
            champion_names,
            app_handle: Some(app_handle.clone()),
        })
    }
    
    fn log(&mut self, message: &str) {
        let emoji_message = if message.contains("Initializing") {
            format!("🔄 {}", message)
        } else if message.contains("State changed to") {
            if message.contains("Busy") {
                format!("⏳ {}", message)
            } else if message.contains("Idle") {
                format!("💤 {}", message)
            } else if message.contains("Running") {
                format!("▶️ {}", message)
            } else {
                format!("ℹ️ {}", message)
            }
        } else if message.contains("Starting skin injection") {
            format!("🚀 {}", message)
        } else if message.contains("Stopping skin injection") {
            format!("🛑 {}", message)
        } else if message.contains("Skin injection stopped") {
            format!("⏹️ {}", message)
        } else if message.contains("Cleaning up") {
            format!("🧹 {}", message)
        } else if message.contains("Processing skin") {
            format!("⚙️ {}", message)
        } else if message.contains("Found fantome file") {
            format!("📂 {}", message)
        } else if message.contains("Processing fantome file") {
            format!("📦 {}", message)
        } else if message.contains("Extracting fantome file") {
            format!("📤 {}", message)
        } else if message.contains("Creating mod") {
            format!("🛠️ {}", message)
        } else if message.contains("valid") {
            format!("✅ {}", message)
        } else if message.contains("Copying mod") {
            format!("📋 {}", message)
        } else if message.contains("already has EnableMods=1") {
            format!("✨ {}", message)
        } else if message.contains("Using mod-tools") {
            format!("🔧 {}", message)
        } else if message.contains("overlay") && !message.contains("failed") {
            format!("🔮 {}", message)
        } else if message.contains("succeeded") || message.contains("successfully") {
            format!("✅ {}", message)
        } else if message.contains("failed") || message.contains("error") || message.contains("Error") {
            format!("❌ {}", message)
        } else {
            format!("ℹ️ {}", message)
        };

        if let Some(log_file) = &mut self.log_file {
            let _ = writeln!(log_file, "{}", emoji_message);
            let _ = log_file.flush();
        }
        println!("[injection] {}", emoji_message);
        
        if let Some(_app) = &self.app_handle {
        }
        
        self.status = message.to_string();
    }
    
    fn set_state(&mut self, new_state: ModState) {
        if self.state != new_state {
            self.state = new_state;
            self.log(&format!("State changed to: {:?}", new_state));
        }
    }

    pub fn initialize(&mut self) -> Result<(), InjectionError> {
        if self.state != ModState::Uninitialized {
            return Ok(());
        }
        
        self.set_state(ModState::Busy);
        self.log("Initializing...");
        
        fs::create_dir_all(self.app_dir.join("mods"))?;
        fs::create_dir_all(self.app_dir.join("temp"))?;
        
        self.set_state(ModState::Idle);
        Ok(())
    }

    fn get_champion_name(&mut self, champion_id: u32) -> Option<String> {
        if let Some(name) = self.champion_names.get(&champion_id) {
            return Some(name.clone());
        }

        let champions_dir = self.app_dir.join("champions");
        if !champions_dir.exists() {
            return None;
        }

        if let Ok(entries) = fs::read_dir(&champions_dir) {
            for entry in entries.filter_map(Result::ok) {
                if !entry.path().is_dir() {
                    continue;
                }

                let champion_file = entry.path().join(format!("{}.json", 
                    entry.file_name().to_string_lossy()));

                if let Ok(content) = fs::read_to_string(&champion_file) {
                    if let Ok(data) = serde_json::from_str::<serde_json::Value>(&content) {
                        if let Some(id) = data.get("id").and_then(|v| v.as_u64()) {
                            if id as u32 == champion_id {
                                if let Some(name) = data.get("name")
                                    .and_then(|v| v.as_str())
                                    .map(|s| s.to_lowercase().replace(" ", "")) 
                                {
                                    self.champion_names.insert(champion_id, name.clone());
                                    return Some(name);
                                }
                            }
                        }
                    }
                }
            }
        }

        None
    }
    
    fn extract_fantome(&mut self, fantome_path: &Path, output_dir: &Path) -> Result<(), InjectionError> {
        self.log(&format!("Extracting fantome file: {}", fantome_path.display()));
        
        fs::create_dir_all(output_dir)?;
        
        let file = fs::File::open(fantome_path)?;
        let mut archive = ZipArchive::new(file)?;
        
        for i in 0..archive.len() {
            let mut file = archive.by_index(i)?;
            let outpath = match file.enclosed_name() {
                Some(path) => output_dir.join(path),
                None => continue,
            };
            
            if file.name().ends_with('/') {
                fs::create_dir_all(&outpath)?;
            } else {
                if let Some(p) = outpath.parent() {
                    if !p.exists() {
                        fs::create_dir_all(p)?;
                    }
                }
                let mut outfile = fs::File::create(&outpath)?;
                io::copy(&mut file, &mut outfile)?;
            }
        }
        
        Ok(())
    }

    fn extract_fantome_mmap(&mut self, fantome_path: &Path, output_dir: &Path) -> Result<(), InjectionError> {
        self.log(&format!("Extracting fantome file with memory mapping: {}", fantome_path.display()));
        
        fs::create_dir_all(output_dir)?;
        
        let file = fs::File::open(fantome_path)?;
        let file_size = file.metadata()?.len();
        
        if file_size > 1_048_576 {
            let mmap = unsafe { MmapOptions::new().map(&file)? };
            
            let mut archive = ZipArchive::new(std::io::Cursor::new(&mmap[..]))?;
            
            for i in 0..archive.len() {
                let mut file = archive.by_index(i)?;
                let outpath = match file.enclosed_name() {
                    Some(path) => output_dir.join(path),
                    None => continue,
                };
                
                if file.name().ends_with('/') {
                    fs::create_dir_all(&outpath)?;
                } else {
                    if let Some(p) = outpath.parent() {
                        if !p.exists() {
                            fs::create_dir_all(p)?;
                        }
                    }
                    let mut outfile = fs::File::create(&outpath)?;
                    io::copy(&mut file, &mut outfile)?;
                }
            }
            
            self.log("Memory-mapped extraction completed successfully");
        } else {
            let mut archive = ZipArchive::new(file)?;
            
            for i in 0..archive.len() {
                let mut file = archive.by_index(i)?;
                let outpath = match file.enclosed_name() {
                    Some(path) => output_dir.join(path),
                    None => continue,
                };
                
                if file.name().ends_with('/') {
                    fs::create_dir_all(&outpath)?;
                } else {
                    if let Some(p) = outpath.parent() {
                        if !p.exists() {
                            fs::create_dir_all(p)?;
                        }
                    }
                    let mut outfile = fs::File::create(&outpath)?;
                    io::copy(&mut file, &mut outfile)?;
                }
            }
        }
        
        Ok(())
    }
    
    fn is_valid_mod_dir(&self, dir_path: &Path) -> bool {
        dir_path.join("META").join("info.json").exists()
    }
    
    fn find_fantome_for_skin(&mut self, skin: &Skin, fantome_files_dir: &Path) -> Result<Option<PathBuf>, InjectionError> {
        self.log("Using fallback file search method");
        
        if let Some(fantome_path) = &skin.fantome_path {
            self.log(&format!("Using fantome path from JSON: {}", fantome_path));
            
            let direct_path = fantome_files_dir.join(fantome_path);
            if direct_path.exists() {
                self.log(&format!("Found exact file at path: {}", direct_path.display()));
                return Ok(Some(direct_path));
            }
            
            if let Some(champion_name) = self.get_champion_name(skin.champion_id) {
                let champ_path = fantome_files_dir.join(champion_name).join(fantome_path.split('/').last().unwrap_or(""));
                if champ_path.exists() {
                    self.log(&format!("Found file at champion path: {}", champ_path.display()));
                    return Ok(Some(champ_path));
                }
            }
            
            let file_name = fantome_path.split('/').last().unwrap_or("");
            for entry in WalkDir::new(fantome_files_dir) {
                let entry = entry?;
                if entry.file_type().is_file() {
                    let path = entry.path();
                    if path.file_name()
                       .map(|name| name.to_string_lossy() == file_name)
                       .unwrap_or(false) {
                        self.log(&format!("Found matching file: {}", path.display()));
                        return Ok(Some(path.to_path_buf()));
                    }
                }
            }
        }
        
        self.log(&format!("Searching for skin with champion_id={}, skin_id={}, chroma_id={:?}", 
            skin.champion_id, skin.skin_id, skin.chroma_id));
            
        let skin_id_str = skin.skin_id.to_string();
        
        if let Some(champion_name) = self.get_champion_name(skin.champion_id) {
            let champ_dir = fantome_files_dir.join(champion_name);
            if champ_dir.exists() {
                for entry in fs::read_dir(champ_dir)? {
                    let entry = entry?;
                    let path = entry.path();
                    if !path.is_file() || path.extension().and_then(|e| e.to_str()) != Some("fantome") {
                        continue;
                    }
                    
                    let file_name = path.file_name()
                        .unwrap_or_default()
                        .to_string_lossy();
                        
                    if file_name.contains(&skin_id_str) {
                        if let Some(chroma_id) = skin.chroma_id {
                            if file_name.contains("chroma") && file_name.contains(&chroma_id.to_string()) {
                                self.log(&format!("Found chroma match: {}", path.display()));
                                return Ok(Some(path.to_path_buf()));
                            }
                        } else if !file_name.contains("chroma") {
                            self.log(&format!("Found non-chroma match: {}", path.display()));
                            return Ok(Some(path.to_path_buf()));
                        }
                    }
                }
            }
        }
        
        for entry in WalkDir::new(fantome_files_dir) {
            let entry = entry?;
            if entry.file_type().is_file() {
                let path = entry.path();
                if path.extension().and_then(|e| e.to_str()) != Some("fantome") {
                    continue;
                }
                
                let file_name = path.file_name()
                    .unwrap_or_default()
                    .to_string_lossy();
                    
                if file_name.contains(&skin_id_str) {
                    if let Some(chroma_id) = skin.chroma_id {
                        if file_name.contains("chroma") && file_name.contains(&chroma_id.to_string()) {
                            self.log(&format!("Found chroma match in full search: {}", path.display()));
                            return Ok(Some(path.to_path_buf()));
                        }
                    } else if !file_name.contains("chroma") {
                        self.log(&format!("Found non-chroma match in full search: {}", path.display()));
                        return Ok(Some(path.to_path_buf()));
                    }
                }
            }
        }
        
        self.log(&format!("No fantome file found for skin: champion_id={}, skin_id={}, chroma_id={:?}",
            skin.champion_id, skin.skin_id, skin.chroma_id));
        self.set_state(ModState::Idle);
        if let Some(_app) = &self.app_handle {
            let error_msg = format!("No fantome file found for skin: champion_id={}, skin_id={}, chroma_id={:?}", skin.champion_id, skin.skin_id, skin.chroma_id);
            let _ = _app.emit("injection-status", false);
            let _ = _app.emit("skin-injection-error", error_msg);
        }
        Ok(None)
    }
    
    fn create_mod_from_extracted(&mut self, extract_dir: &Path, mod_dir: &Path) -> Result<(), InjectionError> {
        self.log(&format!("Creating mod from extracted files at: {}", extract_dir.display()));
        
        fs::create_dir_all(mod_dir.join("META"))?;
        fs::create_dir_all(mod_dir.join("WAD"))?;
        
        let extracted_info_json = extract_dir.join("META").join("info.json");
        let mod_info_json = mod_dir.join("META").join("info.json");
        
        if extracted_info_json.exists() {
            fs::copy(&extracted_info_json, &mod_info_json)?;
        } else {
            let info_json = format!(r#"{{
                "Name": "ExtractedMod",
                "Version": "1.0.0",
                "Author": "osskins",
                "Description": "Extracted from fantome file at {}"
            }}"#, chrono::Local::now().to_rfc3339());
            
            fs::write(&mod_info_json, info_json)?;
        }
        
        let extracted_wad_dir = extract_dir.join("WAD");
        if extracted_wad_dir.exists() {
            for entry in WalkDir::new(&extracted_wad_dir) {
                let entry = entry?;
                let path = entry.path();
                let rel_path = path.strip_prefix(&extracted_wad_dir)
                    .map_err(|e| InjectionError::ProcessError(format!("Path error: {}", e)))?;
                
                let target_path = mod_dir.join("WAD").join(rel_path);
                
                if path.is_dir() {
                    fs::create_dir_all(&target_path)?;
                } else if path.is_file() {
                    if let Some(parent) = target_path.parent() {
                        fs::create_dir_all(parent)?;
                    }
                    fs::copy(path, &target_path)?;
                }
            }
        } else {
            for entry in WalkDir::new(extract_dir) {
                let entry = entry?;
                let path = entry.path();
                
                if path.starts_with(extract_dir.join("META")) {
                    continue;
                }
                
                if path.is_file() && 
                   (path.extension().and_then(|ext| ext.to_str()) == Some("wad") ||
                    path.to_string_lossy().ends_with(".wad.client")) {
                    
                    let file_name = path.file_name().unwrap();
                    let target_path = mod_dir.join("WAD").join(file_name);
                    
                    fs::copy(path, &target_path)?;
                }
            }
        }
        
        Ok(())
    }
    
    fn process_fantome_file(&mut self, fantome_path: &Path) -> Result<PathBuf, InjectionError> {
        self.log(&format!("Processing fantome file: {}", fantome_path.display()));
        
        let file_stem = fantome_path.file_stem().unwrap_or_default().to_string_lossy().to_string();
        let extract_dir = self.app_dir.join("temp").join(&file_stem);
        let mod_dir = self.app_dir.join("mods").join(&file_stem);
        
        if extract_dir.exists() {
            fs::remove_dir_all(&extract_dir)?;
        }
        if mod_dir.exists() {
            fs::remove_dir_all(&mod_dir)?;
        }
        
        let file_size = match fs::metadata(fantome_path) {
            Ok(metadata) => metadata.len(),
            Err(_) => 0,
        };
        
        if file_size > 1_048_576 {
            self.extract_fantome_mmap(fantome_path, &extract_dir)?;
        } else {
            self.extract_fantome(fantome_path, &extract_dir)?;
        }
        
        self.create_mod_from_extracted(&extract_dir, &mod_dir)?;
        
        fs::remove_dir_all(&extract_dir)?;
        
        Ok(mod_dir)
    }
    
    fn enable_mods_in_game_cfg(&mut self) -> Result<(), InjectionError> {
        let game_cfg_path = self.game_path.join("Game.cfg");
        
        if !game_cfg_path.exists() {
            fs::write(game_cfg_path, "[General]\nEnableMods=1\n")?;
            self.log("Created Game.cfg with EnableMods=1");
            return Ok(());
        }
        
        let content = fs::read_to_string(&game_cfg_path)?;
        
        if content.contains("EnableMods=1") {
            self.log("Game.cfg already has EnableMods=1");
            return Ok(());
        }
        
        let mut new_content = content.clone();
        if content.contains("EnableMods=0") {
            new_content = content.replace("EnableMods=0", "EnableMods=1");
        } else {
            if content.contains("[General]") {
                let parts: Vec<&str> = content.split("[General]").collect();
                if parts.len() >= 2 {
                    let new_part = format!("\nEnableMods=1{}", parts[1]);
                    new_content = format!("{}[General]{}", parts[0], new_part);
                }
            } else {
                new_content = format!("{}\n[General]\nEnableMods=1\n", content);
            }
        }
        
        fs::write(game_cfg_path, new_content)?;
        self.log("Updated Game.cfg to enable mods");
        
        Ok(())
    }
    
    fn copy_mod_to_game(&mut self, mod_dir: &Path) -> Result<(), InjectionError> {
        self.log(&format!("Copying mod to game directory: {}", mod_dir.display()));

        let mod_name = mod_dir.file_name().unwrap();
        let game_mod_dir = self.game_path.join("mods").join(mod_name);

        if game_mod_dir.exists() {
            fs::remove_dir_all(&game_mod_dir)?;
        }
        fs::create_dir_all(&game_mod_dir)?;

        for entry in WalkDir::new(mod_dir) {
            let entry = entry?;
            let path = entry.path();
            let rel_path = path.strip_prefix(mod_dir)
                .map_err(|e| InjectionError::ProcessError(format!("Path error: {}", e)))?;
            let target_path = game_mod_dir.join(rel_path);

            if path.is_dir() {
                fs::create_dir_all(&target_path)?;
            } else if path.is_file() {
                if let Some(parent) = target_path.parent() {
                    fs::create_dir_all(parent)?;
                }
                fs::copy(path, &target_path)?;
            }
        }
        Ok(())
    }
    
    fn run_overlay(&mut self) -> Result<(), InjectionError> {
        let mod_tools_path = match self.mod_tools_path.clone() {
            Some(path) => {
                if !path.exists() {
                    self.cleanup_mod_tools_processes();
                    self.set_state(ModState::Idle);
                    if let Some(app) = &self.app_handle {
                        let _ = app.emit("injection-status", "error");
                        let _ = app.emit("skin-injection-error", format!("mod-tools.exe not found at {}", path.display()));
                    }
                    return Err(InjectionError::OverlayError(format!(
                        "mod-tools.exe was found during initialization but is no longer at path: {}. Please reinstall the application or obtain mod-tools.exe from CSLOL Manager.",
                        path.display()
                    )));
                }
                path
            },
            None => {
                self.cleanup_mod_tools_processes();
                self.set_state(ModState::Idle);
                if let Some(app) = &self.app_handle {
                    let _ = app.emit("injection-status", "error");
                    let _ = app.emit("skin-injection-error", "mod-tools.exe not found. Please install CSLOL Manager or copy mod-tools.exe to the application directory.");
                }
                return Err(InjectionError::OverlayError(
                    "mod-tools.exe not found. Please install CSLOL Manager or copy mod-tools.exe to the application directory.".into()
                ));
            },
        };

        self.log(&format!("Using mod-tools.exe from: {}", mod_tools_path.display()));

        self.cleanup_mod_tools_processes();
        
        let game_mods_dir = self.game_path.join("mods");
        let overlay_dir = self.app_dir.join("overlay");
        let temp_overlay_dir = self.app_dir.join("temp_overlay");
        
        if overlay_dir.exists() {
            let mut attempts = 0;
            let max_attempts = 3;
            while attempts < max_attempts {
                match fs::remove_dir_all(&overlay_dir) {
                    Ok(_) => break,
                    Err(e) => {
                        self.log(&format!("Failed to remove overlay directory (attempt {}/{}): {}", 
                            attempts + 1, max_attempts, e));
                        std::thread::sleep(std::time::Duration::from_millis(500));
                        attempts += 1;
                    }
                }
            }
            if overlay_dir.exists() && attempts >= max_attempts {
                self.cleanup_mod_tools_processes();
                self.set_state(ModState::Idle);
                if let Some(app) = &self.app_handle {
                    let _ = app.emit("injection-status", "error");
                    let _ = app.emit("skin-injection-error", "Cannot remove existing overlay directory. It may be locked by another process.");
                }
                return Err(InjectionError::OverlayError(
                    "Cannot remove existing overlay directory. It may be locked by another process.".into()
                ));
            }
        }
        
        fs::create_dir_all(&overlay_dir)?;
        
        if temp_overlay_dir.exists() {
            match fs::remove_dir_all(&temp_overlay_dir) {
                Ok(_) => {},
                Err(e) => {
                    self.log(&format!("Could not clean temp overlay directory: {}", e));
                }
            }
        }
        fs::create_dir_all(&temp_overlay_dir)?;
        
        let mut mod_names = Vec::new();
        for entry in fs::read_dir(&game_mods_dir)? {
            let entry = entry?;
            let path = entry.path();
            if path.is_dir() && path.join("META").join("info.json").exists() {
                if let Some(name) = path.file_name() {
                    if let Some(name_str) = name.to_str() {
                        mod_names.push(name_str.to_string());
                    }
                }
            }
        }
        
        if mod_names.is_empty() {
            self.log("No valid mods found in game directory");
        } else {
            self.log(&format!("Found {} mods to include in overlay", mod_names.len()));
        }
        
        let mods_arg = mod_names.join("/");
        
        self.log("Creating mod overlay...");
        let max_retries = 5;
        let mut retry_count = 0;
        let mut last_error = None;
        let mut overlay_creation_successful = false;
        
        while retry_count < max_retries && !overlay_creation_successful {
            if retry_count > 0 {
                self.log(&format!("Retrying overlay creation (attempt {}/{})", retry_count + 1, max_retries));
                std::thread::sleep(std::time::Duration::from_millis(1000));
                self.cleanup_mod_tools_processes();
                
                if temp_overlay_dir.exists() {
                    match fs::remove_dir_all(&temp_overlay_dir) {
                        Ok(_) => fs::create_dir_all(&temp_overlay_dir)?,
                        Err(e) => {
                            self.log(&format!("Could not clean temp overlay directory: {}", e));
                        }
                    }
                } else {
                    fs::create_dir_all(&temp_overlay_dir)?;
                }
                
                #[cfg(target_os = "windows")]
                {
                    use std::process::Command;
                    if retry_count > 0 {
                        self.log("Running garbage collection to free memory...");
                        let mut gc_cmd = Command::new("powershell");
                        gc_cmd.args(["-Command", "[System.GC]::Collect()"]);
                        #[cfg(target_os = "windows")]
                        gc_cmd.creation_flags(CREATE_NO_WINDOW);
                        let _ = gc_cmd.output();
                    }
                }
            }
            
            let mut command = std::process::Command::new(&mod_tools_path);
            command.args([
                "mkoverlay",
                game_mods_dir.to_str().unwrap(),
                temp_overlay_dir.to_str().unwrap(),
                &format!("--game:{}", self.game_path.to_str().unwrap()),
                &format!("--mods:{}", mods_arg),
                "--noTFT",
                "--ignoreConflict"
            ]);
            
            #[cfg(target_os = "windows")]
            command.creation_flags(CREATE_NO_WINDOW);
            
            if retry_count == 0 {
                self.log("Running mkoverlay command...");
            }
            
            match command.output() {
                Ok(output) => {
                    if output.status.success() {
                        self.log("Overlay creation succeeded!");
                        
                        for entry in WalkDir::new(&temp_overlay_dir) {
                            let entry = entry?;
                            let path = entry.path();
                            let rel_path = path.strip_prefix(&temp_overlay_dir)
                                .map_err(|e| InjectionError::ProcessError(format!("Path error: {}", e)))?;
                            let target_path = overlay_dir.join(rel_path);
                            
                            if path.is_dir() {
                                fs::create_dir_all(&target_path)?;
                            } else if path.is_file() {
                                if let Some(parent) = target_path.parent() {
                                    fs::create_dir_all(parent)?;
                                }
                                fs::copy(path, &target_path)?;
                            }
                        }
                        
                        let _ = fs::remove_dir_all(&temp_overlay_dir);
                        
                        overlay_creation_successful = true;
                        break;
                    } else {
                        let stderr_output = String::from_utf8_lossy(&output.stderr).into_owned();
                        let stdout_output = String::from_utf8_lossy(&output.stdout).into_owned();
                        let error_message = if stderr_output.is_empty() { stdout_output } else { stderr_output };
                        
                        if output.status.to_string().contains("0xc0000005") {
                            self.log(&format!("Access violation error in attempt {}/{}. Retrying...", 
                                retry_count + 1, max_retries));
                            last_error = Some(InjectionError::ProcessError(format!(
                                "mkoverlay command failed: {}. Exit code: {}", 
                                error_message, output.status
                            )));
                            retry_count += 1;
                            continue;
                        } else {
                            if retry_count + 1 >= max_retries {
                                self.log(&format!("Overlay creation failed after {} attempts: {}", max_retries, error_message));
                            } else {
                                self.log(&format!("Retrying overlay creation (attempt {}/{})", retry_count + 1, max_retries));
                            }
                            
                            last_error = Some(InjectionError::ProcessError(format!(
                                "mkoverlay command failed: {}. Exit code: {}", 
                                error_message, output.status
                            )));
                            
                            retry_count += 1;
                            continue;
                        }
                    }
                },
                Err(e) => {
                    last_error = Some(InjectionError::ProcessError(format!(
                        "Failed to create overlay: {}. The mod-tools.exe might be missing or incompatible.", e
                    )));
                    retry_count += 1;
                    continue;
                }
            }
        }
        
        if !overlay_creation_successful {
            self.cleanup_mod_tools_processes();
            let _ = fs::remove_dir_all(&overlay_dir);
            let _ = fs::remove_dir_all(&temp_overlay_dir);
            self.set_state(ModState::Idle);
            
            if let Some(app) = &self.app_handle {
                let _ = app.emit("injection-status", "error");
                if let Some(ref err) = last_error {
                    let _ = app.emit("skin-injection-error", format!("Overlay creation failed after {} attempts: {}", max_retries, err));
                } else {
                    let _ = app.emit("skin-injection-error", format!("Overlay creation failed after {} attempts", max_retries));
                }
            }
            
            if let Some(err) = last_error {
                return Err(err);
            }
            return Err(InjectionError::ProcessError("Failed to create overlay after multiple attempts".into()));
        }
        
        self.log("Overlay creation completed successfully");
        
        let config_path = self.app_dir.join("config.json");
        let config_content = r#"{"enableMods":true}"#;
        fs::write(&config_path, config_content)?;
        
        self.log("Starting overlay process...");
        
        self.set_state(ModState::Running);
        
        let max_run_retries = 3;
        let mut run_retry_count = 0;
        let mut last_run_error = None;
        let mut overlay_started_successfully = false;
        
        while run_retry_count < max_run_retries && !overlay_started_successfully {
            if run_retry_count > 0 {
                self.log(&format!("Retrying overlay run (attempt {}/{})", run_retry_count + 1, max_run_retries));
                std::thread::sleep(std::time::Duration::from_millis(1000));
                self.cleanup_mod_tools_processes();
                
                #[cfg(target_os = "windows")]
                {
                    use std::process::Command;
                    let mut gc_cmd = Command::new("powershell");
                    gc_cmd.args(["-Command", "[System.GC]::Collect()"]);
                    #[cfg(target_os = "windows")]
                    gc_cmd.creation_flags(CREATE_NO_WINDOW);
                    let _ = gc_cmd.output();
                }
            }
            
            let mut command = std::process::Command::new(&mod_tools_path);
            command.args([
                "runoverlay",
                overlay_dir.to_str().unwrap(),
                config_path.to_str().unwrap(),
                &format!("--game:{}", self.game_path.to_str().unwrap()),
                "--opts:configless"
            ]);
            
            #[cfg(target_os = "windows")]
            command.creation_flags(CREATE_NO_WINDOW);
            
            match command.spawn() {
                Ok(_) => {
                    self.log("Overlay process started successfully");
                    
                    if let Some(app) = &self.app_handle {
                        let _ = app.emit("injection-status", "idle");
                        std::thread::sleep(std::time::Duration::from_millis(100));
                        let _ = app.emit("injection-status", "success");
                    }
                    
                    overlay_started_successfully = true;
                    break;
                },
                Err(e) => {
                    run_retry_count += 1;
                    last_run_error = Some(match e.kind() {
                        io::ErrorKind::NotFound => InjectionError::OverlayError(format!(
                            "mod-tools.exe not found or is inaccessible at path: {}. Please install CSLOL Manager or copy the correct mod-tools.exe to the application directory.", 
                            mod_tools_path.display()
                        )),
                        io::ErrorKind::PermissionDenied => InjectionError::OverlayError(format!(
                            "Permission denied when trying to run mod-tools.exe. Try running the application as administrator."
                        )),
                        _ => InjectionError::OverlayError(format!(
                            "Error running mod-tools.exe: {}. Please ensure it's correctly installed and compatible with your system.", 
                            e
                        ))
                    });
                    
                    if run_retry_count < max_run_retries {
                        self.log(&format!("Failed to start overlay process: {}. Retrying in {}ms...", e, 1000));
                        continue;
                    } else {
                        self.log(&format!("Failed to start overlay process after {} attempts: {}", max_run_retries, e));
                    }
                }
            }
        }
        
        if overlay_started_successfully {
            return Ok(());
        }
        
        self.set_state(ModState::Idle);
        
        if let Some(err) = last_run_error {
            self.log(&format!("Failed to start overlay process after {} attempts", max_run_retries));
            Err(err)
        } else {
            Err(InjectionError::OverlayError("Failed to start overlay process after multiple attempts".into()))
        }
    }
    
    fn cleanup_mod_tools_processes(&self) {
        #[cfg(target_os = "windows")]
        {
            let mut command = std::process::Command::new("taskkill");
            command.args(["/F", "/IM", "mod-tools.exe"]);
            
            #[cfg(target_os = "windows")]
            const CREATE_NO_WINDOW: u32 = 0x08000000;
            #[cfg(target_os = "windows")]
            command.creation_flags(CREATE_NO_WINDOW);
            
            let _ = command.output();
            
            let mut check_command = std::process::Command::new("wmic");
            check_command.args(["process", "where", "name='mod-tools.exe'", "get", "processid"]);
            #[cfg(target_os = "windows")]
            check_command.creation_flags(CREATE_NO_WINDOW);
            
            if let Ok(output) = check_command.output() {
                if output.status.success() {
                    let output_str = String::from_utf8_lossy(&output.stdout);
                    for line in output_str.lines() {
                        let line = line.trim();
                        if line != "ProcessId" && !line.is_empty() && line.chars().all(|c| c.is_digit(10)) {
                            let mut kill_pid = std::process::Command::new("taskkill");
                            kill_pid.args(["/F", "/PID", line]);
                            #[cfg(target_os = "windows")]
                            kill_pid.creation_flags(CREATE_NO_WINDOW);
                            let _ = kill_pid.output();
                        }
                    }
                }
            }
        }
    }

    pub fn inject_skins(&mut self, skins: &[Skin], fantome_files_dir: &Path) -> Result<(), InjectionError> {
        if let Some(_app) = &self.app_handle {
            let _ = _app.emit("injection-status", "injecting");
        }
        self.set_state(ModState::Busy);
        self.log("Starting skin injection process...");
        
        let game_mods_dir = self.game_path.join("mods");
        if game_mods_dir.exists() {
            self.log("Cleaning up existing mods in game directory");
            fs::remove_dir_all(&game_mods_dir)?;
        }
        fs::create_dir_all(&game_mods_dir)?;
        
        for (i, skin) in skins.iter().enumerate() {
            self.log(&format!("Processing skin {}/{}: champion_id={}, skin_id={}, chroma_id={:?}", 
                i + 1, skins.len(), skin.champion_id, skin.skin_id, skin.chroma_id));
                
            let fantome_path = self.find_fantome_for_skin(skin, fantome_files_dir)?;
            if let Some(fantome_path) = fantome_path {
                self.log(&format!("Found fantome file: {}", fantome_path.display()));
                
                let mod_dir = self.process_fantome_file(&fantome_path)?;
                
                if self.is_valid_mod_dir(&mod_dir) {
                    self.log("Mod structure is valid, copying to game directory");
                    self.copy_mod_to_game(&mod_dir)?;
                } else {
                    self.log("ERROR: Processing failed, mod structure invalid");
                    return Err(InjectionError::MissingFantomeFile("Mod structure invalid".into()));
                }
            } else {
                let msg = format!(
                    "No fantome file found for skin: champion_id={}, skin_id={}, chroma_id={:?}",
                    skin.champion_id, skin.skin_id, skin.chroma_id
                );
                self.log(&format!("ERROR: {}", msg));
                self.set_state(ModState::Idle);
                return Err(InjectionError::MissingFantomeFile(msg));
            }
        }
        
        self.enable_mods_in_game_cfg()?;
        
        let mut mod_names = Vec::new();
        for entry in fs::read_dir(&game_mods_dir)? {
            let entry = entry?;
            let path = entry.path();
            if path.is_dir() && path.join("META").join("info.json").exists() {
                if let Some(name) = path.file_name() {
                    if let Some(name_str) = name.to_str() {
                        mod_names.push(name_str.to_string());
                    }
                }
            }
        }
        
        match self.run_overlay() {
            Ok(_) => {
                self.log("Skin injection completed successfully");
                if let Some(_app) = &self.app_handle {
                    let _ = _app.emit("injection-status", "idle");
                    std::thread::sleep(std::time::Duration::from_millis(100));
                    let _ = _app.emit("injection-status", "completed");
                }
                Ok(())
            },
            Err(e) => {
                self.log(&format!("Failed to start overlay process: {}", e));
                self.set_state(ModState::Idle);
                if let Some(_app) = &self.app_handle {
                    let _ = _app.emit("injection-status", "error");
                    let _ = _app.emit("skin-injection-error", format!("Injection failed: {}", e));
                }
                Err(e)
            }
        }
    }

    pub fn cleanup(&mut self) -> Result<(), InjectionError> {
        self.log("Stopping skin injection process...");
        
        #[cfg(target_os = "windows")]
        {
            let mut command = std::process::Command::new("taskkill");
            command.args(["/F", "/IM", "mod-tools.exe"]);
            
            #[cfg(target_os = "windows")]
            const CREATE_NO_WINDOW: u32 = 0x08000000;
            #[cfg(target_os = "windows")]
            command.creation_flags(CREATE_NO_WINDOW);
            
            let _ = command.output();
            
            let mut check_command = std::process::Command::new("wmic");
            check_command.args(["process", "where", "name='mod-tools.exe'", "get", "processid"]);
            #[cfg(target_os = "windows")]
            check_command.creation_flags(CREATE_NO_WINDOW);
            
            if let Ok(output) = check_command.output() {
                if output.status.success() {
                    let output_str = String::from_utf8_lossy(&output.stdout);
                    for line in output_str.lines() {
                        let line = line.trim();
                        if line != "ProcessId" && !line.is_empty() && line.chars().all(|c| c.is_digit(10)) {
                            let mut kill_pid = std::process::Command::new("taskkill");
                            kill_pid.args(["/F", "/PID", line]);
                            #[cfg(target_os = "windows")]
                            kill_pid.creation_flags(CREATE_NO_WINDOW);
                            let _ = kill_pid.output();
                        }
                    }
                }
            }
        }
        
        let overlay_dir = self.app_dir.join("overlay");
        if overlay_dir.exists() {
            for _ in 0..3 {
                match fs::remove_dir_all(&overlay_dir) {
                    Ok(_) => break,
                    Err(_) => {
                        std::thread::sleep(std::time::Duration::from_millis(100));
                    }
                }
            }
        }
        
        let game_mods_dir = self.game_path.join("mods");
        if game_mods_dir.exists() {
            for _ in 0..3 {
                match fs::remove_dir_all(&game_mods_dir) {
                    Ok(_) => break,
                    Err(_) => {
                        std::thread::sleep(std::time::Duration::from_millis(100));
                    }
                }
            }
        }
        
        self.set_state(ModState::Idle);
        
        if let Some(app) = &self.app_handle {
            let _ = app.emit("injection-status", "idle");
        }
        
        self.log("Skin injection stopped");
        
        Ok(())
    }
    
    pub fn post_game_cleanup(&mut self) -> Result<(), InjectionError> {
        self.log("Post-game cleanup: removing overlays and killing mod-tools processes");
        self.cleanup_mod_tools_processes();
        let overlay_dir = self.app_dir.join("overlay");
        if overlay_dir.exists() {
            let _ = fs::remove_dir_all(&overlay_dir);
        }
        let game_mods_dir = self.game_path.join("mods");
        if game_mods_dir.exists() {
            let _ = fs::remove_dir_all(&game_mods_dir);
        }
        self.set_state(ModState::Idle);
        self.log("Post-game cleanup complete");
        Ok(())
    }
}

pub fn inject_skins(
    app_handle: &AppHandle, 
    game_path: &str, 
    skins: &[Skin], 
    fantome_files_dir: &Path
) -> Result<(), String> {
    let _lock = match INJECTION_MUTEX.try_lock() {
        Ok(lock) => lock,
        Err(_) => {
            let error_msg = "Another injection process is already running. Please wait for it to complete.";
            println!("{}", error_msg);
            
            let _ = app_handle.emit("injection-status", "error");
            let _ = app_handle.emit("skin-injection-error", error_msg);
            
            return Err(error_msg.to_string());
        }
    };
    
    println!("🔒 Acquired injection lock - starting injection process");
    
    let mut injector = SkinInjector::new(app_handle, game_path)
        .map_err(|e| format!("Failed to create injector: {}", e))?;
    
    injector.initialize()
        .map_err(|e| format!("Failed to initialize: {}", e))?;
    
    let result = match injector.inject_skins(skins, fantome_files_dir) {
        Ok(_) => {
            println!("🔓 Injection completed successfully - releasing lock");
            Ok(())
        },
        Err(e) => {
            println!("🔓 Injection failed - releasing lock: {}", e);
            Err(e.to_string())
        }
    };
    
    result
}

//-==================== END OF FILE: src-tauri\src\injection\injector.rs ====================-//

//-==================== START OF FILE: src-tauri\src\injection\mod.rs ====================-//

mod error;
mod injector;
mod types;
mod utils;
pub use types::*;
pub use injector::inject_skins;

//-==================== END OF FILE: src-tauri\src\injection\mod.rs ====================-//

//-==================== START OF FILE: src-tauri\src\injection\types.rs ====================-//

use serde::{Deserialize, Serialize};
use std::collections::HashMap;
use std::path::PathBuf;
use std::time::Instant;

// Define the types we need
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Skin {
    pub champion_id: u32,
    pub skin_id: u32,
    pub chroma_id: Option<u32>,
    pub fantome_path: Option<String>, // Add fantome path from the JSON
}

// ModState enum - Similar to CS LOL Manager's state machine
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum ModState {
    Uninitialized,
    Idle,
    Busy,
    Running,
    #[allow(dead_code)]
    CriticalError,
}

// This represents a message event for the patcher
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[allow(dead_code)]
pub enum PatcherMessage {
    WaitStart,
    Found,
    WaitInit,
    Scan,
    NeedSave,
    WaitPatchable,
    Patch,
    WaitExit,
    Done,
}

impl PatcherMessage {
    #[allow(dead_code)]
    pub fn to_string(&self) -> &'static str {
        match self {
            Self::WaitStart => "Waiting for league match to start",
            Self::Found => "Found League",
            Self::WaitInit => "Wait initialized",
            Self::Scan => "Scanning",
            Self::NeedSave => "Saving",
            Self::WaitPatchable => "Wait patchable",
            Self::Patch => "Patching",
            Self::WaitExit => "Waiting for exit",
            Self::Done => "League exited",
        }
    }
}

// FileIndex struct to cache paths and champion data
#[derive(Debug, Default)]
pub struct FileIndex {
    // Map champion_id to champion name
    pub champion_names: HashMap<u32, String>,
    // Map (champion_id, skin_id) to fantome file path
    pub skin_paths: HashMap<(u32, Option<u32>), Vec<PathBuf>>,
    // Map champion name to champion ID
    pub champion_ids: HashMap<String, u32>,
    // Track all discovered fantome files
    pub all_fantome_files: Vec<(PathBuf, Instant)>,
    // Track fantome files by filename for quick lookup
    pub fantome_by_filename: HashMap<String, PathBuf>,
    // Last time the index was built
    pub last_indexed: Option<Instant>,
}

impl FileIndex {
    // Create a new empty index
    pub fn new() -> Self {
        Self::default()
    }
}

//-==================== END OF FILE: src-tauri\src\injection\types.rs ====================-//

//-==================== START OF FILE: src-tauri\src\injection\utils.rs ====================-//

use std::fs;
use std::io;
use std::path::{Path, PathBuf};
use std::sync::{Arc, Mutex};
use std::time::{Instant, Duration};
use once_cell::sync::Lazy;
use tauri::{AppHandle, Manager};
use walkdir::WalkDir;

use crate::injection::error::InjectionError;
use crate::injection::types::FileIndex;

// Create a global static instance for caching across the application
pub static GLOBAL_FILE_INDEX: Lazy<Arc<Mutex<FileIndex>>> = Lazy::new(|| {
    Arc::new(Mutex::new(FileIndex::new()))
});

impl FileIndex {
    // Index all champions in a directory
    pub fn index_champions(&mut self, champions_dir: &Path) -> Result<(), InjectionError> {
        println!("Indexing champions in {}", champions_dir.display());
        let start = Instant::now();
        
        if !champions_dir.exists() {
            return Err(InjectionError::IoError(io::Error::new(
                io::ErrorKind::NotFound, 
                format!("Champions directory not found: {}", champions_dir.display())
            )));
        }
        
        let entries = fs::read_dir(champions_dir)?;
        
        for entry in entries.filter_map(Result::ok) {
            let path = entry.path();
            if path.is_dir() {
                let dir_name = path.file_name().unwrap_or_default().to_string_lossy().to_string();
                
                // Look for champion ID file
                let champion_id_file = path.join("champion_id.txt");
                if champion_id_file.exists() {
                    if let Ok(id_str) = fs::read_to_string(&champion_id_file) {
                        if let Ok(champ_id) = id_str.trim().parse::<u32>() {
                            self.champion_names.insert(champ_id, dir_name.clone());
                            self.champion_ids.insert(dir_name, champ_id);
                        }
                    }
                }
            }
        }
        
        println!("Indexed {} champions in {:?}", self.champion_names.len(), start.elapsed());
        Ok(())
    }
    
    // Index all fantome files in a directory structure
    pub fn index_fantome_files(&mut self, base_dir: &Path) -> Result<(), InjectionError> {
        println!("Indexing fantome files in {}", base_dir.display());
        let start = Instant::now();
        
        // Clear existing data
        self.skin_paths.clear();
        self.fantome_by_filename.clear();
        self.all_fantome_files.clear();
        
        if !base_dir.exists() {
            return Err(InjectionError::IoError(io::Error::new(
                io::ErrorKind::NotFound, 
                format!("Base directory not found: {}", base_dir.display())
            )));
        }
        
        // Walk the directory tree
        for entry in WalkDir::new(base_dir) {
            let entry = entry?;
            let path = entry.path();
            
            // Only process .fantome files
            if path.is_file() && path.extension().map_or(false, |ext| ext == "fantome") {
                let file_name = path.file_name().unwrap_or_default().to_string_lossy().to_string();
                
                // Add to all_fantome_files list
                self.all_fantome_files.push((path.to_path_buf(), Instant::now()));
                
                // Add to filename index
                self.fantome_by_filename.insert(file_name.clone(), path.to_path_buf());
                
                // Try to extract champion_id and skin_id from path or file name
                if let Some((champion_id, _skin_id)) = extract_skin_info_from_path(path) {
                    let key = (champion_id, None);  // No chroma support yet in this simplified version
                    self.skin_paths.entry(key).or_insert_with(Vec::new).push(path.to_path_buf());
                }
            }
        }
        
        self.last_indexed = Some(Instant::now());
        println!("Indexed {} fantome files in {:?}", self.all_fantome_files.len(), start.elapsed());
        
        Ok(())
    }
    
    // Find fantome file for a skin using the indexed data
    pub fn find_fantome_for_skin(&self, skin: &crate::injection::types::Skin, fantome_files_dir: &Path) -> Option<PathBuf> {
        // First, check if we have it in our skin paths table
        let key = (skin.champion_id, skin.chroma_id);
        
        if let Some(paths) = self.skin_paths.get(&key) {
            if !paths.is_empty() {
                return Some(paths[0].clone());
            }
        }
        
        // If not found, check direct path from JSON if provided
        if let Some(fantome_path) = &skin.fantome_path {
            // Check by direct path
            let full_path = fantome_files_dir.join(fantome_path);
            if full_path.exists() {
                return Some(full_path);
            }
            
            // Check by filename
            if let Some(filename) = fantome_path.split('/').last() {
                if let Some(path) = self.fantome_by_filename.get(filename) {
                    return Some(path.clone());
                }
            }
        }
        
        // Not found in index
        None
    }
    
    #[allow(dead_code)]
    // Get champion name, preferring the cached version
    pub fn get_champion_name(&self, champion_id: u32) -> Option<String> {
        self.champion_names.get(&champion_id).cloned()
    }
    
    // Check if index needs refresh (older than 5 minutes)
    pub fn needs_refresh(&self) -> bool {
        match self.last_indexed {
            Some(time) => time.elapsed() > Duration::from_secs(5 * 60),
            None => true,
        }
    }
}

// Function to extract skin information from a file path
fn extract_skin_info_from_path(path: &Path) -> Option<(u32, u32)> {
    let file_name = path.file_name()?.to_string_lossy().to_string();
    
    // Try to extract skin/champion IDs from filename
    // Common formats like "Champion_Skin_1234.fantome" or "1234_Champion_Skin.fantome"
    let parts: Vec<&str> = file_name.split(|c: char| !c.is_alphanumeric()).collect();
    
    for part in parts {
        if let Ok(id) = part.parse::<u32>() {
            if id > 0 {
                // Very simplistic approach - assume first numeric part over 0 is either champion or skin ID
                // In a real implementation, you'd need more sophisticated parsing based on your file naming conventions
                return Some((id, 0)); // For simplicity, we're defaulting skin_id to 0
            }
        }
    }
    
    None
}

// Function to get or initialize the global index
pub fn get_global_index(app_handle: &AppHandle) -> Result<Arc<Mutex<FileIndex>>, InjectionError> {
    let index = GLOBAL_FILE_INDEX.clone();
    
    // Check if we need to initialize the index
    let needs_init = {
        let locked_index = index.lock().unwrap();
        locked_index.champion_names.is_empty() || locked_index.needs_refresh()
    };
    
    if needs_init {
        // Get the champions directory path
        let app_data_dir = app_handle.path().app_data_dir()
            .map_err(|e| InjectionError::IoError(io::Error::new(io::ErrorKind::NotFound, format!("{}", e))))?;
        let champions_dir = app_data_dir.join("champions");
        
        // Initialize with locked access
        let mut locked_index = index.lock().unwrap();
        locked_index.index_champions(&champions_dir)?;
        locked_index.index_fantome_files(&champions_dir)?;
    }
    
    Ok(index)
}

//-==================== END OF FILE: src-tauri\src\injection\utils.rs ====================-//

//-==================== START OF FILE: src-tauri\src\lib.rs ====================-//

// Learn more about Tauri commands at https://tauri.app/develop/calling-rust/
use std::time::{SystemTime, UNIX_EPOCH};

#[tauri::command]
fn greet() -> String {
  let now = SystemTime::now();
  let epoch_ms = now.duration_since(UNIX_EPOCH).unwrap().as_millis();
  format!("Hello world from Rust! Current epoch: {}", epoch_ms)
}

#[cfg_attr(mobile, tauri::mobile_entry_point)]
pub fn run() {
  tauri::Builder::default()
    .plugin(tauri_plugin_opener::init())
    .invoke_handler(tauri::generate_handler![greet])
    .run(tauri::generate_context!())
    .expect("error while running tauri application");
}


//-==================== END OF FILE: src-tauri\src\lib.rs ====================-//

//-==================== START OF FILE: src-tauri\src\main.rs ====================-//

#![cfg_attr(not(debug_assertions), windows_subsystem = "windows")]
mod commands;
mod injection;
use commands::*;
use tauri::{Manager};
use tauri::tray::{TrayIconBuilder, TrayIconEvent, MouseButton};
use tauri::menu::{Menu, MenuItem};
use commands::manifest::{ManifestState, load_manifest_from_disk, build_skin_manifest};
fn main() {
let manifest_state = ManifestState::new();

tauri::Builder::default()
    .manage(manifest_state)
    .setup(|app| {
        let app_handle = app.handle().clone();
        
        let manifest_state: tauri::State<ManifestState> = app.state();
        let loaded_manifest = load_manifest_from_disk(&app_handle);
        *manifest_state.0.lock().unwrap() = loaded_manifest;
        
        let app_handle_clone = app.handle().clone();
        let manifest_state_clone = app.state::<ManifestState>().clone();
        tokio::spawn(async move {
            if let Err(e) = build_skin_manifest(app_handle_clone, manifest_state_clone).await {
                eprintln!("Failed to build initial skin manifest: {}", e);
            }
        });

        let osskins_item = MenuItem::with_id(app.handle(), "osskins", "Osskins", true, None::<&str>)?;
        let exit_item = MenuItem::with_id(app.handle(), "exit", "Exit", true, None::<&str>)?;
        let tray_menu = Menu::with_items(app.handle(), &[&osskins_item, &exit_item])?;
        
        let _tray = TrayIconBuilder::new()
            .menu(&tray_menu)
            .on_menu_event(|app, event| match event.id().as_ref() {
                "osskins" => {
                    if let Some(window) = app.get_webview_window("main") {
                        let _ = window.show();
                        let _ = window.set_focus();
                    }
                },
                "exit" => {
                    app.exit(0);
                },
                _ => {}
            })
            .on_tray_icon_event(|tray, event| {
                if let TrayIconEvent::Click { button: MouseButton::Left, .. } = event {
                    let app = tray.app_handle();
                    if let Some(window) = app.get_webview_window("main") {
                        let _ = window.show();
                        let _ = window.set_focus();
                    }
                }
            })
            .icon(app.default_window_icon().unwrap().clone())
            .build(app.handle())?;

        if let Some(main_window) = app.get_webview_window("main") {
            let window_clone = main_window.clone();
            main_window.on_window_event(move |event| {
                if let tauri::WindowEvent::CloseRequested { api, .. } = event {
                    api.prevent_close();
                    let _ = window_clone.hide();
                }
            });
        }

        Ok(())
    })
    .plugin(tauri_plugin_shell::init())
    .invoke_handler(tauri::generate_handler![
        check_champions_data,
        check_data_updates,
        get_champion_data,
        update_champion_data,
        save_fantome_file,
        select_league_directory,
        inject_skins,
        inject_game_skins,
        save_league_path,
        load_league_path,
        save_selected_skins,
        start_auto_inject,
        load_config,
        delete_champions_cache,
        auto_detect_league,
        check_github_updates,
        update_champion_data_from_github,
        upload_custom_skin,
        get_custom_skins,
        delete_custom_skin,
        get_lcu_friends,
        send_lcu_message,
        get_lcu_messages,
        start_lcu_watcher,
        build_skin_manifest,
        get_skin_path,
        force_inject_selected_skin
    ])
    .plugin(tauri_plugin_fs::init())
    .plugin(tauri_plugin_opener::init())
    .run(tauri::generate_context!())
    .expect("error while running tauri application");
}

//-==================== END OF FILE: src-tauri\src\main.rs ====================-//

//-==================== START OF FILE: src-tauri\tauri.conf.json ====================-//

{
  "$schema": "https://schema.tauri.app/config/2",
  "productName": "Osskins",
  "version": "1.1.2",
  "identifier": "com.osskins.app",
  "build": {
    "beforeDevCommand": "pnpm dev",
    "devUrl": "http://localhost:3000",
    "beforeBuildCommand": "pnpm build",
    "frontendDist": "../dist"
  },
  "app": {
    "windows": [
      {
        "title": "Osskins",
        "width": 1200,
        "height": 800,
        "resizable": true,
        "fullscreen": false,
        "center": true,
        "decorations": false
      }
    ],
    "security": {
      "csp": null
    }
  },
  "bundle": {
    "active": true,
    "targets": "all",
    "icon": [
      "icons/32x32.png",
      "icons/128x128.png",
      "icons/128x128@2x.png",
      "icons/icon.icns",
      "icons/icon.ico"
    ],
    "resources": [
      "resources/cslol-tools/*"
    ]
  },
  "plugins": {
    "fs": {
      "requireLiteralLeadingDot": false
    },
    "http": {
      "scope": [
        "*"
      ]
    },
    "shell": {
      "open": true
    }
  }
}

//-==================== END OF FILE: src-tauri\tauri.conf.json ====================-//

//-==================== START OF FILE: todo.md ====================-//

# PRIMARY FIX --------------------

Descripción del Proyecto y Problema
Proyecto: Una aplicación de escritorio para instalar skins de League of Legends.

Problema Central: La fuente de datos de skins (league-skins-developer) que organizaba los archivos por ID de campeón y de skin (0101, 1001, etc.) ha sido eliminada. La nueva fuente, el repositorio de la comunidad, organiza las skins por sus nombres completos (Goth Annie, Annie-Versary).

Impacto: El sistema de búsqueda e instalación del backend de la aplicación, que dependía de los IDs numéricos para encontrar y descargar las skins, ha dejado de funcionar. Ahora la aplicación debe manejar nombres de archivos que pueden contener caracteres especiales (', -, etc.), lo que introduce un problema de sanitización y mapeo.

Objetivo: Adaptar el sistema para que pueda:

Tomar el nombre de una skin del frontend (obtenido de la API skins.json de Community Dragon).

Buscar el archivo de la skin correspondiente en el repositorio de la comunidad (que usa nombres).

Iniciar el proceso de descarga e instalación.

Solución Propuesta
Para resolver este problema de manera profesional y eficiente, se propone un enfoque centrado en el backend que elimina la dependencia de los IDs y utiliza un sistema de mapeo basado en nombres.

1. Mapeo y Sincronización
Crear un índice de mapeo: Implementar un script en el backend que se ejecute periódicamente para construir un índice en memoria.

Fuentes del índice: Este script comparará los nombres de las skins de la API de Community Dragon con los nombres de los archivos .zip del repositorio de la comunidad.

Sanitización: En ambos casos, los nombres serán normalizados (convertidos a minúsculas y sin caracteres especiales) para asegurar una correspondencia perfecta. Por ejemplo, Annie-Versary y Annie-Versary.zip se convertirán en annieversary.

Resultado: Se generará un diccionario en el backend que asocie cada nombre de skin sanitizado con su ID y nombre de archivo original.

2. Proceso de Búsqueda y Descarga
Cuando un usuario selecciona una skin en el frontend, se enviará el nombre de la skin (Annie-Versary) al backend.

El backend recibirá este nombre, lo sanitizará (annieversary) y consultará su índice de mapeo.

Si el nombre sanitizado existe en el índice, el backend sabrá que el archivo de la skin está disponible.

Con la validación exitosa, el backend procederá a construir la URL o el comando necesario para descargar el archivo .zip con el nombre correcto desde el repositorio comunitario.

3. Ventajas de esta Solución
Eficiencia: Se evita tener que buscar manualmente entre los archivos del repositorio para cada solicitud.

Robustez: El sistema ya no depende de un formato de ID específico, lo que lo hace más resiliente a futuros cambios en las fuentes de datos.

Escalabilidad: El índice de mapeo se actualiza automáticamente, asegurando que la aplicación siempre tenga la información más reciente sobre las skins disponibles sin intervención manual.











# Back End ---------------------

- [x] Fix build issues
- [x] State for user selects
- [-] Cache update with github / the json's update when there is a git commit
- [x] Refine LCU integration: Detect game state (champ select, in-game) for context-aware actions (e.g., auto-inject on game start, pre-game pop up).
- [x] Handle errors gracefully and provide user feedback on a prod level.
- [x] Custom skins tab. as in a whole different app tab with a dialog that opens uploading the skin file and adding its champion. and the skin name, etc...
- [-] Inject skins on reconnect

- [x] Optimize performance for large champion/skin datasets.
- [x] Ensure `mod-tools.exe` is compiled on build and not placed manually
- [x] app cosmetics and name, icon, etc...
- [x] Consider using a structured format (like JSON) for configuration instead of `league_path.txt` if more settings are planned.
- [x] It should not stop the injecting if the user closed the game (waiting to reconnect) it should close when it turn from in game to lobby, etc..
- [x] The terminals that opens!! it should not!
- [x] Handle game modes (arena, swift play)
- [x] Better injection error handling and cleaning cases not just at the end of a game
- [x] Run in background in system tray
- [ ] Custom Misc support
- [ ] Aram support
- [ ] Simultaneously use two files in the custom skin
- [ ] Test the cleaning function
- [ ] Make the injection status work till the end of the game
- [x] Refactor the command & injection files to be around ~500 each
- [ ] Implement git-like feature so the user doesn't have to update manually
- [ ] Check for better injection structure ways
- [ ] Checking for messages doesn't work lcu shit...
- [ ] Force injection button

# Front End ---------------------

- [x] Better front-end code
- [x] Logical loading/stale state
- [ ] Change the chroma selector indicator UI
- [x] Add Theming
- [x] All contexts should be zustand or react not both at the same time

# UX ---------------------

- [x] Favorites champs logic
- [x] Add search/filtering capabilities for the champion/skin list.
- [-] Animations baby!


//-==================== END OF FILE: todo.md ====================-//

//-==================== START OF FILE: tsconfig.json ====================-//

{
  "compilerOptions": {
    "forceConsistentCasingInFileNames": true,
    "target": "ES2021",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": [
        "./src/*"
      ]
    }
  },
  "include": [
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    "next-env.d.ts",
    "dist/types/**/*.ts",
    "src/app/api/custom-skins/route.ts.bak",
    "src/app/api/champions/route.bak"
  ],
  "exclude": [
    "node_modules"
  ]
}

//-==================== END OF FILE: tsconfig.json ====================-//

