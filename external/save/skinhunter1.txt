//-==================== START OF FILE: App.xaml ====================-//

﻿<Application
    x:Class="skinhunter.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    xmlns:converters="clr-namespace:skinhunter.Converters"
    DispatcherUnhandledException="OnDispatcherUnhandledException"
    Exit="OnExit"
    Startup="OnStartup">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ui:ThemesDictionary Theme="Dark" />
                <ui:ControlsDictionary />
            </ResourceDictionary.MergedDictionaries>

            <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
            <converters:NullOrEmptyToVisibilityConverter x:Key="NullOrEmptyToVisibilityConverter"/>
            <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>
            <converters:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter"/>
            <converters:ChromaToButtonTextConverter x:Key="ChromaToButtonTextConverter"/>
            <converters:SkinIdToKhadaUrlConverter x:Key="SkinIdToKhadaUrlConverter"/>
            <converters:ListToStringConverter x:Key="ListToStringConverter"/>
            <converters:SymbolToIconConverter x:Key="SymbolToIconConverter"/>

        </ResourceDictionary>
    </Application.Resources>
</Application>

//-==================== END OF FILE: App.xaml ====================-//

//-==================== START OF FILE: App.xaml.cs ====================-//

﻿using System.Diagnostics;
using System.IO;
using System.Windows.Threading;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using skinhunter.Services;
using skinhunter.ViewModels;
using skinhunter.ViewModels.Dialogs;
using skinhunter.ViewModels.Pages;
using skinhunter.Views.Pages;
using Wpf.Ui.DependencyInjection;
using Wpf.Ui;
using Supabase;
using skinhunter.ViewModels.Windows;
using skinhunter.Views.Windows;
using System.Windows;
using System;
using Wpf.Ui.Abstractions;
using skinhunter.Models;

namespace skinhunter
{
    public partial class App
    {
        public static string? InitialPipeName { get; private set; }

        private static readonly IHost _host = Host
            .CreateDefaultBuilder()
            .ConfigureAppConfiguration(c => {
                string? basePath = Path.GetDirectoryName(AppContext.BaseDirectory);
                if (basePath != null)
                {
                    c.SetBasePath(basePath);
                }
            })
            .ConfigureServices((context, services) =>
            {
                services.AddNavigationViewPageProvider();

                services.AddSingleton<INavigationService, NavigationService>();
                services.AddSingleton<ISnackbarService, SnackbarService>();
                services.AddSingleton<IContentDialogService, ContentDialogService>();
                services.AddSingleton<IThemeService, ThemeService>();
                services.AddSingleton<ITaskBarService, TaskBarService>();

                services.AddHostedService<ApplicationHostService>();

                services.AddSingleton<ICustomNavigationService, CustomNavigationService>();
                services.AddSingleton<AuthTokenManager>();
                services.AddTransient<PipeClientService>();
                services.AddSingleton<ModToolsService>();
                services.AddSingleton<UserPreferencesService>();
                services.AddSingleton<GlobalTaskService>();

                services.AddSingleton(sp => {
                    var options = new Supabase.SupabaseOptions
                    {
                        AutoRefreshToken = true,
                        SessionHandler = new SupabaseSessionHandler()
                    };
                    return new Supabase.Client(
                        "https://odlqwkgewzxxmbsqutja.supabase.co",
                        "eyJhbGciOiJzdXBhYmFzZSIsInJlZiI6Im9kbHF3a2dld3p4eG1ic3F1dGphIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzQyMTM2NzcsImV4cCI6MjA0OTc4OTY3N30.qka6a71bavDeUQgy_BKoVavaClRQa_gT36Au7oO9AF0",
                        options);
                });

                services.AddSingleton<MainWindow>();
                services.AddSingleton<MainWindowViewModel>();
                services.AddSingleton<INavigationWindow>(sp => sp.GetRequiredService<MainWindow>());

                services.AddSingleton<ChampionGridPageViewModel>();
                services.AddSingleton<ChampionDetailPageViewModel>();
                services.AddSingleton<InstalledSkinsViewModel>();
                services.AddSingleton<ProfileViewModel>();
                services.AddSingleton<SettingsViewModel>();
                services.AddTransient<AuthenticationRequiredPageViewModel>();

                services.AddTransient<ChampionGridPage>();
                services.AddTransient<ChampionDetailPage>();
                services.AddTransient<InstalledSkinsPage>();
                services.AddTransient<ProfilePage>();
                services.AddTransient<SettingsPage>();
                services.AddTransient<AuthenticationRequiredPage>();

                services.AddTransient<OmnisearchViewModel>();
                services.AddTransient<SkinDetailViewModel>();
                services.AddSingleton<OverlayToggleButtonViewModel>();
            }).Build();

        public static IServiceProvider Services => _host.Services;

        private async void OnStartup(object sender, StartupEventArgs e)
        {
            FileLoggerService.Log($"[App.OnStartup] skinhunter starting. Args: {string.Join(" ", e.Args)}");
            for (int i = 0; i < e.Args.Length; i++)
            {
                if (e.Args[i].Equals("--pipe-name", StringComparison.OrdinalIgnoreCase) && i + 1 < e.Args.Length)
                {
                    InitialPipeName = e.Args[i + 1];
                    FileLoggerService.Log($"[App.OnStartup] Pipe name received: {InitialPipeName}");
                    break;
                }
            }
            await _host.StartAsync();
        }

        private async void OnExit(object sender, ExitEventArgs e)
        {
            FileLoggerService.Log($"[App.OnExit] skinhunter exiting.");
            if (Services.GetService(typeof(ModToolsService)) is ModToolsService modToolsService)
            {
                await modToolsService.StopRunOverlayAsync();
            }

            await _host.StopAsync();
            _host.Dispose();
        }

        private void OnDispatcherUnhandledException(object sender, DispatcherUnhandledExceptionEventArgs e)
        {
            FileLoggerService.Log($"[App.OnDispatcherUnhandledException] Unhandled exception: {e.Exception}");
            var messageBox = new Wpf.Ui.Controls.MessageBox
            {
                Title = "Unhandled Application Error",
                Content = $"An unexpected error occurred: {e.Exception.Message}\n\nThe application might be unstable. Please check logs for details.",
                CloseButtonText = "OK"
            };
            _ = messageBox.ShowDialogAsync();
            e.Handled = true;
        }
    }
}

//-==================== END OF FILE: App.xaml.cs ====================-//

//-==================== START OF FILE: AssemblyInfo.cs ====================-//

using System.Windows;

[assembly: ThemeInfo(
    ResourceDictionaryLocation.None, //where theme specific resource dictionaries are located
                                     //(used if a resource is not found in the page,
                                     // or application resource dictionaries)
    ResourceDictionaryLocation.SourceAssembly //where the generic resource dictionary is located
//(used if a resource is not found in the page,
// app, or any theme specific resource dictionaries)
)]


//-==================== END OF FILE: AssemblyInfo.cs ====================-//

//-==================== START OF FILE: Converters\BooleanToVisibilityConverter.cs ====================-//

﻿using System;
using System.Globalization;
using System.Windows;
using System.Windows.Data;

namespace skinhunter.Converters
{
    [ValueConversion(typeof(bool), typeof(Visibility))]
    public class BooleanToVisibilityConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            bool flag = false;
            if (value is bool b)
            {
                flag = b;
            }
            else if (value is bool?)
            {
                bool? nullable = (bool?)value;
                flag = nullable.HasValue && nullable.Value;
            }

            bool inverse = (parameter as string) == "Inverse";
            if (inverse)
            {
                flag = !flag;
            }

            return flag ? Visibility.Visible : Visibility.Collapsed;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            bool inverse = (parameter as string) == "Inverse";
            bool flag = (value is Visibility visibility) && visibility == Visibility.Visible;

            if (inverse)
            {
                flag = !flag;
            }
            return flag;
        }
    }
}

//-==================== END OF FILE: Converters\BooleanToVisibilityConverter.cs ====================-//

//-==================== START OF FILE: Converters\ChromaToButtonTextConverter.cs ====================-//

﻿using System;
using System.Globalization;
using System.Windows.Data;
using skinhunter.Models;

namespace skinhunter.Converters
{
    public class ChromaToButtonTextConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return value is Chroma ? "Download Chroma" : "Download Skin";
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}

//-==================== END OF FILE: Converters\ChromaToButtonTextConverter.cs ====================-//

//-==================== START OF FILE: Converters\InverseBooleanToVisibilityConverter.cs ====================-//

﻿using System;
using System.Globalization;
using System.Windows;
using System.Windows.Data;

namespace skinhunter.Converters
{
    [ValueConversion(typeof(bool), typeof(Visibility))]
    public class InverseBooleanToVisibilityConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            bool flag = false;
            if (value is bool b)
            {
                flag = b;
            }
            else if (value is bool?)
            {
                bool? nullable = (bool?)value;
                flag = nullable.HasValue && nullable.Value;
            }

            return !flag ? Visibility.Visible : Visibility.Collapsed;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return (value is Visibility visibility) && visibility != Visibility.Visible;
        }
    }
}

//-==================== END OF FILE: Converters\InverseBooleanToVisibilityConverter.cs ====================-//

//-==================== START OF FILE: Converters\ListToStringConverter.cs ====================-//

﻿using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Windows.Data;

namespace skinhunter.Converters
{
    public class ListToStringConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is IEnumerable<string> list && list.Any())
            {
                return string.Join(", ", list.Select(r => r.Length > 0 ? char.ToUpper(r[0]) + r.Substring(1) : r));
            }
            return string.Empty;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}

//-==================== END OF FILE: Converters\ListToStringConverter.cs ====================-//

//-==================== START OF FILE: Converters\NullOrEmptyToVisibilityConverter.cs ====================-//

﻿using System;
using System.Collections;
using System.Globalization;
using System.Windows;
using System.Windows.Data;

namespace skinhunter.Converters
{
    [ValueConversion(typeof(object), typeof(Visibility))]
    public class NullOrEmptyToVisibilityConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            bool isNullOrEmpty;

            if (value == null)
            {
                isNullOrEmpty = true;
            }
            else if (value is string s)
            {
                isNullOrEmpty = string.IsNullOrEmpty(s);
            }
            else if (value is ICollection c)
            {
                isNullOrEmpty = c.Count == 0;
            }
            else
            {
                isNullOrEmpty = false;
            }

            bool collapseWhenNullOrEmpty = true;
            if (parameter is string paramString && bool.TryParse(paramString, out bool paramBool))
            {
                collapseWhenNullOrEmpty = paramBool;
            }
            else if (parameter is bool directBool)
            {
                collapseWhenNullOrEmpty = directBool;
            }


            if (collapseWhenNullOrEmpty)
            {
                return isNullOrEmpty ? Visibility.Collapsed : Visibility.Visible;
            }
            else
            {
                return isNullOrEmpty ? Visibility.Visible : Visibility.Collapsed;
            }
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}

//-==================== END OF FILE: Converters\NullOrEmptyToVisibilityConverter.cs ====================-//

//-==================== START OF FILE: Converters\NullToVisibilityConverter.cs ====================-//

﻿using System;
using System.Globalization;
using System.Windows;
using System.Windows.Data;

namespace skinhunter.Converters
{
    [ValueConversion(typeof(object), typeof(Visibility))]
    public class NullToVisibilityConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            bool isNull = value == null;
            bool collapseWhenNull = true;

            if (parameter is string paramString && bool.TryParse(paramString, out bool paramBool))
            {
                collapseWhenNull = paramBool;
            }

            if (collapseWhenNull)
            {
                return isNull ? Visibility.Collapsed : Visibility.Visible;
            }
            else
            {
                return isNull ? Visibility.Visible : Visibility.Collapsed;
            }
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}

//-==================== END OF FILE: Converters\NullToVisibilityConverter.cs ====================-//

//-==================== START OF FILE: Converters\SkinIdToKhadaUrlConverter.cs ====================-//

﻿using System;
using System.Globalization;
using System.Windows.Data;

namespace skinhunter.Converters
{
    public class SkinIdToKhadaUrlConverter : IValueConverter
    {
        private const string BaseKhadaUrl = "https://modelviewer.lol/model-viewer?id=";

        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is int skinId && skinId > 0)
            {
                string url = $"{BaseKhadaUrl}{skinId}";
                if (parameter is int chromaId && chromaId > 0 && chromaId / 1000 == skinId)
                {
                    url += $"&chroma={chromaId}";
                }
                return url;
            }
            return BaseKhadaUrl;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}

//-==================== END OF FILE: Converters\SkinIdToKhadaUrlConverter.cs ====================-//

//-==================== START OF FILE: Converters\SymbolToIconConverter.cs ====================-//

﻿/// skinhunter Start of Converters/SymbolToIconConverter.cs ///
using System;
using System.Globalization;
using System.Windows.Data;
using Wpf.Ui.Controls;

namespace skinhunter.Converters
{
    public class SymbolToIconConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is SymbolRegular symbol)
            {
                return new SymbolIcon(symbol);
            }
            return new SymbolIcon(SymbolRegular.ErrorCircle24);
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}
/// skinhunter End of Converters/SymbolToIconConverter.cs ///

//-==================== END OF FILE: Converters\SymbolToIconConverter.cs ====================-//

//-==================== START OF FILE: Helpers\EnumToBooleanConverter.cs ====================-//

﻿using System.Globalization;
using System.Windows.Data;
using Wpf.Ui.Appearance;

namespace skinhunter.Helpers
{
    internal class EnumToBooleanConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (parameter is not String enumString)
            {
                throw new ArgumentException("ExceptionEnumToBooleanConverterParameterMustBeAnEnumName");
            }

            if (!Enum.IsDefined(typeof(ApplicationTheme), value))
            {
                throw new ArgumentException("ExceptionEnumToBooleanConverterValueMustBeAnEnum");
            }

            var enumValue = Enum.Parse(typeof(ApplicationTheme), enumString);

            return enumValue.Equals(value);
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (parameter is not String enumString)
            {
                throw new ArgumentException("ExceptionEnumToBooleanConverterParameterMustBeAnEnumName");
            }

            return Enum.Parse(typeof(ApplicationTheme), enumString);
        }
    }
}


//-==================== END OF FILE: Helpers\EnumToBooleanConverter.cs ====================-//

//-==================== START OF FILE: Models\AppConfig.cs ====================-//

﻿namespace skinhunter.Models
{
    public class AppConfig
    {
        public string? ConfigurationsFolder { get; set; }

        public string? AppPropertiesFileName { get; set; }
    }
}

//-==================== END OF FILE: Models\AppConfig.cs ====================-//

//-==================== START OF FILE: Models\ChampionDetail.cs ====================-//

﻿using System.Collections.Generic;
using System.Text.Json.Serialization;

namespace skinhunter.Models
{
    public class ChampionDetail : ChampionSummary
    {
        [JsonPropertyName("title")]
        public string Title { get; set; } = string.Empty;

        [JsonPropertyName("shortBio")]
        public string ShortBio { get; set; } = string.Empty;

        [JsonIgnore]
        public List<Skin> Skins { get; set; } = new List<Skin>();
    }
}

//-==================== END OF FILE: Models\ChampionDetail.cs ====================-//

//-==================== START OF FILE: Models\ChampionSummary.cs ====================-//

﻿using skinhunter.Services;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Net.Http;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Media.Imaging;


namespace skinhunter.Models
{
    public partial class ChampionSummary : ObservableObject
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; } = string.Empty;

        [JsonPropertyName("alias")]
        public string Alias { get; set; } = string.Empty;

        [JsonPropertyName("squarePortraitPath")]
        public string SquarePortraitPath { get; set; } = string.Empty;

        [JsonPropertyName("roles")]
        public List<string>? Roles { get; set; }

        private BitmapImage? _championImageSourceField;

        [JsonIgnore]
        public BitmapImage? ChampionImageSource
        {
            get
            {
                if (_championImageSourceField == null || _championImageSourceField == _placeholderImage)
                {
                    if (!_isImageLoading && !string.IsNullOrEmpty(OriginalImageUrl) && !OriginalImageUrl.StartsWith("pack:"))
                    {
                        _ = LoadImageAsync();
                    }
                    return _placeholderImage;
                }
                return _championImageSourceField;
            }
            private set
            {
                SetProperty(ref _championImageSourceField, value);
            }
        }

        public void ReleaseImage()
        {
            Debug.WriteLine($"[ChampionSummary] Liberando imagen para {Name}");
            if (System.Windows.Application.Current != null)
            {
                System.Windows.Application.Current.Dispatcher.Invoke(() =>
                {
                    if (_championImageSourceField != _placeholderImage)
                    {
                        CancelCurrentLoad();
                        ChampionImageSource = _placeholderImage;
                        Debug.WriteLine($"[ChampionSummary] Imagen para {Name} establecida a placeholder.");
                    }
                });
            }
            else
            {
                if (_championImageSourceField != _placeholderImage)
                {
                    CancelCurrentLoad();
                    _championImageSourceField = _placeholderImage;
                    OnPropertyChanged(nameof(ChampionImageSource));
                    Debug.WriteLine($"[ChampionSummary] Imagen para {Name} establecida a placeholder (sin Dispatcher).");
                }
            }
        }


        [JsonIgnore]
        private volatile bool _isImageLoading = false;
        [JsonIgnore]
        private static readonly HttpClient _httpClient = new HttpClient { Timeout = TimeSpan.FromSeconds(15) };
        [JsonIgnore]
        private static readonly Dictionary<string, BitmapImage> _imageCache = new Dictionary<string, BitmapImage>(StringComparer.OrdinalIgnoreCase);
        [JsonIgnore]
        private static readonly BitmapImage? _placeholderImage = LoadPlaceholderImage();

        private CancellationTokenSource? _cancellationTokenSource;

        private async Task LoadImageAsync()
        {
            if (_isImageLoading) return;
            _isImageLoading = true;

            _cancellationTokenSource?.Cancel();
            _cancellationTokenSource = new CancellationTokenSource();
            var token = _cancellationTokenSource.Token;

            string imageUrl = OriginalImageUrl;
            BitmapImage? finalImage = null;

            if (string.IsNullOrEmpty(imageUrl) || imageUrl.StartsWith("pack:"))
            {
                finalImage = _placeholderImage;
            }
            else
            {
                lock (_imageCache)
                {
                    if (_imageCache.TryGetValue(imageUrl, out var cachedImageFromLock))
                    {
                        finalImage = cachedImageFromLock;
                    }
                }

                if (finalImage == null)
                {
                    try
                    {
                        using var request = new HttpRequestMessage(HttpMethod.Get, imageUrl);
                        using var response = await _httpClient.SendAsync(request, HttpCompletionOption.ResponseHeadersRead, token);
                        response.EnsureSuccessStatusCode();
                        byte[] imageData = await response.Content.ReadAsByteArrayAsync(token);

                        if (token.IsCancellationRequested)
                        {
                            _isImageLoading = false;
                            if (System.Windows.Application.Current != null)
                                System.Windows.Application.Current.Dispatcher.Invoke(() => ChampionImageSource = _placeholderImage);
                            else
                                ChampionImageSource = _placeholderImage;
                            return;
                        }

                        var bitmap = new BitmapImage();
                        using (var stream = new MemoryStream(imageData))
                        {
                            bitmap.BeginInit();
                            bitmap.CacheOption = BitmapCacheOption.OnLoad;
                            bitmap.DecodePixelWidth = 80;
                            bitmap.StreamSource = stream;
                            bitmap.EndInit();
                        }
                        bitmap.Freeze();
                        finalImage = bitmap;

                        lock (_imageCache)
                        {
                            _imageCache.TryAdd(imageUrl, finalImage);
                        }
                    }
                    catch (OperationCanceledException)
                    {
                        finalImage = _placeholderImage;
                    }
                    catch (Exception)
                    {
                        finalImage = _placeholderImage;
                    }
                }
            }

            if (System.Windows.Application.Current != null)
            {
                System.Windows.Application.Current.Dispatcher.Invoke(() =>
                {
                    if (!token.IsCancellationRequested)
                    {
                        ChampionImageSource = finalImage ?? _placeholderImage;
                    }
                    else
                    {
                        ChampionImageSource = _placeholderImage;
                    }
                });
            }
            else
            {
                ChampionImageSource = finalImage ?? _placeholderImage;
            }
            _isImageLoading = false;
        }

        public void CancelCurrentLoad()
        {
            if (_isImageLoading)
            {
                _cancellationTokenSource?.Cancel();
                _isImageLoading = false;
            }
        }

        [JsonIgnore]
        public string OriginalImageUrl => CdragonDataService.GetAssetUrl(SquarePortraitPath);

        [JsonIgnore]
        public string Key => Alias?.ToLowerInvariant() ?? string.Empty;

        private static BitmapImage? LoadPlaceholderImage()
        {
            try
            {
                var placeholder = new BitmapImage();
                placeholder.BeginInit();
                placeholder.UriSource = new Uri("pack://application:,,,/Assets/placeholder.png", UriKind.Absolute);
                placeholder.DecodePixelWidth = 80;
                placeholder.CacheOption = BitmapCacheOption.OnLoad;
                placeholder.EndInit();
                placeholder.Freeze();
                return placeholder;
            }
            catch (Exception)
            {
                return null;
            }
        }
    }
}

//-==================== END OF FILE: Models\ChampionSummary.cs ====================-//

//-==================== START OF FILE: Models\Chroma.cs ====================-//

﻿using System.Text.Json.Serialization;
using System.Collections.Generic;
using System.Windows.Media;

namespace skinhunter.Models
{
    public partial class Chroma : ObservableObject
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; } = string.Empty;

        [JsonPropertyName("chromaPath")]
        public string ChromaPath { get; set; } = string.Empty;

        [JsonPropertyName("colors")]
        public List<string>? Colors { get; set; }

        [JsonIgnore]
        public string ImageUrl => Services.CdragonDataService.GetAssetUrl(ChromaPath);

        [JsonIgnore]
        public System.Windows.Media.Brush? ColorBrush
        {
            get
            {
                if (Colors == null || Colors.Count == 0) return System.Windows.Media.Brushes.Gray;
                if (Colors.Count == 1)
                {
                    try { return new SolidColorBrush((System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(Colors[0])); }
                    catch { return System.Windows.Media.Brushes.Gray; }
                }
                try
                {
                    var gradient = new LinearGradientBrush
                    {
                        StartPoint = new System.Windows.Point(0, 0.5),
                        EndPoint = new System.Windows.Point(1, 0.5)
                    };
                    gradient.GradientStops.Add(new GradientStop((System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(Colors[0]), 0.0));
                    gradient.GradientStops.Add(new GradientStop((System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(Colors[1]), 1.0));
                    return gradient;
                }
                catch { return System.Windows.Media.Brushes.Gray; }
            }
        }

        [ObservableProperty]
        [JsonIgnore]
        private bool _isSelected;
    }
}

//-==================== END OF FILE: Models\Chroma.cs ====================-//

//-==================== START OF FILE: Models\DataColor.cs ====================-//

﻿using System.Windows.Media;

namespace skinhunter.Models
{
    public struct DataColor
    {
        public Brush Color { get; set; }
    }
}


//-==================== END OF FILE: Models\DataColor.cs ====================-//

//-==================== START OF FILE: Models\InstalledSkinInfo.cs ====================-//

﻿using System.Text.Json.Serialization;

namespace skinhunter.Models
{
    public class InstalledSkinInfo
    {
        [JsonPropertyName("champion_id")]
        public int ChampionId { get; set; }

        [JsonPropertyName("skin_id_or_chroma_id")]
        public int SkinOrChromaId { get; set; }

        [JsonPropertyName("file_name")]
        public string FileName { get; set; } = string.Empty;

        [JsonPropertyName("folder_name")]
        public string FolderName { get; set; } = string.Empty;

        [JsonPropertyName("skin_name")]
        public string SkinName { get; set; } = string.Empty;

        [JsonPropertyName("chroma_name")]
        public string? ChromaName { get; set; }

        [JsonPropertyName("image_url")]
        public string ImageUrl { get; set; } = string.Empty;

        [JsonPropertyName("installed_at")]
        public DateTime InstalledAt { get; set; }

        public InstalledSkinInfo()
        {
            InstalledAt = DateTime.UtcNow;
        }
    }
}

//-==================== END OF FILE: Models\InstalledSkinInfo.cs ====================-//

//-==================== START OF FILE: Models\InstalledSkinInfoDisplay.cs ====================-//

﻿using CommunityToolkit.Mvvm.ComponentModel;
using System;
using System.ComponentModel;

namespace skinhunter.Models
{
    public partial class InstalledSkinInfoDisplay : ObservableObject
    {
        public InstalledSkinInfo SkinInfo { get; }

        private bool _isSelected;
        public bool IsSelected
        {
            get => _isSelected;
            set
            {
                if (SetProperty(ref _isSelected, value))
                {
                    SelectionChanged?.Invoke(this, EventArgs.Empty);
                }
            }
        }

        public event EventHandler? SelectionChanged;

        public string DisplayName => string.IsNullOrEmpty(SkinInfo.ChromaName) || SkinInfo.ChromaName.Equals("Default", StringComparison.OrdinalIgnoreCase)
                                    ? SkinInfo.SkinName
                                    : $"{SkinInfo.SkinName} ({SkinInfo.ChromaName})";
        public string FileName => SkinInfo.FileName;
        public string FolderName => SkinInfo.FolderName;
        public string ImageUrl => SkinInfo.ImageUrl;
        public string ChampionName { get; set; } = "Unknown Champion";

        public InstalledSkinInfoDisplay(InstalledSkinInfo skinInfo)
        {
            SkinInfo = skinInfo;
        }
    }
}

//-==================== END OF FILE: Models\InstalledSkinInfoDisplay.cs ====================-//

//-==================== START OF FILE: Models\MenuItem.cs ====================-//

﻿namespace skinhunter.Models
{
    public class MenuItem
    {
        public string Content { get; set; } = string.Empty;
        public SymbolRegular Icon { get; set; }
        public Type? TargetPageType { get; set; }
    }
}

//-==================== END OF FILE: Models\MenuItem.cs ====================-//

//-==================== START OF FILE: Models\Profile.cs ====================-//

﻿using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;

namespace skinhunter.Models
{
    public class Profile
    {
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        [JsonPropertyName("login")]
        public string? Login { get; set; }

        [JsonPropertyName("is_buyer")]
        public bool IsBuyer { get; set; }

        [JsonPropertyName("avatar_id")]
        public string? AvatarId { get; set; }

        [JsonPropertyName("preferences")]
        public Dictionary<string, object?>? Preferences { get; set; }

        [JsonPropertyName("created_at")]
        public DateTime CreatedAt { get; set; }

        [JsonPropertyName("updated_at")]
        public DateTime UpdatedAt { get; set; }
    }
}


//-==================== END OF FILE: Models\Profile.cs ====================-//

//-==================== START OF FILE: Models\SearchResultItem.cs ====================-//

﻿using skinhunter.Services;
using System.Windows.Media.Imaging;
using System.Threading.Tasks;
using System.Diagnostics;
using System.Windows.Media;


namespace skinhunter.Models
{
    public enum SearchResultType
    {
        Champion,
        Skin
    }

    public partial class SearchResultItem : ObservableObject
    {
        public int Id { get; }
        public string Name { get; }
        public SearchResultType Type { get; }
        public string DisplayType { get; }

        [ObservableProperty]
        private BitmapImage? _imageSource;

        private readonly string? _imagePath;

        public int ChampionId { get; }
        public Skin? OriginalSkinObject { get; }
        public ChampionSummary? OriginalChampionObject { get; }


        public SearchResultItem(ChampionSummary champion)
        {
            Id = champion.Id;
            Name = champion.Name;
            Type = SearchResultType.Champion;
            DisplayType = "Champion";
            _imagePath = champion.SquarePortraitPath;
            ChampionId = champion.Id;
            OriginalChampionObject = champion;
        }

        public SearchResultItem(Skin skin, ChampionSummary? parentChampion)
        {
            Id = skin.Id;
            Name = skin.Name;
            Type = SearchResultType.Skin;
            DisplayType = "Champion Skin";
            _imagePath = skin.TilePath;
            ChampionId = skin.ChampionId;
            OriginalSkinObject = skin;
            OriginalChampionObject = parentChampion;
        }

        private bool _isImageLoadingOrLoaded = false;

        public async Task LoadImageAsync()
        {
            if (_isImageLoadingOrLoaded || string.IsNullOrEmpty(_imagePath))
            {
                return;
            }

            _isImageLoadingOrLoaded = true;

            BitmapImage? loadedBitmap = null;
            Uri? imageUri = null;

            try
            {
                string fullUrl = CdragonDataService.GetAssetUrl(_imagePath);
                if (Uri.TryCreate(fullUrl, UriKind.Absolute, out imageUri))
                {

                    if (System.Windows.Application.Current != null)
                    {
                        await System.Windows.Application.Current.Dispatcher.InvokeAsync(() =>
                        {
                            BitmapImage bitmap = new();
                            bitmap.BeginInit();
                            bitmap.UriSource = imageUri;
                            bitmap.DecodePixelWidth = 64;
                            bitmap.CacheOption = BitmapCacheOption.OnLoad;
                            try
                            {
                                bitmap.EndInit();
                                if (bitmap.CanFreeze)
                                {
                                    bitmap.Freeze();
                                }
                                loadedBitmap = bitmap;
                            }
                            catch (Exception exEndInit)
                            {
                                Debug.WriteLine($"Error en EndInit para imagen {imageUri}: {exEndInit.Message}");
                                loadedBitmap = null;
                            }
                        });
                    }
                }
                else
                {
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error creando Uri o despachando carga de imagen {_imagePath}: {ex.Message}");
                loadedBitmap = null;
            }

            ImageSource = loadedBitmap;
        }
    }
}

//-==================== END OF FILE: Models\SearchResultItem.cs ====================-//

//-==================== START OF FILE: Models\Skin.cs ====================-//

﻿using System.Text.Json.Serialization;
using System.Collections.Generic;
using System.Linq;

namespace skinhunter.Models
{
    public class Skin
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; } = string.Empty;

        [JsonPropertyName("tilePath")]
        public string TilePath { get; set; } = string.Empty;

        [JsonPropertyName("splashPath")]
        public string SplashPath { get; set; } = string.Empty;

        [JsonPropertyName("rarityGemPath")]
        public string? RarityGemPath { get; set; }

        [JsonPropertyName("isLegacy")]
        public bool IsLegacy { get; set; }

        [JsonPropertyName("description")]
        public string? Description { get; set; }

        [JsonPropertyName("chromas")]
        public List<Chroma>? Chromas { get; set; }

        [JsonIgnore]
        public string TileImageUrl => Services.CdragonDataService.GetAssetUrl(TilePath);
        [JsonIgnore]
        public string SplashImageUrl => Services.CdragonDataService.GetAssetUrl(SplashPath);
        [JsonIgnore]
        public string? RarityImageUrl => RarityGemPath != null ? Services.CdragonDataService.GetAssetUrl(RarityGemPath) : null;
        [JsonIgnore]
        public string RarityName => GetRarityNameFromPath(RarityGemPath);

        [JsonIgnore]
        public int ChampionId => Id / 1000;

        [JsonIgnore]
        public bool HasChromas => Chromas?.Any() ?? false;

        public Skin() { }


        private static string GetRarityNameFromPath(string? path)
        {
            if (string.IsNullOrEmpty(path)) return "Standard";
            if (path.Contains("ultimate")) return "Ultimate";
            if (path.Contains("mythic")) return "Mythic";
            if (path.Contains("legendary")) return "Legendary";
            if (path.Contains("epic")) return "Epic";
            if (path.Contains("transcendent")) return "Transcendent";
            if (path.Contains("exalted")) return "Exalted";
            return "Unknown";
        }
    }
}

//-==================== END OF FILE: Models\Skin.cs ====================-//

//-==================== START OF FILE: Models\SupabaseDataModels.cs ====================-//

﻿using System.Collections.Generic;
using System.Text.Json.Serialization;

namespace skinhunter.Models
{
    public class SupabaseChampionData
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; } = string.Empty;


        [JsonPropertyName("skins")]
        public List<SupabaseSkinData>? Skins { get; set; }
    }

    public class SupabaseSkinData
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; } = string.Empty;


        [JsonPropertyName("chromas")]
        public List<SupabaseChromaData>? Chromas { get; set; }
    }

    public class SupabaseChromaData
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; } = string.Empty;

        [JsonPropertyName("chromaPath")]
        public string ChromaPath { get; set; } = string.Empty;

        [JsonPropertyName("colors")]
        public List<string>? Colors { get; set; }
    }
}

//-==================== END OF FILE: Models\SupabaseDataModels.cs ====================-//

//-==================== START OF FILE: Models\SupabaseSessionHandler.cs ====================-//

﻿using Supabase.Gotrue.Interfaces;
using Supabase.Gotrue;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using System.Text.Json;
using skinhunter.Services;

namespace skinhunter.Models
{
    public class SupabaseSessionHandler : IGotrueSessionPersistence<Session>
    {
        private readonly string _sessionFilePath;

        public SupabaseSessionHandler()
        {
            var appDataPath = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
            var appFolder = Path.Combine(appDataPath, "SkinHunter");
            Directory.CreateDirectory(appFolder);
            _sessionFilePath = Path.Combine(appFolder, "session.dat");
        }

        public void DestroySession()
        {
            try
            {
                if (File.Exists(_sessionFilePath))
                {
                    File.Delete(_sessionFilePath);
                    FileLoggerService.Log("[SessionHandler] Session file destroyed.");
                }
            }
            catch (Exception ex)
            {
                FileLoggerService.Log($"[SessionHandler] Failed to destroy session file: {ex.Message}");
            }
        }

        public void SaveSession(Session session)
        {
            try
            {
                var json = JsonSerializer.Serialize(session);
                var bytesToProtect = Encoding.UTF8.GetBytes(json);
                var encryptedJson = ProtectedData.Protect(bytesToProtect, null, DataProtectionScope.CurrentUser);
                File.WriteAllBytes(_sessionFilePath, encryptedJson);
                FileLoggerService.Log("[SessionHandler] Session saved and encrypted successfully.");
            }
            catch (Exception ex)
            {
                FileLoggerService.Log($"[SessionHandler] Failed to save session: {ex.Message}");
            }
        }

        public Session? LoadSession()
        {
            try
            {
                if (!File.Exists(_sessionFilePath))
                {
                    FileLoggerService.Log("[SessionHandler] Session file not found.");
                    return null;
                }

                var encryptedJson = File.ReadAllBytes(_sessionFilePath);
                if (encryptedJson.Length == 0) return null;

                var unprotectedBytes = ProtectedData.Unprotect(encryptedJson, null, DataProtectionScope.CurrentUser);
                var json = Encoding.UTF8.GetString(unprotectedBytes);

                FileLoggerService.Log("[SessionHandler] Session loaded and decrypted successfully.");
                return JsonSerializer.Deserialize<Session>(json);
            }
            catch (Exception ex)
            {
                FileLoggerService.Log($"[SessionHandler] Failed to load session: {ex.Message}");
                DestroySession();
                return null;
            }
        }
    }
}

//-==================== END OF FILE: Models\SupabaseSessionHandler.cs ====================-//

//-==================== START OF FILE: Models\UserPreferences.cs ====================-//

﻿// Models/UserPreferences.cs
using System.Text.Json.Serialization;
using System.Collections.Generic;

namespace skinhunter.Services
{
    public class UserPreferences
    {
        [JsonPropertyName("theme")]
        public string? Theme { get; set; } = "dark";

        [JsonPropertyName("sync_on_start")]
        public bool SyncOnStart { get; set; } = true;

        [JsonPropertyName("installed_skins_info")]
        public List<InstalledSkinInfo> InstalledSkins { get; set; } = [];
    }
}

//-==================== END OF FILE: Models\UserPreferences.cs ====================-//

//-==================== START OF FILE: Resources\Translations.cs ====================-//

namespace skinhunter.Resources
{
    public partial class Translations
    {
    }
}


//-==================== END OF FILE: Resources\Translations.cs ====================-//

//-==================== START OF FILE: Services\ApplicationHostService.cs ====================-//

﻿using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using skinhunter.Views.Pages;
using System;
using System.Windows;
using skinhunter.ViewModels.Windows;
using Supabase;
using System.Threading.Tasks;
using System.Threading;

namespace skinhunter.Services
{
    public class ApplicationHostService : IHostedService
    {
        private readonly IServiceProvider _serviceProvider;
        private INavigationWindow? _navigationWindow;

        public ApplicationHostService(IServiceProvider serviceProvider)
        {
            _serviceProvider = serviceProvider;
        }

        public async Task StartAsync(CancellationToken cancellationToken)
        {
            await Application.Current.Dispatcher.InvokeAsync(async () =>
            {
                var mainVM = _serviceProvider.GetRequiredService<MainWindowViewModel>();
                mainVM.IsGloballyLoading = true;
                _navigationWindow = _serviceProvider.GetRequiredService<INavigationWindow>();
                _navigationWindow.ShowWindow();
                await InitializeApplicationAsync(cancellationToken);
            });
        }

        private async Task InitializeApplicationAsync(CancellationToken cancellationToken)
        {
            var supabaseClient = _serviceProvider.GetRequiredService<Client>();
            var authTokenManager = _serviceProvider.GetRequiredService<AuthTokenManager>();
            var navigationService = _serviceProvider.GetRequiredService<INavigationService>();
            var userPrefsService = _serviceProvider.GetRequiredService<UserPreferencesService>();
            var modToolsService = _serviceProvider.GetRequiredService<ModToolsService>();
            var mainVM = _serviceProvider.GetRequiredService<MainWindowViewModel>();

            bool isAuthenticated = false;

            mainVM.GlobalLoadingMessage = "Loading session...";
            await supabaseClient.InitializeAsync();

            if (supabaseClient.Auth.CurrentSession?.AccessToken != null)
            {
                authTokenManager.SetToken(supabaseClient.Auth.CurrentSession.AccessToken);
                isAuthenticated = true;
            }
            else if (!string.IsNullOrEmpty(App.InitialPipeName))
            {
                mainVM.GlobalLoadingMessage = "Authenticating...";
                var pipeClient = _serviceProvider.GetRequiredService<PipeClientService>();
                using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(25));
                string? receivedToken = await pipeClient.RequestTokenFromServerAsync(App.InitialPipeName, cts.Token);

                if (!string.IsNullOrEmpty(receivedToken))
                {
                    authTokenManager.SetToken(receivedToken);
                    isAuthenticated = true;
                }
            }

            if (cancellationToken.IsCancellationRequested) return;

            if (isAuthenticated)
            {
                mainVM.GlobalLoadingMessage = "Loading user profile...";
                await userPrefsService.LoadPreferencesAsync();

                navigationService.Navigate(typeof(ChampionGridPage));

                if (userPrefsService.GetSyncOnStart())
                {
                    mainVM.GlobalLoadingMessage = "Synchronizing skins...";
                    await modToolsService.QueueSyncAndRebuild();
                }
            }
            else
            {
                navigationService.Navigate(typeof(AuthenticationRequiredPage));
            }
            mainVM.IsGloballyLoading = false;
        }

        public async Task StopAsync(CancellationToken cancellationToken)
        {
            var modToolsService = _serviceProvider.GetRequiredService<ModToolsService>();
            await modToolsService.StopRunOverlayAsync();
            await Application.Current.Dispatcher.InvokeAsync(Application.Current.Shutdown);
        }
    }
}

//-==================== END OF FILE: Services\ApplicationHostService.cs ====================-//

//-==================== START OF FILE: Services\AuthTokenManager.cs ====================-//

﻿
using System.Security.Claims;
using System.Text;
using System.IdentityModel.Tokens.Jwt;
using Microsoft.IdentityModel.Tokens;
using System.Linq; // Para .Any()
using System.Collections.Generic; // Para List<Claim>
using System; // Para DateTime

namespace skinhunter.Services
{
    public partial class AuthTokenManager : ObservableObject
    {
        [ObservableProperty]
        private string? _currentToken;

        [ObservableProperty]
        private ClaimsPrincipal? _currentUserPrincipal;

        [ObservableProperty]
        private bool _isAuthenticated;

        public bool SetToken(string? token)
        {
            FileLoggerService.Log($"[AuthTokenManager][skinhunter] SetToken called with token (isNullOrEmpty: {string.IsNullOrEmpty(token)})");
            if (string.IsNullOrEmpty(token))
            {
                ClearTokenInternal();
                FileLoggerService.Log($"[AuthTokenManager][skinhunter] Token was null or empty.");
                return false;
            }

            var principal = DecodeSupabaseToken(token);
            if (principal?.Identity?.IsAuthenticated == true && principal.Claims.Any())
            {
                CurrentToken = token;
                CurrentUserPrincipal = principal;
                IsAuthenticated = true;
                FileLoggerService.Log($"[AuthTokenManager][skinhunter] Supabase token decoded and processed. IsAuthenticated: {IsAuthenticated}. User (sub claim): {GetClaim(ClaimTypes.NameIdentifier)}, Email: {GetClaim(ClaimTypes.Email)}");
                return true;
            }
            else
            {
                ClearTokenInternal();
                FileLoggerService.Log($"[AuthTokenManager][skinhunter] Supabase token decoding failed, no claims, or not marked authenticated by DecodeSupabaseToken.");
                return false;
            }
        }

        private void ClearTokenInternal()
        {
            CurrentToken = null;
            CurrentUserPrincipal = null;
            IsAuthenticated = false;
        }

        public void ClearToken()
        {
            ClearTokenInternal();
            FileLoggerService.Log($"[AuthTokenManager][skinhunter] Token cleared.");
        }

        private ClaimsPrincipal? DecodeSupabaseToken(string token)
        {
            if (string.IsNullOrWhiteSpace(token))
            {
                FileLoggerService.Log($"[AuthTokenManager][skinhunter] DecodeSupabaseToken: Input token is null or whitespace.");
                return null;
            }
            try
            {
                var tokenHandler = new JwtSecurityTokenHandler();
                if (!tokenHandler.CanReadToken(token))
                {
                    FileLoggerService.Log($"[AuthTokenManager][skinhunter] Token is not a valid JWT format.");
                    return null;
                }

                var jwtToken = tokenHandler.ReadJwtToken(token);
                FileLoggerService.Log($"[AuthTokenManager] Decoded JWT. All Claims ({jwtToken.Claims.Count()}):");
                foreach (var claim in jwtToken.Claims)
                {
                    FileLoggerService.Log($"[AuthTokenManager]   -> Type: '{claim.Type}', Value: '{claim.Value}'");
                }

                var utcNow = DateTime.UtcNow;
                if (jwtToken.ValidTo < utcNow)
                {
                    FileLoggerService.Log($"[AuthTokenManager][skinhunter] Supabase token is expired. ValidTo: {jwtToken.ValidTo}, UtcNow: {utcNow}");
                    return null;
                }

                // Crear ClaimsIdentity y ClaimsPrincipal.
                // Marcamos como autenticado porque confiamos en que shlauncher lo validó (aunque no validamos firma aquí).
                var claimsForIdentity = new List<Claim>(jwtToken.Claims);

                // Asegurar que las claims estándar importantes estén si existen en el token original.
                var subClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == "sub");
                if (subClaim != null && !claimsForIdentity.Any(c => c.Type == ClaimTypes.NameIdentifier))
                {
                    claimsForIdentity.Add(new Claim(ClaimTypes.NameIdentifier, subClaim.Value));
                }

                var emailClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == "email");
                if (emailClaim != null && !claimsForIdentity.Any(c => c.Type == ClaimTypes.Email))
                {
                    claimsForIdentity.Add(new Claim(ClaimTypes.Email, emailClaim.Value));
                }

                // Si el Auth Hook en Supabase añade "login" y "is_buyer", estas ya estarán en jwtToken.Claims
                // y por ende en claimsForIdentity.

                // El "name" de la identidad (tercer parámetro) es el que se usa para Identity.Name
                // El "role" de la identidad (cuarto parámetro) es para Identity.RoleClaimType
                var claimsIdentity = new ClaimsIdentity(claimsForIdentity, "SupabaseJWT_Decoded", ClaimTypes.NameIdentifier, ClaimTypes.Role);

                FileLoggerService.Log($"[AuthTokenManager][skinhunter] Supabase token successfully decoded and ClaimsIdentity created. Claims count in identity: {claimsIdentity.Claims.Count()}");
                return new ClaimsPrincipal(claimsIdentity);
            }
            catch (Exception ex)
            {
                FileLoggerService.Log($"[AuthTokenManager][skinhunter] Supabase token decoding (read) failed: {ex.Message}");
                return null;
            }
        }

        public string? GetClaim(string claimType)
        {
            return CurrentUserPrincipal?.FindAll(claimType).FirstOrDefault()?.Value; // Usar FindAll y FirstOrDefault para ser más robusto
        }
    }
}


//-==================== END OF FILE: Services\AuthTokenManager.cs ====================-//

//-==================== START OF FILE: Services\CdragonDataService.cs ====================-//

﻿using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using skinhunter.Models;
using System.Linq;
using System.IO;
using System.Net.Http.Headers;
using System.Diagnostics;

namespace skinhunter.Services
{
    public static class CdragonDataService
    {
        private static readonly HttpClient _httpClient = CreateHttpClient();
        private static readonly JsonSerializerOptions _jsonOptions = new() { PropertyNameCaseInsensitive = true };

        private const string CdragonBaseUrl = "https://raw.communitydragon.org/latest";
        private const string DataRoot = $"{CdragonBaseUrl}/plugins/rcp-be-lol-game-data/global/default";
        private static string? _cdragonVersion;

        private const string SupabaseUrl = "https://odlqwkgewzxxmbsqutja.supabase.co";
        private const string SupabaseAnonKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9kbHF3a2dld3p4eG1ic3F1dGphIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzQyMTM2NzcsImV4cCI6MjA0OTc4OTY3N30.qka6a71bavDeUQgy_BKoVavaClRQa_gT36Au7oO9AF0";
        private const string SupabaseStorageBasePath = "/storage/v1/object/public";

        private static HttpClient CreateHttpClient() => new();

        private static async Task<string> GetCdragonVersionAsync()
        {
            if (_cdragonVersion == null)
            {
                try
                {
                    var metaUrl = $"{CdragonBaseUrl}/content-metadata.json";
                    using var request = new HttpRequestMessage(HttpMethod.Get, metaUrl);
                    using var response = await _httpClient.SendAsync(request);
                    response.EnsureSuccessStatusCode();
                    using var json = await response.Content.ReadAsStreamAsync();
                    var metadata = await JsonSerializer.DeserializeAsync<Dictionary<string, JsonElement>>(json, _jsonOptions);
                    if (metadata != null && metadata.TryGetValue("version", out var versionElement))
                    {
                        _cdragonVersion = versionElement.GetString() ?? "latest";
                    }
                    else { _cdragonVersion = "latest"; }
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"[CdragonDataService] Error fetching CDRAGON version: {ex.Message}");
                    _cdragonVersion = "latest";
                }
            }
            return _cdragonVersion;
        }

        private static async Task<T?> FetchDataAsync<T>(string fullUrl, bool isSupabase = false) where T : class
        {
            var httpClientToUse = _httpClient;
            try
            {
                using var request = new HttpRequestMessage(HttpMethod.Get, fullUrl);
                if (isSupabase)
                {
                    request.Headers.TryAddWithoutValidation("apikey", SupabaseAnonKey);
                }

                using var response = await httpClientToUse.SendAsync(request);
                response.EnsureSuccessStatusCode();
                byte[] contentBytes = await response.Content.ReadAsByteArrayAsync();
                if (contentBytes == null || contentBytes.Length == 0) return null;
                using var memoryStream = new MemoryStream(contentBytes);
                return await JsonSerializer.DeserializeAsync<T>(memoryStream, _jsonOptions);
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[CdragonDataService] Error fetching/parsing {Path.GetFileNameWithoutExtension(fullUrl)}: {ex.Message}");
            }
            return null;
        }

        private static async Task<SupabaseChampionData?> FetchChampionDataFromSupabaseAsync(int championId)
        {
            string supabaseFileUrl = $"{SupabaseUrl}{SupabaseStorageBasePath}/api_json/{championId}.json";
            return await FetchDataAsync<SupabaseChampionData>(supabaseFileUrl, isSupabase: true);
        }

        public static async Task<List<ChampionSummary>?> GetChampionSummariesAsync()
        {
            _ = await GetCdragonVersionAsync();
            var url = $"{DataRoot}/v1/champion-summary.json";
            var summaries = await FetchDataAsync<List<ChampionSummary>>(url);
            return summaries?.Where(c => c.Id != -1).OrderBy(c => c.Name).ToList();
        }

        public static async Task<Dictionary<string, Skin>?> GetAllSkinsAsync()
        {
            _ = await GetCdragonVersionAsync();
            var url = $"{DataRoot}/v1/skins.json";
            return await FetchDataAsync<Dictionary<string, Skin>>(url);
        }

        public static async Task EnrichSkinWithSupabaseChromaDataAsync(Skin wpfSkinToEnrich)
        {
            if (wpfSkinToEnrich == null) return;

            var championDataFromSupabase = await FetchChampionDataFromSupabaseAsync(wpfSkinToEnrich.ChampionId);

            if (championDataFromSupabase?.Skins == null)
            {
                return;
            }

            SupabaseSkinData? supabaseSkinData = championDataFromSupabase.Skins.FirstOrDefault(s => s.Id == wpfSkinToEnrich.Id);

            if (supabaseSkinData?.Chromas != null && supabaseSkinData.Chromas.Any())
            {
                var newWpfChromas = new List<Chroma>();
                foreach (var supabaseChromaSource in supabaseSkinData.Chromas)
                {
                    if (supabaseChromaSource != null)
                    {
                        var newWpfChroma = new Models.Chroma
                        {
                            Id = supabaseChromaSource.Id,
                            Name = supabaseChromaSource.Name,
                            ChromaPath = supabaseChromaSource.ChromaPath,
                            Colors = supabaseChromaSource.Colors != null ? new List<string>(supabaseChromaSource.Colors) : null
                        };
                        newWpfChromas.Add(newWpfChroma);
                    }
                }
                wpfSkinToEnrich.Chromas = newWpfChromas.OrderBy(c => c.Id).ToList();
            }
            else
            {
            }
        }

        public static async Task<ChampionDetail?> GetChampionDetailsAsync(int championId)
        {
            _ = await GetCdragonVersionAsync();
            var detailsUrl = $"{DataRoot}/v1/champions/{championId}.json";
            var championDetailWpf = await FetchDataAsync<ChampionDetail>(detailsUrl);
            if (championDetailWpf == null) return null;

            var allSkinsFromCdragon = await GetAllSkinsAsync();
            var skinsForThisChampionWpf = new List<Skin>();

            if (allSkinsFromCdragon != null)
            {
                foreach (var cdragonSkinEntry in allSkinsFromCdragon.Where(kvp => kvp.Value.ChampionId == championId))
                {
                    Skin cdragonSkinObject = cdragonSkinEntry.Value;

                    var currentWpfSkin = new Skin
                    {
                        Id = cdragonSkinObject.Id,
                        Name = cdragonSkinObject.Name,
                        TilePath = cdragonSkinObject.TilePath,
                        SplashPath = cdragonSkinObject.SplashPath,
                        RarityGemPath = cdragonSkinObject.RarityGemPath,
                        IsLegacy = cdragonSkinObject.IsLegacy,
                        Description = cdragonSkinObject.Description,
                        Chromas = []
                    };

                    if (cdragonSkinObject.Chromas != null && cdragonSkinObject.Chromas.Any())
                    {
                        foreach (var cdragonChromaSource in cdragonSkinObject.Chromas)
                        {
                            if (cdragonChromaSource != null)
                            {
                                currentWpfSkin.Chromas.Add(new Models.Chroma
                                {
                                    Id = cdragonChromaSource.Id,
                                    Name = cdragonChromaSource.Name,
                                    ChromaPath = cdragonChromaSource.ChromaPath,
                                    Colors = cdragonChromaSource.Colors != null ? new List<string>(cdragonChromaSource.Colors) : null
                                });
                            }
                        }
                    }

                    await EnrichSkinWithSupabaseChromaDataAsync(currentWpfSkin);

                    currentWpfSkin.Chromas = currentWpfSkin.Chromas.OrderBy(c => c.Id).ToList();
                    skinsForThisChampionWpf.Add(currentWpfSkin);
                }
            }
            championDetailWpf.Skins = skinsForThisChampionWpf.OrderBy(s => s.Name).ToList();
            return championDetailWpf;
        }

        public static string GetAssetUrl(string? relativePath)
        {
            if (string.IsNullOrWhiteSpace(relativePath))
                return "pack://application:,,,/Assets/placeholder.png";
            if (Uri.TryCreate(relativePath, UriKind.Absolute, out Uri? uriResult) && (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps))
                return relativePath;
            const string apiAssetPrefix = "/lol-game-data/assets";
            if (relativePath.StartsWith(apiAssetPrefix, StringComparison.OrdinalIgnoreCase))
                return $"{DataRoot}/{relativePath[apiAssetPrefix.Length..].TrimStart('/')}".ToLowerInvariant();
            return $"{DataRoot}/{relativePath.TrimStart('/')}".ToLowerInvariant();
        }
    }
}

//-==================== END OF FILE: Services\CdragonDataService.cs ====================-//

//-==================== START OF FILE: Services\CustomNavigationService.cs ====================-//

﻿using skinhunter.ViewModels;
using skinhunter.Models;
using System;
using Microsoft.Extensions.DependencyInjection;
using System.Threading.Tasks;
using Wpf.Ui;
using skinhunter.ViewModels.Windows;
using skinhunter.ViewModels.Dialogs;
using skinhunter.Views.Pages;
using System.Diagnostics;

namespace skinhunter.Services
{
    public interface ICustomNavigationService
    {
        void NavigateToChampionDetail(int championId);
        void ShowSkinDetailDialog(Skin skin);
        void ShowOmnisearchDialog();
        void CloseDialog();
        void CloseOmnisearchDialog();
        void GoBack();
        object? ConsumeNavigationParameter();
    }

    public class CustomNavigationService : ICustomNavigationService
    {
        private readonly IServiceProvider _serviceProvider;
        private readonly INavigationService _wpfUiNavigationService;
        private MainWindowViewModel? _mainWindowViewModelCache;
        private object? _pendingNavigationParameter;

        public CustomNavigationService(IServiceProvider serviceProvider, INavigationService wpfUiNavigationService)
        {
            _serviceProvider = serviceProvider;
            _wpfUiNavigationService = wpfUiNavigationService;
        }

        private MainWindowViewModel MainVM => _mainWindowViewModelCache ??= _serviceProvider.GetRequiredService<MainWindowViewModel>();

        public void NavigateToChampionDetail(int championId)
        {
            Debug.WriteLine($"[CustomNavigationService.NavigateToChampionDetail] Storing parameter: {championId} and navigating to ChampionDetailPage");
            _pendingNavigationParameter = championId;
            _wpfUiNavigationService.Navigate(typeof(ChampionDetailPage));
        }

        public object? ConsumeNavigationParameter()
        {
            var parameter = _pendingNavigationParameter;
            _pendingNavigationParameter = null;
            Debug.WriteLine($"[CustomNavigationService.ConsumeNavigationParameter] Parameter consumed: {parameter}");
            return parameter;
        }

        public void ShowSkinDetailDialog(Skin skin)
        {
            var skinDetailVM = _serviceProvider.GetRequiredService<SkinDetailViewModel>();
            MainVM.DialogViewModel = skinDetailVM;
            _ = skinDetailVM.LoadSkinAsync(skin);
        }

        public async void ShowOmnisearchDialog()
        {
            var omnisearchVM = _serviceProvider.GetRequiredService<OmnisearchViewModel>();
            MainVM.OmnisearchDialogViewModel = omnisearchVM;
            if (omnisearchVM is not null)
            {
                await omnisearchVM.EnsureDataLoadedAsync();
            }
        }

        public void CloseDialog()
        {
            MainVM.DialogViewModel = null;
        }

        public void CloseOmnisearchDialog()
        {
            var omniVM = MainVM.OmnisearchDialogViewModel;
            if (omniVM is not null)
            {
                omniVM.IsFilterPopupOpen = false;
            }
            MainVM.OmnisearchDialogViewModel = null;
        }

        public void GoBack()
        {
            if (MainVM.DialogViewModel is not null || MainVM.OmnisearchDialogViewModel is not null)
            {
                CloseDialog();
                CloseOmnisearchDialog();
                return;
            }
            _wpfUiNavigationService.GoBack();
        }
    }
}

//-==================== END OF FILE: Services\CustomNavigationService.cs ====================-//

//-==================== START OF FILE: Services\FileLoggerService.cs ====================-//

﻿using System.IO;
using System.Runtime.CompilerServices;
using System;

namespace skinhunter.Services
{
    public static class FileLoggerService
    {
        private static readonly string _logFilePath;
        private static readonly object _lock = new();

        static FileLoggerService()
        {
            string logDirectory = Path.Combine(AppContext.BaseDirectory, "Logs");
            try
            {
                Directory.CreateDirectory(logDirectory);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"[FileLoggerService] Failed to create log directory: {logDirectory}. Error: {ex.Message}");
            }
            _logFilePath = Path.Combine(logDirectory, $"skinhunter_debug_{DateTime.Now:yyyyMMdd_HHmmss}.log");
            Log("Logger initialized. Logging to: " + _logFilePath);
        }

        public static void Log(string message, [CallerMemberName] string memberName = "", [CallerFilePath] string sourceFilePath = "", [CallerLineNumber] int sourceLineNumber = 0)
        {
            try
            {
                lock (_lock)
                {
                    string logMessage = $"{DateTime.Now:yyyy-MM-dd HH:mm:ss.fff} [{Path.GetFileNameWithoutExtension(sourceFilePath)}.{memberName}:{sourceLineNumber}] {message}{Environment.NewLine}";
                    File.AppendAllText(_logFilePath, logMessage, System.Text.Encoding.UTF8);
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"[FileLoggerService] Failed to write to log file. Error: {ex.Message}");
            }
        }
    }
}

//-==================== END OF FILE: Services\FileLoggerService.cs ====================-//

//-==================== START OF FILE: Services\GlobalTaskService.cs ====================-//

﻿using skinhunter.ViewModels.Windows;
using System;
using System.Collections.Concurrent;
using System.Threading;
using System.Threading.Tasks;
using Wpf.Ui.Controls;

namespace skinhunter.Services
{
    public class GlobalTaskService
    {
        private readonly MainWindowViewModel _mainWindowViewModel;
        private readonly SemaphoreSlim _taskSemaphore = new(1, 1);

        public GlobalTaskService(MainWindowViewModel mainWindowViewModel)
        {
            _mainWindowViewModel = mainWindowViewModel;
        }

        public async Task RunTask(Func<Task> taskToRun, string loadingMessage)
        {
            await _taskSemaphore.WaitAsync();
            try
            {
                _mainWindowViewModel.IsGloballyLoading = true;
                _mainWindowViewModel.GlobalLoadingMessage = loadingMessage;

                await taskToRun();
            }
            catch (Exception ex)
            {
                FileLoggerService.Log($"[GlobalTaskService] Error running global task: {ex.Message}");
                await _mainWindowViewModel.ShowGlobalError("An unexpected error occurred.");
            }
            finally
            {
                _mainWindowViewModel.IsGloballyLoading = false;
                _taskSemaphore.Release();
            }
        }

        public async Task RunGlobalSequence(Func<Action<string>, Task> sequence)
        {
            await _taskSemaphore.WaitAsync();
            try
            {
                _mainWindowViewModel.IsGloballyLoading = true;
                Action<string> messageSetter = (msg) =>
                {
                    _mainWindowViewModel.GlobalLoadingMessage = msg;
                };

                await sequence(messageSetter);
            }
            catch (Exception ex)
            {
                FileLoggerService.Log($"[GlobalTaskService] Error running global sequence: {ex.Message}");
                await _mainWindowViewModel.ShowGlobalError("A critical error occurred during startup.");
            }
            finally
            {
                _mainWindowViewModel.IsGloballyLoading = false;
                _taskSemaphore.Release();
            }
        }
    }
}

//-==================== END OF FILE: Services\GlobalTaskService.cs ====================-//

//-==================== START OF FILE: Services\ModToolsService.cs ====================-//

﻿using Microsoft.Extensions.DependencyInjection;
using skinhunter.Models;
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using Supabase;
using System.Threading.Tasks;
using System.Windows;
using Wpf.Ui.Controls;

namespace skinhunter.Services
{
    public class ModToolsService : IDisposable
    {
        private readonly string _modToolsExePath;
        private readonly Client _supabaseClient;
        private readonly IServiceProvider _serviceProvider;
        private readonly string _installedSkinsDir;
        private readonly string _profilesDir;
        private readonly string _gamePath;

        private Process? _runOverlayProcess;
        private readonly SemaphoreSlim _processLock = new(1, 1);
        private readonly CancellationTokenSource _queueCts = new();
        private readonly ConcurrentQueue<Func<CancellationToken, Task>> _commandQueue = new();

        public event Action<string, bool>? CommandOutputReceived;
        public event Action<bool>? OverlayStatusChanged;
        public bool IsOverlayRunning { get; private set; }

        public ModToolsService(IServiceProvider serviceProvider, Client supabaseClient)
        {
            _serviceProvider = serviceProvider;
            _supabaseClient = supabaseClient;
            string appExePath = Path.GetDirectoryName(AppContext.BaseDirectory) ?? throw new DirectoryNotFoundException("Could not determine application base directory.");
            _modToolsExePath = Path.Combine(appExePath, "Tools", "cslol-tools", "mod-tools.exe");
            string userDataDir = Path.Combine(appExePath, "UserData", "LoLModInstaller");
            _installedSkinsDir = Path.Combine(userDataDir, "installed");
            _profilesDir = Path.Combine(userDataDir, "profiles", "Default");
            _gamePath = @"C:\Riot Games\League of Legends\Game";

            EnsureDirectoriesExist();
            _ = ProcessQueueAsync(_queueCts.Token);
        }

        private void EnsureDirectoriesExist()
        {
            try
            {
                Directory.CreateDirectory(_installedSkinsDir);
                Directory.CreateDirectory(_profilesDir);
            }
            catch (Exception ex)
            {
                FileLoggerService.Log($"[ModToolsService] Failed to create directories: {ex.Message}");
            }
        }

        private Task EnqueueCommand(Func<CancellationToken, Task> commandAction)
        {
            var tcs = new TaskCompletionSource(TaskCreationOptions.RunContinuationsAsynchronously);

            _commandQueue.Enqueue(async (token) =>
            {
                try
                {
                    await commandAction(token);
                    tcs.SetResult();
                }
                catch (OperationCanceledException)
                {
                    tcs.SetCanceled();
                }
                catch (Exception ex)
                {
                    tcs.SetException(ex);
                }
            });

            return tcs.Task;
        }

        private async Task ProcessQueueAsync(CancellationToken cancellationToken)
        {
            while (!cancellationToken.IsCancellationRequested)
            {
                if (_commandQueue.TryDequeue(out var command))
                {
                    try
                    {
                        await command(cancellationToken);
                    }
                    catch (Exception ex)
                    {
                        FileLoggerService.Log($"[ModToolsService] Error executing queued command: {ex.Message}{Environment.NewLine}{ex.StackTrace}");
                    }
                }
                else
                {
                    await Task.Delay(100, cancellationToken);
                }
            }
        }

        private async Task<(bool Success, string Output)> ExecuteShortLivedCommandAsync(string arguments, CancellationToken cancellationToken)
        {
            await _processLock.WaitAsync(cancellationToken);
            try
            {
                if (!File.Exists(_modToolsExePath))
                {
                    return (false, "mod-tools.exe not found.");
                }

                var processInfo = new ProcessStartInfo
                {
                    FileName = _modToolsExePath,
                    Arguments = arguments,
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    UseShellExecute = false,
                    CreateNoWindow = true,
                    StandardOutputEncoding = Encoding.UTF8,
                    WorkingDirectory = Path.GetDirectoryName(_modToolsExePath)
                };

                FileLoggerService.Log($"[ModToolsService] Executing: \"{processInfo.FileName}\" {processInfo.Arguments}");

                using var process = Process.Start(processInfo);
                if (process == null) return (false, "Failed to start process.");

                var outputBuilder = new StringBuilder();
                var errorBuilder = new StringBuilder();

                process.OutputDataReceived += (s, e) => { if (e.Data != null) { outputBuilder.AppendLine(e.Data); CommandOutputReceived?.Invoke(e.Data, false); } };
                process.ErrorDataReceived += (s, e) => { if (e.Data != null) { errorBuilder.AppendLine(e.Data); CommandOutputReceived?.Invoke("An error occurred with mod-tools.", true); } };

                process.BeginOutputReadLine();
                process.BeginErrorReadLine();

                await process.WaitForExitAsync(cancellationToken);

                string finalOutput = string.IsNullOrWhiteSpace(errorBuilder.ToString()) ? outputBuilder.ToString() : errorBuilder.ToString();
                FileLoggerService.Log($"[ModToolsService] Process exited with code {process.ExitCode}. Output: {finalOutput}");
                return (process.ExitCode == 0, finalOutput);
            }
            finally
            {
                _processLock.Release();
            }
        }

        public Task StopRunOverlayAsync() => EnqueueCommand(StopRunOverlayInternalAsync);
        public Task QueueSyncAndRebuild() => EnqueueCommand(SynchronizeAndRebuildInternalAsync);
        public Task QueueInstallAndRebuild(InstalledSkinInfo skinInfo, byte[] fantomeBytes, ISnackbarService snackbarService) => EnqueueCommand(c => InstallSkinInternalAsync(skinInfo, fantomeBytes, snackbarService, c));
        public Task QueueUninstallSkins(IEnumerable<InstalledSkinInfo> skinsToUninstall, ISnackbarService snackbarService) => EnqueueCommand(c => UninstallSkinsInternalAsync(skinsToUninstall, snackbarService, c));

        private async Task SynchronizeAndRebuildInternalAsync(CancellationToken cancellationToken)
        {
            await StopRunOverlayInternalAsync(cancellationToken);

            var userPrefs = _serviceProvider.GetRequiredService<UserPreferencesService>();
            var installedSkins = userPrefs.GetInstalledSkins();
            var successfullyInstalledSkins = new List<InstalledSkinInfo>();

            if (!installedSkins.Any())
            {
                FileLoggerService.Log("[ModToolsService] No skins to sync. Ensuring overlay is stopped.");
                return;
            }

            FileLoggerService.Log($"[ModToolsService] Starting skin synchronization for {installedSkins.Count} skins.");
            CommandOutputReceived?.Invoke("Starting skin synchronization...", false);

            foreach (var skinInfo in installedSkins)
            {
                if (cancellationToken.IsCancellationRequested) return;

                CommandOutputReceived?.Invoke($"Verifying: {skinInfo.SkinName}", false);
                bool isInstalledSuccessfully = false;
                var skinDestinationDir = Path.Combine(_installedSkinsDir, skinInfo.FolderName);

                if (Directory.Exists(skinDestinationDir))
                {
                    isInstalledSuccessfully = true;
                    FileLoggerService.Log($"[ModToolsService] Skin '{skinInfo.SkinName}' already exists locally.");
                }
                else
                {
                    FileLoggerService.Log($"[ModToolsService] Skin '{skinInfo.SkinName}' is missing locally. Attempting installation.");
                    CommandOutputReceived?.Invoke($"Downloading: {skinInfo.SkinName}...", false);

                    int maxRetries = 2;
                    for (int retry = 0; retry < maxRetries; retry++)
                    {
                        try
                        {
                            await DownloadAndInstallMissingSkinAsync(skinInfo, cancellationToken);
                            isInstalledSuccessfully = true;
                            FileLoggerService.Log($"[ModToolsService] Successfully synced skin '{skinInfo.SkinName}' on attempt {retry + 1}.");
                            CommandOutputReceived?.Invoke($"Synced: {skinInfo.SkinName}", false);
                            break;
                        }
                        catch (Exception ex)
                        {
                            FileLoggerService.Log($"[ModToolsService] Failed to sync skin '{skinInfo.SkinName}' on attempt {retry + 1}. Error: {ex.Message}");
                            CommandOutputReceived?.Invoke($"Error syncing {skinInfo.SkinName} (attempt {retry + 1})", true);

                            await TryDeleteDirectoryAsync(skinDestinationDir);
                            await TryDeleteFileAsync(Path.Combine(_installedSkinsDir, skinInfo.FileName));

                            if (retry < maxRetries - 1)
                            {
                                await Task.Delay(1000, cancellationToken);
                            }
                        }
                    }
                }

                if (isInstalledSuccessfully)
                {
                    successfullyInstalledSkins.Add(skinInfo);
                }
                else
                {
                    FileLoggerService.Log($"[ModToolsService] CRITICAL: Failed to install skin '{skinInfo.SkinName}' after all retries. It will be excluded from this build.");
                    CommandOutputReceived?.Invoke($"Failed to install {skinInfo.SkinName}. Excluding.", true);
                }
            }

            FileLoggerService.Log($"[ModToolsService] Skin synchronization finished. Successfully installed {successfullyInstalledSkins.Count}/{installedSkins.Count} skins.");

            if (successfullyInstalledSkins.Any())
            {
                await RebuildAndRunOverlayForSkinsAsync(successfullyInstalledSkins, cancellationToken);
            }
            else
            {
                FileLoggerService.Log("[ModToolsService] No skins were successfully installed. Skipping overlay build.");
            }
        }

        private async Task StopRunOverlayInternalAsync(CancellationToken cancellationToken)
        {
            Process? processToStop = null;

            await _processLock.WaitAsync(cancellationToken);
            try
            {
                if (_runOverlayProcess != null && !_runOverlayProcess.HasExited)
                {
                    processToStop = _runOverlayProcess;
                    _runOverlayProcess = null;
                }
            }
            finally
            {
                _processLock.Release();
            }

            if (processToStop != null)
            {
                try
                {
                    FileLoggerService.Log($"[ModToolsService] Stopping runoverlay process PID: {processToStop.Id}");
                    processToStop.Kill(true);
                    await processToStop.WaitForExitAsync(cancellationToken);
                    FileLoggerService.Log($"[ModToolsService] Process PID {processToStop.Id} has been stopped.");
                }
                catch (Exception ex)
                {
                    FileLoggerService.Log($"[ModToolsService] Exception while stopping process PID {processToStop.Id}: {ex.Message}");
                }
                finally
                {
                    processToStop.Dispose();
                }
            }
            else
            {
                FileLoggerService.Log("[ModToolsService] StopRunOverlayInternalAsync called but no active process was found.");
            }

            if (IsOverlayRunning)
            {
                IsOverlayRunning = false;
                OverlayStatusChanged?.Invoke(false);
            }

            await Task.Delay(250, cancellationToken);
        }

        private async Task RebuildAndRunOverlayForSkinsAsync(List<InstalledSkinInfo> skins, CancellationToken cancellationToken)
        {
            FileLoggerService.Log($"Rebuilding overlay for {skins.Count} skins.");
            await MkOverlayAsync(cancellationToken, skins);
            await RunOverlayAsync(cancellationToken);
        }

        private async Task InstallSkinInternalAsync(InstalledSkinInfo skinInfo, byte[] fantomeBytes, ISnackbarService snackbarService, CancellationToken cancellationToken)
        {
            await StopRunOverlayInternalAsync(cancellationToken);

            snackbarService.Show("Installing...", $"Installing skin '{skinInfo.SkinName}'...", ControlAppearance.Secondary, new SymbolIcon(SymbolRegular.ArrowDownload24), TimeSpan.FromSeconds(15));

            string fantomeFilePath = Path.Combine(_installedSkinsDir, skinInfo.FileName);
            string skinDestinationDir = Path.Combine(_installedSkinsDir, skinInfo.FolderName);

            await TryDeleteDirectoryAsync(skinDestinationDir);
            await TryDeleteFileAsync(fantomeFilePath);

            Directory.CreateDirectory(skinDestinationDir);
            await File.WriteAllBytesAsync(fantomeFilePath, fantomeBytes, cancellationToken);

            var (success, output) = await ImportFantomeAsync(fantomeFilePath, skinDestinationDir, cancellationToken);

            await TryDeleteFileAsync(fantomeFilePath);

            if (!success)
            {
                FileLoggerService.Log($"[ModToolsService] mod-tools import failed for {skinInfo.SkinName}. Output: {output}. Cleaning up failed installation.");
                await TryDeleteDirectoryAsync(skinDestinationDir);
                snackbarService.Show("Installation Failed", $"Could not install '{skinInfo.SkinName}'.", ControlAppearance.Danger, new SymbolIcon(SymbolRegular.ErrorCircle24), TimeSpan.FromSeconds(5));
                throw new Exception($"Failed to import skin: {skinInfo.SkinName}.");
            }

            snackbarService.Show("Success!", $"Skin '{skinInfo.SkinName}' installed.", ControlAppearance.Success, new SymbolIcon(SymbolRegular.CheckmarkCircle24), TimeSpan.FromSeconds(5));

            var userPrefs = _serviceProvider.GetRequiredService<UserPreferencesService>();
            await userPrefs.AddInstalledSkinAsync(skinInfo);

            await SynchronizeAndRebuildInternalAsync(cancellationToken);
        }

        private async Task UninstallSkinsInternalAsync(IEnumerable<InstalledSkinInfo> skinsToUninstall, ISnackbarService snackbarService, CancellationToken cancellationToken)
        {
            await StopRunOverlayInternalAsync(cancellationToken);
            snackbarService.Show("Uninstalling...", $"Removing {skinsToUninstall.Count()} skin(s).", ControlAppearance.Secondary, new SymbolIcon(SymbolRegular.Delete24), TimeSpan.FromSeconds(15));
            var userPrefs = _serviceProvider.GetRequiredService<UserPreferencesService>();
            foreach (var skin in skinsToUninstall)
            {
                var skinDir = Path.Combine(_installedSkinsDir, skin.FolderName);
                await TryDeleteDirectoryAsync(skinDir);
                await userPrefs.RemoveInstalledSkinAsync(skin);
            }
            snackbarService.Show("Success!", "Selected skins have been uninstalled.", ControlAppearance.Success, new SymbolIcon(SymbolRegular.CheckmarkCircle24), TimeSpan.FromSeconds(5));
            await SynchronizeAndRebuildInternalAsync(cancellationToken);
        }

        private async Task DownloadAndInstallMissingSkinAsync(InstalledSkinInfo skinInfo, CancellationToken cancellationToken)
        {
            string fantomeFilePath = Path.Combine(_installedSkinsDir, skinInfo.FileName);
            string skinDestinationDir = Path.Combine(_installedSkinsDir, skinInfo.FolderName);

            string supabasePath;
            if (!string.IsNullOrEmpty(skinInfo.ChromaName) && skinInfo.SkinOrChromaId > 10000)
            {
                supabasePath = $"campeones/{skinInfo.ChampionId}/{skinInfo.SkinOrChromaId}.fantome";
            }
            else
            {
                int skinNum = skinInfo.SkinOrChromaId % 1000;
                supabasePath = $"campeones/{skinInfo.ChampionId}/{skinNum}.fantome";
            }

            FileLoggerService.Log($"[ModToolsService] Downloading from Supabase path: {supabasePath}");
            cancellationToken.ThrowIfCancellationRequested();
            byte[]? fileBytes = await _supabaseClient.Storage.From("campeones").Download(supabasePath, null);

            if (fileBytes == null || fileBytes.Length == 0)
            {
                throw new Exception($"Download failed or file is empty from Supabase. Path: {supabasePath}");
            }
            FileLoggerService.Log($"[ModToolsService] Downloaded {fileBytes.Length} bytes.");

            Directory.CreateDirectory(Path.GetDirectoryName(fantomeFilePath));
            await File.WriteAllBytesAsync(fantomeFilePath, fileBytes, cancellationToken);

            var (success, output) = await ImportFantomeAsync(fantomeFilePath, skinDestinationDir, cancellationToken);

            await TryDeleteFileAsync(fantomeFilePath);

            if (!success)
            {
                FileLoggerService.Log($"[ModToolsService] mod-tools import failed for {skinInfo.SkinName}. Output: {output}. Cleaning up failed installation.");
                await TryDeleteDirectoryAsync(skinDestinationDir);
                throw new Exception($"Failed to import skin: {skinInfo.SkinName}.");
            }
        }

        private async Task RunOverlayAsync(CancellationToken cancellationToken)
        {
            await _processLock.WaitAsync(cancellationToken);
            try
            {
                if (_runOverlayProcess != null)
                {
                    FileLoggerService.Log("[ModToolsService] RunOverlayAsync called but a process already exists. Aborting start.");
                    return;
                }

                var startInfo = new ProcessStartInfo
                {
                    FileName = _modToolsExePath,
                    Arguments = $"runoverlay \"{_profilesDir}\" --game:\"{_gamePath}\" configless",
                    RedirectStandardOutput = true,
                    RedirectStandardError = true,
                    UseShellExecute = false,
                    CreateNoWindow = true,
                    WorkingDirectory = Path.GetDirectoryName(_modToolsExePath)
                };

                FileLoggerService.Log($"[ModToolsService] Starting long-lived process: \"{startInfo.FileName}\" {startInfo.Arguments}");
                _runOverlayProcess = new Process { StartInfo = startInfo, EnableRaisingEvents = true };

                _runOverlayProcess.OutputDataReceived += (s, e) => { if (e.Data != null) CommandOutputReceived?.Invoke(e.Data, false); };
                _runOverlayProcess.ErrorDataReceived += (s, e) => { if (e.Data != null) CommandOutputReceived?.Invoke("An error occurred with mod-tools.", true); };
                _runOverlayProcess.Exited += OnRunOverlayProcessExited;

                _runOverlayProcess.Start();
                _runOverlayProcess.BeginOutputReadLine();
                _runOverlayProcess.BeginErrorReadLine();

                IsOverlayRunning = true;
                OverlayStatusChanged?.Invoke(true);
            }
            catch (Exception ex)
            {
                FileLoggerService.Log($"[ModToolsService] Failed to start runoverlay process: {ex.Message}");
                _runOverlayProcess?.Dispose();
                _runOverlayProcess = null;
            }
            finally
            {
                _processLock.Release();
            }
        }

        private void OnRunOverlayProcessExited(object? sender, EventArgs e)
        {
            var exitedProcess = sender as Process;
            FileLoggerService.Log($"[ModToolsService] Process PID {exitedProcess?.Id.ToString() ?? "Unknown"} has exited.");

            if (exitedProcess != null)
            {
                exitedProcess.Exited -= OnRunOverlayProcessExited;
                exitedProcess.Dispose();
            }

            if (ReferenceEquals(_runOverlayProcess, exitedProcess))
            {
                _runOverlayProcess = null;
            }

            if (IsOverlayRunning)
            {
                IsOverlayRunning = false;
                Application.Current?.Dispatcher.Invoke(() => OverlayStatusChanged?.Invoke(false));
            }
        }

        private async Task<(bool, string)> ImportFantomeAsync(string fantomePath, string destDir, CancellationToken cancellationToken)
        {
            var args = $"import \"{fantomePath}\" \"{destDir}\"";
            return await ExecuteShortLivedCommandAsync(args, cancellationToken);
        }

        private async Task MkOverlayAsync(CancellationToken cancellationToken, List<InstalledSkinInfo> installed)
        {
            CommandOutputReceived?.Invoke("Building game files...", false);
            if (installed != null && installed.Any())
            {
                var modsArg = $"--mods:{string.Join("/", installed.Select(s => s.FolderName))}";
                var args = $"mkoverlay \"{_installedSkinsDir}\" \"{_profilesDir}\" --game:\"{_gamePath}\" {modsArg}";

                var (success, output) = await ExecuteShortLivedCommandAsync(args, cancellationToken);
                if (!success)
                {
                    FileLoggerService.Log($"[ModToolsService] CRITICAL: mkoverlay failed. Output: {output}. The overlay may not work correctly.");
                    CommandOutputReceived?.Invoke("Error: Failed to build game files.", true);
                }
            }
        }

        private static async Task TryDeleteFileAsync(string path)
        {
            if (File.Exists(path))
            {
                try { File.Delete(path); }
                catch (IOException) { await Task.Delay(200); try { File.Delete(path); } catch (Exception ex) { FileLoggerService.Log($"Failed to delete file {path}: {ex.Message}"); } }
                catch (Exception ex) { FileLoggerService.Log($"Failed to delete file {path}: {ex.Message}"); }
            }
        }

        private static async Task TryDeleteDirectoryAsync(string path)
        {
            if (Directory.Exists(path))
            {
                try { Directory.Delete(path, true); }
                catch (IOException) { await Task.Delay(200); try { Directory.Delete(path, true); } catch (Exception ex) { FileLoggerService.Log($"Failed to delete directory {path}: {ex.Message}"); } }
                catch (Exception ex) { FileLoggerService.Log($"Failed to delete directory {path}: {ex.Message}"); }
            }
        }

        public void Dispose()
        {
            _queueCts.Cancel();
            _queueCts.Dispose();
            StopRunOverlayAsync().Wait(TimeSpan.FromSeconds(5));
            _processLock.Dispose();
            GC.SuppressFinalize(this);
        }
    }
}

//-==================== END OF FILE: Services\ModToolsService.cs ====================-//

//-==================== START OF FILE: Services\PipeClientService.cs ====================-//

﻿using System.Threading.Tasks;
using System.Threading;
using System.IO;
using System.IO.Pipes;
using System.Text;

namespace skinhunter.Services
{
    public class PipeClientService
    {
        private const string RequestTokenCommand = "GET_TOKEN";
        private const string TokenPrefix = "TOKEN:";
        private const string ErrorPrefix = "ERROR:";
        private const string AckCommand = "TOKEN_RECEIVED_ACK";
        private const string EndOfMessage = "\n"; // Asegúrate que esto es lo que espera el servidor para ReadLineAsync

        public async Task<string?> RequestTokenFromServerAsync(string pipeName, CancellationToken cancellationToken)
        {
            if (string.IsNullOrEmpty(pipeName))
            {
                FileLoggerService.Log("[PipeClientService][skinhunter] Pipe name is null or empty.");
                return null;
            }

            try
            {
                FileLoggerService.Log($"[PipeClientService][skinhunter] Attempting to connect to pipe: {pipeName}");
                await using var clientStream = new NamedPipeClientStream(".", pipeName, PipeDirection.InOut, PipeOptions.Asynchronous | PipeOptions.CurrentUserOnly);

                await clientStream.ConnectAsync(10000, cancellationToken);
                if (cancellationToken.IsCancellationRequested)
                {
                    FileLoggerService.Log("[PipeClientService][skinhunter] Connection attempt cancelled during ConnectAsync.");
                    return null;
                }
                FileLoggerService.Log("[PipeClientService][skinhunter] Connected to pipe server.");

                // Usar leaveOpen: false para que los writers/readers se dispongan con el stream
                await using var writer = new StreamWriter(clientStream, Encoding.UTF8, bufferSize: 1024, leaveOpen: true) { AutoFlush = false }; // AutoFlush false, haremos flush manual
                using var reader = new StreamReader(clientStream, Encoding.UTF8, detectEncodingFromByteOrderMarks: true, bufferSize: 1024, leaveOpen: true);

                FileLoggerService.Log($"[PipeClientService][skinhunter] About to send command: {RequestTokenCommand}");
                await writer.WriteAsync($"{RequestTokenCommand}{EndOfMessage}"); // WriteAsync escribe al buffer interno
                await writer.FlushAsync(cancellationToken); // Flush explícito para enviar los datos por el pipe
                FileLoggerService.Log($"[PipeClientService][skinhunter] Sent command and flushed: {RequestTokenCommand}");

                FileLoggerService.Log($"[PipeClientService][skinhunter] Waiting for server response...");
                string? response = await reader.ReadLineAsync(cancellationToken); // ReadLineAsync espera hasta un \n o \r\n
                FileLoggerService.Log($"[PipeClientService][skinhunter] Received from server: {response}");

                if (cancellationToken.IsCancellationRequested)
                {
                    FileLoggerService.Log("[PipeClientService][skinhunter] Operation cancelled after receiving server response (or during wait).");
                    return null;
                }

                if (response != null && response.StartsWith(TokenPrefix))
                {
                    string token = response.Substring(TokenPrefix.Length); // .TrimEnd('\n') no es necesario con ReadLineAsync
                    FileLoggerService.Log($"[PipeClientService][skinhunter] Token received: {token.Substring(0, Math.Min(token.Length, 20))}... Sending ACK.");
                    await writer.WriteAsync($"{AckCommand}{EndOfMessage}");
                    await writer.FlushAsync(cancellationToken); // Flush explícito para el ACK
                    FileLoggerService.Log($"[PipeClientService][skinhunter] ACK sent and flushed.");
                    return token;
                }
                else if (response != null && response.StartsWith(ErrorPrefix))
                {
                    FileLoggerService.Log($"[PipeClientService][skinhunter] Server responded with error: {response}");
                    return null;
                }
                else
                {
                    FileLoggerService.Log($"[PipeClientService][skinhunter] Invalid response from server: {response}");
                    return null;
                }
            }
            catch (OperationCanceledException)
            {
                FileLoggerService.Log("[PipeClientService][skinhunter] Operation cancelled during pipe communication.");
                return null;
            }
            catch (TimeoutException)
            {
                FileLoggerService.Log("[PipeClientService][skinhunter] Timeout connecting to pipe server.");
                return null;
            }
            catch (IOException ex)
            {
                FileLoggerService.Log($"[PipeClientService][skinhunter] IOException: {ex.Message}. Server might have closed the pipe or pipe is broken.");
                return null;
            }
            catch (Exception ex)
            {
                FileLoggerService.Log($"[PipeClientService][skinhunter] Error requesting token: {ex.Message}");
                return null;
            }
        }
    }
}


//-==================== END OF FILE: Services\PipeClientService.cs ====================-//

//-==================== START OF FILE: Services\SupabaseService.cs ====================-//

﻿using Supabase;
using Supabase.Storage;
using Postgrest.Interfaces;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using System;

namespace skinhunter.Services
{
    public class SupabaseService
    {
        private readonly AuthTokenManager _authTokenManager;
        private readonly string _supabaseUrl = "https://odlqwkgewzxxmbsqutja.supabase.co";
        private readonly string _supabaseAnonKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9kbHF3a2dld3p4eG1ic3F1dGphIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzQyMTM2NzcsImV4cCI6MjA0OTc4OTY3N30.qka6a71bavDeUQgy_BKoVavaClRQa_gT36Au7oO9AF0";

        public SupabaseService(AuthTokenManager authTokenManager)
        {
            _authTokenManager = authTokenManager;
            FileLoggerService.Log("[SupabaseService] Initialized.");
        }

        private Dictionary<string, string> GetAuthHeaders()
        {
            var headers = new Dictionary<string, string>
            {
                { "apikey", _supabaseAnonKey }
            };
            if (_authTokenManager.IsAuthenticated && !string.IsNullOrEmpty(_authTokenManager.CurrentToken))
            {
                headers["Authorization"] = $"Bearer {_authTokenManager.CurrentToken}";
                FileLoggerService.Log("[SupabaseService] Added Authorization header.");
            }
            else
            {
                FileLoggerService.Log("[SupabaseService] Warning: Getting auth headers but user is not authenticated or token is missing.");
            }
            return headers;
        }

        public IPostgrestClient GetPostgrestClient()
        {
            FileLoggerService.Log("[SupabaseService] Creating Postgrest client.");
            var options = new Postgrest.ClientOptions
            {
                Headers = GetAuthHeaders(),
                Schema = "public"
            };
            return new Postgrest.Client($"{_supabaseUrl}/rest/v1", options);
        }

        public Supabase.Storage.Interfaces.IStorageFileApi<FileObject> GetStorageFileApi(string bucketId)
        {
            FileLoggerService.Log($"[SupabaseService] Getting StorageFileApi for bucket: {bucketId}");
            // Get the globally injected Supabase.Client
            var supabaseClientGlobal = App.Services.GetRequiredService<Supabase.Client>();
            // Ensure the global client has the latest token set if necessary.
            // The current App.xaml.cs DI setup injects the client once.
            // UserPreferencesService's HttpClient is configured per request with the latest token,
            // which is more robust for API calls.
            // For Storage downloads using the Supabase-csharp SDK's Storage client,
            // the authentication depends on how the Supabase.Client instance itself is managed
            // and if its session/token is updated.
            // SkinDetailViewModel now uses the injected Supabase.Client directly for download,
            // assuming its internal Storage client is configured correctly or relies on
            // the base client's initial configuration or later updates.
            // Let's log the current token status for the global client if possible (not easily exposed).
            // Trusting the SDK's internal handling for now.
            return supabaseClientGlobal.Storage.From(bucketId);
        }
    }
}

//-==================== END OF FILE: Services\SupabaseService.cs ====================-//

//-==================== START OF FILE: Services\UserPreferencesService.cs ====================-//

﻿// Services/UserPreferencesService.cs
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using skinhunter.Models;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Net.Http;
using System.Net.Http.Headers;
using System;
using System.Windows;

namespace skinhunter.Services
{
    public partial class UserPreferencesService : ObservableObject
    {
        private readonly AuthTokenManager _authTokenManager;
        private UserPreferences _currentPreferences = new();
        private Guid? _currentUserId = null;
        private readonly string _supabaseUrl = "https://odlqwkgewzxxmbsqutja.supabase.co";
        private readonly string _supabaseAnonKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9kbHF3a2dld3p4eG1ic3F1dGphIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzQyMTM2NzcsImV4cCI6MjA0OTc4OTY3N30.qka6a71bavDeUQgy_BKoVavaClRQa_gT36Au7oO9AF0";
        private static readonly JsonSerializerOptions _jsonOptions = new()
        {
            PropertyNameCaseInsensitive = true,
            DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull
        };

        [ObservableProperty]
        private Profile? _currentProfile;

        public UserPreferencesService(AuthTokenManager authTokenManager)
        {
            _authTokenManager = authTokenManager;
            _authTokenManager.PropertyChanged += async (s, e) => {
                if (e.PropertyName == nameof(AuthTokenManager.IsAuthenticated))
                {
                    if (_authTokenManager.IsAuthenticated)
                    {
                        await Application.Current.Dispatcher.Invoke(LoadPreferencesAsync);
                    }
                    else
                    {
                        Application.Current.Dispatcher.Invoke(UnloadPreferences);
                    }
                }
            };
        }

        private Guid? GetUserIdFromAuthManager()
        {
            var userIdClaim = _authTokenManager.GetClaim(ClaimTypes.NameIdentifier) ?? _authTokenManager.GetClaim("sub");
            if (Guid.TryParse(userIdClaim, out Guid userId))
            {
                return userId;
            }
            return null;
        }

        private HttpClient GetConfiguredHttpClient()
        {
            var client = new HttpClient();
            if (_authTokenManager.IsAuthenticated && !string.IsNullOrEmpty(_authTokenManager.CurrentToken))
            {
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _authTokenManager.CurrentToken);
            }
            client.DefaultRequestHeaders.Add("apikey", _supabaseAnonKey);
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            return client;
        }

        public async Task LoadPreferencesAsync()
        {
            Application.Current.Dispatcher.VerifyAccess();

            _currentUserId = GetUserIdFromAuthManager();
            if (_currentUserId == null || !_authTokenManager.IsAuthenticated || string.IsNullOrEmpty(_authTokenManager.CurrentToken))
            {
                UnloadPreferences();
                return;
            }

            try
            {
                using var httpClient = GetConfiguredHttpClient();
                string requestUri = $"{_supabaseUrl}/rest/v1/profiles?id=eq.{_currentUserId.Value}&select=*";
                HttpResponseMessage response = await httpClient.GetAsync(requestUri);
                string jsonResponse = await response.Content.ReadAsStringAsync();

                if (response.IsSuccessStatusCode)
                {
                    var profilesList = JsonSerializer.Deserialize<List<Profile>>(jsonResponse, _jsonOptions);
                    Profile? loadedProfile = profilesList?.FirstOrDefault();

                    if (loadedProfile != null)
                    {
                        CurrentProfile = loadedProfile;
                        if (CurrentProfile.Preferences != null)
                        {
                            var prefsJson = JsonSerializer.Serialize(CurrentProfile.Preferences);
                            _currentPreferences = JsonSerializer.Deserialize<UserPreferences>(prefsJson, _jsonOptions) ?? new();
                        }
                        else
                        {
                            _currentPreferences = new();
                        }
                        _currentPreferences.InstalledSkins ??= [];
                    }
                    else
                    {
                        UnloadPreferences();
                        await CreateAndSaveDefaultProfile();
                    }
                }
                else
                {
                    UnloadPreferences();
                }
            }
            catch (Exception ex)
            {
                FileLoggerService.Log($"[UserPrefService] Exception loading profile: {ex.Message}");
                UnloadPreferences();
            }
        }

        private async Task CreateAndSaveDefaultProfile()
        {
            var newProfile = new Profile
            {
                Id = _currentUserId!.Value,
                Login = _authTokenManager.GetClaim("email")?.Split('@')[0] ?? "new_user",
                IsBuyer = false,
                Preferences = new()
                {
                    { "theme", "dark" },
                    { "sync_on_start", true },
                    { "installed_skins_info", new List<InstalledSkinInfo>() }
                }
            };
            _currentPreferences = new UserPreferences { InstalledSkins = [], SyncOnStart = true, Theme = "dark" };
            await SaveProfileAsync(newProfile);
            Application.Current.Dispatcher.Invoke(() => { CurrentProfile = newProfile; });
        }

        public void UnloadPreferences()
        {
            Application.Current.Dispatcher.VerifyAccess();
            CurrentProfile = null;
            _currentPreferences = new UserPreferences { InstalledSkins = [] };
            _currentUserId = null;
        }

        public List<InstalledSkinInfo> GetInstalledSkins()
        {
            return _currentPreferences.InstalledSkins;
        }

        public bool GetSyncOnStart() => _currentPreferences.SyncOnStart;
        public string? GetTheme() => _currentPreferences.Theme;

        public async Task AddInstalledSkinAsync(InstalledSkinInfo skinInfo)
        {
            if (CurrentProfile == null) return;
            var prefs = _currentPreferences;
            prefs.InstalledSkins.RemoveAll(s => s.ChampionId == skinInfo.ChampionId);
            prefs.InstalledSkins.Add(skinInfo);
            await SavePreferencesAsync(prefs);
        }

        public async Task RemoveInstalledSkinAsync(InstalledSkinInfo skinToRemove)
        {
            if (CurrentProfile == null) return;
            var prefs = _currentPreferences;
            if (prefs.InstalledSkins == null) return;
            int removedCount = prefs.InstalledSkins.RemoveAll(s => s.ChampionId == skinToRemove.ChampionId && s.SkinOrChromaId == skinToRemove.SkinOrChromaId);
            if (removedCount > 0)
            {
                await SavePreferencesAsync(prefs);
            }
        }

        public async Task SavePreferencesAsync(UserPreferences? preferencesToSave = null)
        {
            var prefsToSave = preferencesToSave ?? _currentPreferences;
            if (CurrentProfile == null) return;
            CurrentProfile.Preferences = new()
            {
                { "theme", prefsToSave.Theme },
                { "sync_on_start", prefsToSave.SyncOnStart },
                { "installed_skins_info", prefsToSave.InstalledSkins ?? [] }
            };
            await SaveProfileAsync(CurrentProfile);
        }

        private async Task SaveProfileAsync(Profile profileToSave)
        {
            if (profileToSave == null || _currentUserId == null || !_authTokenManager.IsAuthenticated || string.IsNullOrEmpty(_authTokenManager.CurrentToken)) return;

            try
            {
                using var httpClient = GetConfiguredHttpClient();
                string requestUri = $"{_supabaseUrl}/rest/v1/profiles?id=eq.{_currentUserId.Value}";
                string jsonPayload = JsonSerializer.Serialize(profileToSave, _jsonOptions);
                var content = new StringContent(jsonPayload, Encoding.UTF8, "application/json");
                httpClient.DefaultRequestHeaders.Add("Prefer", "return=representation,resolution=merge-duplicates");
                HttpResponseMessage response = await httpClient.PatchAsync(requestUri, content);
                if (!response.IsSuccessStatusCode)
                {
                    string responseContent = await response.Content.ReadAsStringAsync();
                    FileLoggerService.Log($"[UserPrefService] Failed to save profile. Status: {response.StatusCode}, Content: {responseContent}");
                }
            }
            catch (Exception ex)
            {
                FileLoggerService.Log($"[UserPrefService] Error saving profile: {ex.Message} {ex.StackTrace}");
            }
        }
    }
}

//-==================== END OF FILE: Services\UserPreferencesService.cs ====================-//

//-==================== START OF FILE: skinhunter.csproj ====================-//

	<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<OutputType>WinExe</OutputType>
		<TargetFramework>net9.0-windows</TargetFramework>
		<ApplicationManifest>app.manifest</ApplicationManifest>
		<ApplicationIcon>Assets/wpfui-icon.ico</ApplicationIcon>
		<UseWPF>true</UseWPF>
		<Nullable>enable</Nullable>
		<ImplicitUsings>enable</ImplicitUsings>
		<!-- <EnableDefaultCompileItems>true</EnableDefaultCompileItems> -->
		<!-- La línea de arriba es true por defecto en proyectos SDK, no necesitas añadirla explícitamente -->
		<!-- Asegúrate de que NO esté en false si esperas inclusiones automáticas -->
	</PropertyGroup>

	<ItemGroup>
		<Content Include="Assets/wpfui-icon.ico" />
		<Content Include="Assets\icon.ico">
		  <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
		</Content>
		<Content Include="Tools\cslol-tools\cslol-dll.dll">
		  <CopyToOutputDirectory>Always</CopyToOutputDirectory>
		</Content>
		<Content Include="Tools\cslol-tools\mod-tools.exe">
		  <CopyToOutputDirectory>Always</CopyToOutputDirectory>
		</Content>
	</ItemGroup>

	<ItemGroup>
		<PackageReference Include="CommunityToolkit.Mvvm" Version="8.4.0" />
		<PackageReference Include="Microsoft.Extensions.Hosting" Version="9.0.1" />
		<PackageReference Include="Microsoft.IdentityModel.Tokens" Version="8.12.0" />
		<PackageReference Include="supabase-csharp" Version="0.16.2" />
		<PackageReference Include="System.IdentityModel.Tokens.Jwt" Version="8.12.0" />
		<!-- O la versión que tenías -->
		<PackageReference Include="WPF-UI" Version="4.0.2" />
		<PackageReference Include="WPF-UI.DependencyInjection" Version="4.0.2" />
	</ItemGroup>

	<ItemGroup>
		<!-- Imágenes -->
		<None Remove="Assets\icon.ico" />
		<None Remove="Assets\wpfui-icon-256.png" />
		<None Remove="Assets\wpfui-icon-1024.png" />
		<None Remove="Assets\logo.png" />
		<None Remove="Assets\chroma-icon.png" />
		<None Remove="Assets\legacy-icon.png" />
		<None Remove="Assets\placeholder.png" />
		<None Remove="Tools\cslol-tools\cslol-dll.dll" />
		<None Remove="Tools\cslol-tools\mod-tools.exe" />

		<Resource Include="Assets\wpfui-icon-256.png" />
		<Resource Include="Assets\wpfui-icon-1024.png" />
		<Resource Include="Assets\logo.png" />
		<Resource Include="Assets\chroma-icon.png" />
		<Resource Include="Assets\legacy-icon.png" />
		<Resource Include="Assets\placeholder.png" />
	</ItemGroup>

	<!--
  IMPORTANTE: NO DEBERÍA HABER LÍNEAS <Compile Include="..."/> AQUÍ
  para los archivos .cs que están dentro de tu estructura de proyecto
  (como ViewModels\Pages\DashboardPageViewModel.cs)
  A MENOS que hayas puesto <EnableDefaultCompileItems>false</EnableDefaultCompileItems> explícitamente.
  Si tienes <EnableDefaultCompileItems>true</EnableDefaultCompileItems> (o está omitido, lo que implica true),
  y también tienes <Compile Include="..."> explícitas, eso causa la compilación duplicada.
  -->

</Project>

//-==================== END OF FILE: skinhunter.csproj ====================-//

//-==================== START OF FILE: skinhunter.sln ====================-//

﻿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.13.35931.197
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "skinhunter", "skinhunter.csproj", "{52A3C67A-F474-4999-A569-9D6BE06F136D}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "shlauncher", "..\shlauncher\shlauncher.csproj", "{776DC3F9-04D9-69AD-C39E-6269A1D5AF31}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{52A3C67A-F474-4999-A569-9D6BE06F136D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{52A3C67A-F474-4999-A569-9D6BE06F136D}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{52A3C67A-F474-4999-A569-9D6BE06F136D}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{52A3C67A-F474-4999-A569-9D6BE06F136D}.Release|Any CPU.Build.0 = Release|Any CPU
		{776DC3F9-04D9-69AD-C39E-6269A1D5AF31}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{776DC3F9-04D9-69AD-C39E-6269A1D5AF31}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{776DC3F9-04D9-69AD-C39E-6269A1D5AF31}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{776DC3F9-04D9-69AD-C39E-6269A1D5AF31}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {08173B31-59AF-4D44-AFF8-CD187C0CF285}
	EndGlobalSection
EndGlobal


//-==================== END OF FILE: skinhunter.sln ====================-//

//-==================== START OF FILE: Usings.cs ====================-//

﻿global using System;
global using System.Windows;
global using CommunityToolkit.Mvvm.ComponentModel;
global using CommunityToolkit.Mvvm.Input;
global using System.IO.Pipes;
global using System.Text;
global using System.IdentityModel.Tokens.Jwt;
global using Microsoft.IdentityModel.Tokens;
global using System.Security.Claims;
global using System.Diagnostics;
global using skinhunter.Services;
global using skinhunter.Models;
global using skinhunter.ViewModels;
global using skinhunter.ViewModels.Dialogs;
global using skinhunter.ViewModels.Pages;
global using skinhunter.ViewModels.Windows;
global using skinhunter.Views.Dialogs;
global using skinhunter.Views.Pages;
global using skinhunter.Views.Windows;
global using Wpf.Ui;
global using Wpf.Ui.Abstractions;
global using Wpf.Ui.Abstractions.Controls;
global using Wpf.Ui.Appearance;
global using Wpf.Ui.Controls;
global using Wpf.Ui.DependencyInjection;

//-==================== END OF FILE: Usings.cs ====================-//

//-==================== START OF FILE: ViewModels\Dialogs\OmnisearchViewModel.cs ====================-//

﻿using skinhunter.Models;
using skinhunter.Services;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Data;
using System.ComponentModel;
using System.Diagnostics;
using System.Threading;
using Microsoft.Extensions.DependencyInjection;
using System.Collections;


namespace skinhunter.ViewModels.Dialogs
{
    public partial class OmnisearchViewModel : ViewModelBase
    {
        private readonly ICustomNavigationService? _customNavigationService;
        private readonly IServiceProvider? _serviceProvider;
        private List<ChampionSummary> _allChampionsMasterList = [];
        private List<Skin> _allSkinsMasterList = [];
        private Dictionary<int, ChampionSummary> _championMap = [];

        [ObservableProperty]
        private string? _query;

        [ObservableProperty]
        private bool _showChampionsFilter = true;

        [ObservableProperty]
        private bool _showSkinsFilter = true;

        [ObservableProperty]
        private bool _isFilterPopupOpen;

        [ObservableProperty]
        private bool _isLoadingSearchResults;


        public ObservableCollection<SearchResultItem> SearchResults { get; } = [];
        public ICollectionView SearchResultsView { get; }

        public OmnisearchViewModel()
        {
            if (DesignerProperties.GetIsInDesignMode(new DependencyObject()))
            {
                Query = "Search...";
            }
            _customNavigationService = null;
            _serviceProvider = null;
            SearchResultsView = CollectionViewSource.GetDefaultView(SearchResults);
            if (SearchResultsView.GroupDescriptions is not null)
            {
                SearchResultsView.GroupDescriptions.Add(new PropertyGroupDescription("DisplayType"));
            }
        }

        public OmnisearchViewModel(ICustomNavigationService customNavigationService, IServiceProvider serviceProvider)
        {
            _customNavigationService = customNavigationService ?? throw new ArgumentNullException(nameof(customNavigationService));
            _serviceProvider = serviceProvider ?? throw new ArgumentNullException(nameof(serviceProvider));
            SearchResultsView = CollectionViewSource.GetDefaultView(SearchResults);
            if (SearchResultsView.GroupDescriptions is not null)
            {
                SearchResultsView.GroupDescriptions.Add(new PropertyGroupDescription("DisplayType"));
            }
        }

        private bool _isDataLoaded = false;

        public async Task EnsureDataLoadedAsync()
        {
            if (_isDataLoaded) return;
            if (_serviceProvider is null) return;

            IsLoading = true;
            try
            {
                var champsTask = CdragonDataService.GetChampionSummariesAsync();
                var skinsTask = CdragonDataService.GetAllSkinsAsync();
                await Task.WhenAll(champsTask, skinsTask);

                var champs = await champsTask;
                if (champs is not null)
                {
                    _allChampionsMasterList = champs;
                    _championMap = champs.ToDictionary(c => c.Id);
                }

                var skinsDict = await skinsTask;
                if (skinsDict is not null)
                {
                    _allSkinsMasterList = skinsDict.Values
                        .Where(s => {
                            bool isBaseSkinName = false;
                            if (_championMap.TryGetValue(s.ChampionId, out var parentChamp))
                            {
                                isBaseSkinName = s.Name.Equals(parentChamp.Name, StringComparison.OrdinalIgnoreCase) ||
                                                 s.Name.Equals($"Base {parentChamp.Name}", StringComparison.OrdinalIgnoreCase);
                            }
                            return !isBaseSkinName && !s.Name.Contains("Original", StringComparison.OrdinalIgnoreCase);
                        })
                        .OrderBy(s => s.Name)
                        .ToList();
                }
                _isDataLoaded = true;
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[OmnisearchViewModel] Error cargando datos maestros: {ex.Message}");
            }
            finally
            {
                IsLoading = false;
            }
        }

        partial void OnQueryChanged(string? value)
        {
            PerformSearch();
        }

        partial void OnShowChampionsFilterChanged(bool value)
        {
            PerformSearch();
        }

        partial void OnShowSkinsFilterChanged(bool value)
        {
            PerformSearch();
        }

        private CancellationTokenSource _searchCts = new();

        private async void PerformSearch()
        {
            _searchCts.Cancel();
            _searchCts = new();
            var token = _searchCts.Token;
            var currentQuery = Query;

            if (string.IsNullOrWhiteSpace(currentQuery) || currentQuery.Length < 1)
            {
                SearchResults.Clear();
                IsLoadingSearchResults = false;
                return;
            }

            if (!_isDataLoaded && _serviceProvider is not null)
            {
                IsLoadingSearchResults = true;
                await EnsureDataLoadedAsync();
                if (token.IsCancellationRequested || !_isDataLoaded)
                {
                    IsLoadingSearchResults = false;
                    SearchResults.Clear();
                    return;
                }
            }
            else if (!_isDataLoaded && _serviceProvider is null)
            {
                return;
            }

            SearchResults.Clear();
            IsLoadingSearchResults = true;

            try
            {
                List<SearchResultItem> newRawResults = await Task.Run(() => {
                    if (token.IsCancellationRequested) return [];

                    List<SearchResultItem> filteredResults = [];
                    if (ShowChampionsFilter)
                    {
                        filteredResults.AddRange(_allChampionsMasterList
                            .Where(c => c.Name.Contains(currentQuery, StringComparison.OrdinalIgnoreCase))
                            .Select(c => new SearchResultItem(c)));
                    }
                    if (ShowSkinsFilter)
                    {
                        filteredResults.AddRange(_allSkinsMasterList
                            .Where(s => s.Name.Contains(currentQuery, StringComparison.OrdinalIgnoreCase))
                            .Select(s => new SearchResultItem(s, _championMap.TryGetValue(s.ChampionId, out var champ) ? champ : null)));
                    }
                    return filteredResults.OrderBy(r => r.Type).ThenBy(r => r.Name).Take(25).ToList();
                }, token);

                if (token.IsCancellationRequested)
                {
                    IsLoadingSearchResults = false;
                    return;
                }

                foreach (var item in newRawResults)
                {
                    SearchResults.Add(item);
                }
                if (SearchResults.Any())
                {
                    _ = Task.Run(async () =>
                    {
                        var imageLoadTasks = SearchResults.Select(item => item.LoadImageAsync()).ToList();
                        try
                        {
                            await Task.WhenAll(imageLoadTasks);
                        }
                        catch (Exception imgEx)
                        {
                            Debug.WriteLine($"[OmnisearchViewModel] Error durante carga de imágenes en lote: {imgEx.Message}");
                        }
                    }, token);
                }
            }
            catch (TaskCanceledException) { }
            catch (Exception ex) { Debug.WriteLine($"[OmnisearchViewModel] Error durante la búsqueda: {ex.Message}"); }
            finally
            {
                IsLoadingSearchResults = false;
            }
        }

        [RelayCommand]
        private void SelectResult(SearchResultItem? selectedItem)
        {
            if (selectedItem is null || _customNavigationService is null) return;
            CloseOmnisearchDialog();
            if (selectedItem.Type == SearchResultType.Champion)
            {
                _customNavigationService.NavigateToChampionDetail(selectedItem.ChampionId);
            }
            else if (selectedItem.Type == SearchResultType.Skin && selectedItem.OriginalSkinObject is not null)
            {
                _customNavigationService.ShowSkinDetailDialog(selectedItem.OriginalSkinObject);
            }
        }

        [RelayCommand]
        private void CloseOmnisearchDialog()
        {
            IsFilterPopupOpen = false;
            _customNavigationService?.CloseOmnisearchDialog();
        }

        [RelayCommand]
        private void ToggleFilterPopup()
        {
            IsFilterPopupOpen = !IsFilterPopupOpen;
        }
    }
}

//-==================== END OF FILE: ViewModels\Dialogs\OmnisearchViewModel.cs ====================-//

//-==================== START OF FILE: ViewModels\Dialogs\SkinDetailViewModel.cs ====================-//

﻿using skinhunter.Models;
using skinhunter.Services;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using System.Text.RegularExpressions;
using System.Collections.Generic;
using Supabase;
using System;
using System.Windows;
using Wpf.Ui.Controls;

namespace skinhunter.ViewModels.Dialogs
{
    public partial class SkinDetailViewModel : ViewModelBase
    {
        private readonly ICustomNavigationService _customNavigationService;
        private readonly UserPreferencesService _userPreferencesService;
        private readonly Client _supabaseClient;
        private readonly ModToolsService _modToolsService;
        private readonly ISnackbarService _snackbarService;

        [ObservableProperty]
        private Skin? _selectedSkin;

        public ObservableCollection<Chroma> AvailableChromas { get; } = [];

        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(IsDefaultSelected))]
        [NotifyPropertyChangedFor(nameof(KhadaViewerUrl))]
        private Chroma? _selectedChroma;

        [ObservableProperty]
        private bool _canUserDownload;

        public bool IsDefaultSelected => SelectedChroma == null;

        public string? KhadaViewerUrl
        {
            get
            {
                if (SelectedSkin == null) return null;
                int skinId = SelectedSkin.Id;
                int? chromaId = SelectedChroma?.Id;
                string url = $"https://modelviewer.lol/model-viewer?id={skinId}";
                if (chromaId.HasValue && chromaId.Value != 0 && chromaId.Value / 1000 == skinId)
                {
                    url += $"&chroma={chromaId.Value}";
                }
                return url;
            }
        }

        public SkinDetailViewModel(
            ICustomNavigationService customNavigationService,
            UserPreferencesService userPreferencesService,
            Client supabaseClient,
            ModToolsService modToolsService,
            ISnackbarService snackbarService)
        {
            _customNavigationService = customNavigationService;
            _userPreferencesService = userPreferencesService;
            _supabaseClient = supabaseClient;
            _modToolsService = modToolsService;
            _snackbarService = snackbarService;

            _userPreferencesService.PropertyChanged += (_, e) => {
                if (e.PropertyName == nameof(UserPreferencesService.CurrentProfile))
                {
                    UpdateCanUserDownload();
                }
            };
            UpdateCanUserDownload();
        }

        private void UpdateCanUserDownload()
        {
            CanUserDownload = _userPreferencesService.CurrentProfile?.IsBuyer ?? false;
            DownloadSkinCommand.NotifyCanExecuteChanged();
        }

        public async Task LoadSkinAsync(Skin skin)
        {
            IsLoading = true;
            SelectedSkin = null;
            DownloadSkinCommand.NotifyCanExecuteChanged();

            UpdateCanUserDownload();
            await CdragonDataService.EnrichSkinWithSupabaseChromaDataAsync(skin);

            AvailableChromas.Clear();
            if (skin.Chromas != null && skin.Chromas.Any())
            {
                foreach (var chroma in skin.Chromas)
                {
                    if (chroma != null)
                    {
                        AvailableChromas.Add(chroma);
                    }
                }
            }

            SelectedChroma = null;
            IsLoading = false;
            SelectedSkin = skin;
            DownloadSkinCommand.NotifyCanExecuteChanged();
        }

        public bool CanDownloadExecute()
        {
            return CanUserDownload && SelectedSkin != null && !IsLoading;
        }

        [RelayCommand(CanExecute = nameof(CanDownloadExecute))]
        private async Task DownloadSkin()
        {
            if (SelectedSkin == null) return;

            var installedSkins = _userPreferencesService.GetInstalledSkins();
            var existingSkinForChampion = installedSkins.FirstOrDefault(s => s.ChampionId == SelectedSkin.ChampionId);
            bool proceed = true;

            if (existingSkinForChampion != null)
            {
                proceed = false;
                string existingSkinDisplayName = string.IsNullOrEmpty(existingSkinForChampion.ChromaName) ? existingSkinForChampion.SkinName : $"{existingSkinForChampion.SkinName} ({existingSkinForChampion.ChromaName})";
                var confirmResult = await Application.Current.Dispatcher.Invoke(async () =>
                    await new Wpf.Ui.Controls.MessageBox
                    {
                        Title = "Warning",
                        Content = $"You already have '{existingSkinDisplayName}' installed for this champion.\nInstalling a new skin will replace it. Do you want to continue?",
                        PrimaryButtonText = "Continue",
                        CloseButtonText = "Cancel"
                    }.ShowDialogAsync());
                if (confirmResult == Wpf.Ui.Controls.MessageBoxResult.Primary)
                {
                    proceed = true;
                }
            }

            if (proceed)
            {
                Application.Current.Dispatcher.Invoke(CloseDialog);

                try
                {
                    await DownloadAndQueueInstall();
                }
                catch (Exception ex)
                {
                    FileLoggerService.Log($"[SkinDetailVM] Download failed: {ex.Message}\n{ex.StackTrace}");
                    _snackbarService.Show("Download Failed", $"Failed to download skin: {ex.Message}", ControlAppearance.Danger, new SymbolIcon(SymbolRegular.ErrorCircle24), TimeSpan.FromSeconds(7));
                }
            }
        }

        private async Task DownloadAndQueueInstall()
        {
            if (SelectedSkin == null) return;

            var skinToInstall = SelectedSkin;
            var chromaToInstall = SelectedChroma;

            string skinFolderName = SanitizeFileName(skinToInstall.Name);
            string fantomeFileName = $"{skinFolderName}.fantome";

            string supabasePath;
            if (chromaToInstall != null)
            {
                supabasePath = $"campeones/{skinToInstall.ChampionId}/{chromaToInstall.Id}.fantome";
            }
            else
            {
                int skinNum = skinToInstall.Id % 1000;
                supabasePath = $"campeones/{skinToInstall.ChampionId}/{skinNum}.fantome";
            }

            _snackbarService.Show("Downloading...", $"Downloading '{skinToInstall.Name}'...", ControlAppearance.Secondary, new SymbolIcon(SymbolRegular.ArrowDownload24), TimeSpan.FromSeconds(15));

            byte[]? fantomeBytes = await _supabaseClient.Storage.From("campeones").Download(supabasePath, null);

            if (fantomeBytes == null || fantomeBytes.Length == 0)
            {
                throw new Exception($"Failed to download from Supabase Storage or file is empty. Path: {supabasePath}");
            }

            var installedInfo = new InstalledSkinInfo
            {
                ChampionId = skinToInstall.ChampionId,
                SkinOrChromaId = chromaToInstall?.Id ?? skinToInstall.Id,
                FileName = fantomeFileName,
                FolderName = skinFolderName,
                SkinName = skinToInstall.Name,
                ChromaName = chromaToInstall?.Name,
                ImageUrl = chromaToInstall?.ImageUrl ?? skinToInstall.TileImageUrl,
                InstalledAt = DateTime.UtcNow
            };

            await _modToolsService.QueueInstallAndRebuild(installedInfo, fantomeBytes, _snackbarService);
        }

        private static string SanitizeFileName(string name)
        {
            if (string.IsNullOrEmpty(name)) return "unknown-skin";
            string sanitized = name.ToLowerInvariant();
            sanitized = Regex.Replace(sanitized, @"[^a-z0-9\s-]", "");
            sanitized = Regex.Replace(sanitized, @"\s+", "-").Trim('-');
            if (sanitized.Length > 80)
            {
                sanitized = sanitized[..80];
            }
            return string.IsNullOrEmpty(sanitized) ? "unknown-skin" : sanitized;
        }

        [RelayCommand]
        private void CloseDialog()
        {
            _customNavigationService.CloseDialog();
        }

        private void SetDefaultSelection()
        {
            SelectedChroma = null;
            RefreshChromaSelections(AvailableChromas, null);
        }

        [RelayCommand]
        private void ToggleChromaSelection(Chroma? clickedChroma)
        {
            if (clickedChroma == null) return;
            if (SelectedChroma == clickedChroma)
            {
                SetDefaultSelection();
            }
            else
            {
                SelectedChroma = clickedChroma;
                RefreshChromaSelections(AvailableChromas, SelectedChroma);
            }
            DownloadSkinCommand.NotifyCanExecuteChanged();
        }

        private static void RefreshChromaSelections(IEnumerable<Chroma> chromas, Chroma? selected)
        {
            foreach (var ch in chromas)
            {
                ch.IsSelected = ch == selected;
            }
        }
    }
}

//-==================== END OF FILE: ViewModels\Dialogs\SkinDetailViewModel.cs ====================-//

//-==================== START OF FILE: ViewModels\OverlayToggleButtonViewModel.cs ====================-//

﻿// ViewModels/OverlayToggleButtonViewModel.cs
using skinhunter.Services;
using Wpf.Ui.Controls;
using System;
using System.Threading.Tasks;
using System.Windows;
using System.ComponentModel;
using System.Windows.Media.Animation;

namespace skinhunter.ViewModels
{
    public partial class OverlayToggleButtonViewModel : ViewModelBase, IDisposable
    {
        private readonly ModToolsService? _modToolsService;
        private readonly UserPreferencesService? _userPreferencesService;

        public event Action<string>? OperationStarted;
        public event Action? OperationCompleted;

        [ObservableProperty]
        private string _content = "Start Overlay";

        [ObservableProperty]
        private SymbolRegular _icon = SymbolRegular.Play24;

        [ObservableProperty]
        private bool _isOverlayBusy = false;

        [ObservableProperty]
        private bool _isUserBuyer;

        [ObservableProperty]
        private string? _statusText;

        [ObservableProperty]
        private bool _isStatusError;

        [ObservableProperty]
        private double _statusTextOpacity = 0;

        public IAsyncRelayCommand ToggleOverlayCommand { get; }

        private OverlayToggleButtonViewModel()
        {
            ToggleOverlayCommand = new AsyncRelayCommand(async () => await Task.CompletedTask, () => false);
        }

        public OverlayToggleButtonViewModel(ModToolsService modToolsService, UserPreferencesService userPreferencesService) : this()
        {
            if (!DesignerProperties.GetIsInDesignMode(new DependencyObject()))
            {
                _modToolsService = modToolsService;
                _userPreferencesService = userPreferencesService;
                ToggleOverlayCommand = new AsyncRelayCommand(ExecuteToggleOverlay, CanExecuteToggleOverlay);
                _modToolsService.OverlayStatusChanged += OnOverlayStatusChanged;
                _modToolsService.CommandOutputReceived += OnCommandOutputReceived;
                _userPreferencesService.PropertyChanged += UserPreferencesService_PropertyChanged;
                UpdateState();
                UpdateUserState();
            }
        }

        private void OnCommandOutputReceived(string output, bool isError)
        {
            Application.Current.Dispatcher.Invoke(() =>
            {
                AnimateStatusText(output, isError);
            });
        }

        private void AnimateStatusText(string newText, bool isError)
        {
            Task.Run(async () =>
            {
                await Application.Current.Dispatcher.InvokeAsync(() => { StatusTextOpacity = 0; });
                await Task.Delay(210);
                await Application.Current.Dispatcher.InvokeAsync(() =>
                {
                    StatusText = newText;
                    IsStatusError = isError;
                    StatusTextOpacity = 1;
                });
            });
        }


        private void UserPreferencesService_PropertyChanged(object? sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(UserPreferencesService.CurrentProfile))
            {
                Application.Current.Dispatcher.Invoke(UpdateUserState);
            }
        }

        private void UpdateUserState()
        {
            IsUserBuyer = _userPreferencesService?.CurrentProfile?.IsBuyer ?? false;
            ToggleOverlayCommand?.NotifyCanExecuteChanged();
        }

        public bool CanExecuteToggleOverlay()
        {
            if (DesignerProperties.GetIsInDesignMode(new DependencyObject())) return !IsOverlayBusy;
            return IsUserBuyer && !IsOverlayBusy;
        }

        private async Task ExecuteToggleOverlay()
        {
            if (!CanExecuteToggleOverlay() || _modToolsService is null) return;

            IsOverlayBusy = true;
            ToggleOverlayCommand.NotifyCanExecuteChanged();
            var operationMessage = _modToolsService.IsOverlayRunning ? "Stopping Overlay..." : "Starting Overlay...";
            OperationStarted?.Invoke(operationMessage);
            AnimateStatusText(operationMessage, false);

            try
            {
                if (_modToolsService.IsOverlayRunning)
                {
                    await _modToolsService.StopRunOverlayAsync();
                }
                else
                {
                    // CORRECCIÓN: Usar el nombre de método correcto.
                    await _modToolsService.QueueSyncAndRebuild();
                }
            }
            catch (Exception ex)
            {
                FileLoggerService.Log($"[OverlayToggleVM] Error executing toggle overlay: {ex.Message}");
                AnimateStatusText("Operation failed.", true);
            }
            finally
            {
                IsOverlayBusy = false;
                ToggleOverlayCommand.NotifyCanExecuteChanged();
            }
        }

        private void OnOverlayStatusChanged(bool isRunning)
        {
            Application.Current.Dispatcher.Invoke(() =>
            {
                UpdateState();
                AnimateStatusText(isRunning ? "Overlay is running" : "Overlay is stopped", false);
                OperationCompleted?.Invoke();

                _ = Task.Delay(4000).ContinueWith(_ =>
                {
                    Application.Current.Dispatcher.Invoke(() =>
                    {
                        if (StatusText == "Overlay is running" || StatusText == "Overlay is stopped")
                        {
                            AnimateStatusText(string.Empty, false);
                        }
                    });
                });
            });
        }

        private void UpdateState()
        {
            if (_modToolsService?.IsOverlayRunning ?? false)
            {
                Content = "Stop Overlay";
                Icon = SymbolRegular.Stop24;
            }
            else
            {
                Content = "Start Overlay";
                Icon = SymbolRegular.Play24;
            }
        }

        public void Dispose()
        {
            if (_modToolsService != null)
            {
                _modToolsService.OverlayStatusChanged -= OnOverlayStatusChanged;
                _modToolsService.CommandOutputReceived -= OnCommandOutputReceived;
            }
            if (_userPreferencesService != null)
            {
                _userPreferencesService.PropertyChanged -= UserPreferencesService_PropertyChanged;
            }
            GC.SuppressFinalize(this);
        }
    }
}

//-==================== END OF FILE: ViewModels\OverlayToggleButtonViewModel.cs ====================-//

//-==================== START OF FILE: ViewModels\Pages\AuthenticationRequiredPageViewModel.cs ====================-//

﻿namespace skinhunter.ViewModels.Pages
{
    public partial class AuthenticationRequiredPageViewModel : ViewModelBase, INavigationAware
    {
        [ObservableProperty]
        private string _message = "Authentication is required to use Skin Hunter.";

        [ObservableProperty]
        private string _instruction = "Please launch Skin Hunter through the SHLauncher application after logging in.";

        public AuthenticationRequiredPageViewModel()
        {
        }

        public Task OnNavigatedToAsync()
        {
            IsLoading = false;
            return Task.CompletedTask;
        }

        public Task OnNavigatedFromAsync()
        {
            return Task.CompletedTask;
        }

        public void OnNavigatedTo(object? parameter)
        {
        }

        [RelayCommand]
        private void ExitApplication()
        {
            Application.Current.Shutdown();
        }
    }
}

//-==================== END OF FILE: ViewModels\Pages\AuthenticationRequiredPageViewModel.cs ====================-//

//-==================== START OF FILE: ViewModels\Pages\ChampionDetailPageViewModel.cs ====================-//

﻿using skinhunter.Models;
using skinhunter.Services;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using System.Linq;
using System.Diagnostics;
using Wpf.Ui.Abstractions.Controls;
using Microsoft.Extensions.DependencyInjection;

namespace skinhunter.ViewModels.Pages
{
    public partial class ChampionDetailPageViewModel : ViewModelBase, INavigationAware
    {
        private readonly ICustomNavigationService _customNavigationService;
        private readonly MainWindowViewModel _mainWindowViewModel;

        [ObservableProperty]
        private ChampionDetail? _champion;

        [ObservableProperty]
        private ObservableCollection<Skin> _skins = [];

        public ChampionDetailPageViewModel(ICustomNavigationService customNavigationService, IServiceProvider serviceProvider)
        {
            _customNavigationService = customNavigationService;
            _mainWindowViewModel = serviceProvider.GetRequiredService<MainWindowViewModel>();
        }

        public void OnNavigatedTo(object? parameter)
        {
        }

        public async Task OnNavigatedToAsync()
        {
            object? consumedParameter = _customNavigationService.ConsumeNavigationParameter();

            Skins.Clear();
            Champion = null;
            IsLoading = true;

            if (consumedParameter is int champId && champId != -1)
            {
                await LoadChampionAsync(champId);
                if (Champion != null)
                {
                    _mainWindowViewModel.CurrentPageTitle = Champion.Name;
                }
            }
            else
            {
                IsLoading = false;
            }
        }

        public Task OnNavigatedFromAsync()
        {
            Champion = null;
            Skins.Clear();
            IsLoading = false;
            return Task.CompletedTask;
        }

        private async Task LoadChampionAsync(int championId)
        {
            var details = await CdragonDataService.GetChampionDetailsAsync(championId);

            if (details != null)
            {
                Champion = details;
                if (details.Skins != null)
                {
                    Skins.Clear();
                    foreach (var skin in details.Skins.Where(s =>
                                !s.Name.Equals(details.Name, StringComparison.OrdinalIgnoreCase) &&
                                !s.Name.Equals($"Base {details.Name}", StringComparison.OrdinalIgnoreCase) &&
                                !s.Name.Contains("Original", StringComparison.OrdinalIgnoreCase)))
                    {
                        Skins.Add(skin);
                    }
                }
            }
            else
            {
                System.Windows.MessageBox.Show($"Failed to load details for Champion ID: {championId}", "Error", System.Windows.MessageBoxButton.OK, System.Windows.MessageBoxImage.Error);
            }
            IsLoading = false;
        }

        [RelayCommand]
        private void SelectSkin(Skin? skin)
        {
            if (skin != null)
            {
                _customNavigationService.ShowSkinDetailDialog(skin);
            }
        }

        [RelayCommand]
        private void GoBack()
        {
            _customNavigationService.GoBack();
        }
    }
}

//-==================== END OF FILE: ViewModels\Pages\ChampionDetailPageViewModel.cs ====================-//

//-==================== START OF FILE: ViewModels\Pages\ChampionGridPageViewModel.cs ====================-//

﻿using skinhunter.Models;
using skinhunter.Services;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Diagnostics;
using System.Windows.Threading;
using Wpf.Ui.Abstractions.Controls;

namespace skinhunter.ViewModels.Pages
{
    public partial class ChampionGridPageViewModel : ViewModelBase, INavigationAware
    {
        private readonly ICustomNavigationService _customNavigationService;
        private readonly ObservableCollection<ChampionSummary> _allChampions = new();
        private bool _dataLoadedAtLeastOnce = false;

        [ObservableProperty]
        private string? _searchText;

        [ObservableProperty]
        private ObservableCollection<string> _allRoles = new();

        [ObservableProperty]
        private string? _selectedRole = "All";

        public ICollectionView ChampionsView { get; }

        public ChampionGridPageViewModel(ICustomNavigationService customNavigationService)
        {
            _customNavigationService = customNavigationService;
            ChampionsView = CollectionViewSource.GetDefaultView(_allChampions);
            ChampionsView.Filter = FilterChampions;
            AllRoles.Add("All");
        }

        public async Task OnNavigatedToAsync()
        {
            IsLoading = true;
            await Task.Delay(200);

            if (!_dataLoadedAtLeastOnce)
            {
                await LoadChampionsAsync();
                _dataLoadedAtLeastOnce = true;
            }

            IsLoading = false;
        }

        public Task OnNavigatedFromAsync()
        {
            return Task.CompletedTask;
        }

        public void OnNavigatedTo(object? parameter)
        {
        }

        partial void OnSearchTextChanged(string? value)
        {
            System.Windows.Application.Current?.Dispatcher.InvokeAsync(() => ChampionsView.Refresh(), DispatcherPriority.Background);
        }

        partial void OnSelectedRoleChanged(string? value)
        {
            System.Windows.Application.Current?.Dispatcher.InvokeAsync(() => ChampionsView.Refresh(), DispatcherPriority.Background);
        }

        private bool FilterChampions(object item)
        {
            if (!(item is ChampionSummary champ)) return false;

            bool textMatch = string.IsNullOrWhiteSpace(SearchText) ||
                             champ.Name.Contains(SearchText, StringComparison.OrdinalIgnoreCase);

            bool roleMatch = string.IsNullOrEmpty(SelectedRole) ||
                             SelectedRole.Equals("All", StringComparison.OrdinalIgnoreCase) ||
                             (champ.Roles != null && champ.Roles.Any(r => r.Equals(SelectedRole, StringComparison.OrdinalIgnoreCase)));

            return textMatch && roleMatch;
        }

        private void PopulateRoles()
        {
            var uniqueRoles = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
            if (_allChampions.Any())
            {
                foreach (var champ in _allChampions)
                {
                    if (champ.Roles != null)
                    {
                        foreach (var role in champ.Roles)
                        {
                            if (!string.IsNullOrWhiteSpace(role))
                            {
                                uniqueRoles.Add(role);
                            }
                        }
                    }
                }
            }

            var sortedRoles = uniqueRoles.OrderBy(r => r).ToList();

            System.Windows.Application.Current?.Dispatcher.Invoke(() => {
                string? actualCurrentSelection = SelectedRole;
                AllRoles.Clear();
                AllRoles.Add("All");
                foreach (var role in sortedRoles)
                {
                    string displayRole = role.Length > 0 ? char.ToUpper(role[0]) + role.Substring(1) : role;
                    AllRoles.Add(displayRole);
                }

                if (!string.IsNullOrEmpty(actualCurrentSelection) && AllRoles.Contains(actualCurrentSelection))
                {
                    SelectedRole = actualCurrentSelection;
                }
                else
                {
                    SelectedRole = "All";
                }
            });
        }

        [RelayCommand]
        public async Task LoadChampionsAsync()
        {
            var champs = await CdragonDataService.GetChampionSummariesAsync();
            if (champs != null)
            {
                var tempChamps = champs.OrderBy(c => c.Name).ToList();
                System.Windows.Application.Current?.Dispatcher.Invoke(() =>
                {
                    _allChampions.Clear();
                    foreach (var champ in tempChamps)
                    {
                        if (champ.Roles == null) champ.Roles = new List<string>();
                        _allChampions.Add(champ);
                    }
                });
                PopulateRoles();
                System.Windows.Application.Current?.Dispatcher.Invoke(() => ChampionsView.Refresh());
            }
            else
            {
                System.Windows.Application.Current?.Dispatcher.Invoke(async () => {
                    var messageBox = new Wpf.Ui.Controls.MessageBox
                    {
                        Title = "Error",
                        Content = "Failed to load champions.",
                        CloseButtonText = "OK"
                    };
                    await messageBox.ShowDialogAsync();
                });
            }
        }

        [RelayCommand]
        private void SelectChampion(ChampionSummary? champion)
        {
            if (champion != null)
            {
                _customNavigationService.NavigateToChampionDetail(champion.Id);
            }
        }
    }
}

//-==================== END OF FILE: ViewModels\Pages\ChampionGridPageViewModel.cs ====================-//

//-==================== START OF FILE: ViewModels\Pages\DashboardViewModel.cs ====================-//

﻿namespace skinhunter.ViewModels.Pages // Este debe coincidir con el using en App.xaml.cs
{
    public partial class DashboardViewModel : ObservableObject
    {
        [ObservableProperty]
        private int _counter;

        [RelayCommand]
        private void CounterIncrement()
        {
            Counter++;
        }
    }
}

//-==================== END OF FILE: ViewModels\Pages\DashboardViewModel.cs ====================-//

//-==================== START OF FILE: ViewModels\Pages\DataViewModel.cs ====================-//

﻿using System.Windows.Media;
using skinhunter.Models;
using Wpf.Ui.Abstractions.Controls;
using System.Collections.Generic;
using System.Linq;

namespace skinhunter.ViewModels.Pages
{
    public partial class DataViewModel : ObservableObject, INavigationAware
    {
        private bool _isInitialized = false;

        [ObservableProperty]
        private IEnumerable<DataColor> _colors = Enumerable.Empty<DataColor>();

        public Task OnNavigatedToAsync()
        {
            if (!_isInitialized)
                InitializeViewModel();
            return Task.CompletedTask;
        }

        public Task OnNavigatedFromAsync()
        {
            return Task.CompletedTask;
        }

        public void OnNavigatedTo(object? parameter)
        {
            // No parameter expected for this page currently
        }

        private void InitializeViewModel()
        {
            var random = new Random();
            var colorCollection = new List<DataColor>();

            for (int i = 0; i < 8192; i++)
                colorCollection.Add(
                    new DataColor
                    {
                        Color = new SolidColorBrush(
                            Color.FromArgb(
                                (byte)200,
                                (byte)random.Next(0, 250),
                                (byte)random.Next(0, 250),
                                (byte)random.Next(0, 250)
                            )
                        )
                    }
                );
            Colors = colorCollection;
            _isInitialized = true;
        }
    }
}

//-==================== END OF FILE: ViewModels\Pages\DataViewModel.cs ====================-//

//-==================== START OF FILE: ViewModels\Pages\InstalledSkinsViewModel.cs ====================-//

﻿using skinhunter.Models;
using skinhunter.Services;
using skinhunter.ViewModels.Windows;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using Wpf.Ui.Abstractions.Controls;
using Wpf.Ui.Controls;

namespace skinhunter.ViewModels.Pages
{
    public partial class InstalledSkinsViewModel : ViewModelBase, INavigationAware
    {
        private readonly UserPreferencesService _userPreferencesService;
        private readonly ModToolsService _modToolsService;
        private readonly ISnackbarService _snackbarService;

        [ObservableProperty]
        private ObservableCollection<InstalledSkinInfoDisplay> _installedSkins = [];

        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(HasInstalledSkins))]
        private bool _isLoadingSkinsList = true;

        [ObservableProperty]
        private bool _canUninstallSelected;

        public bool HasInstalledSkins => InstalledSkins.Any();

        public InstalledSkinsViewModel(UserPreferencesService userPreferencesService, ModToolsService modToolsService, ISnackbarService snackbarService)
        {
            _userPreferencesService = userPreferencesService;
            _modToolsService = modToolsService;
            _snackbarService = snackbarService;
        }

        private void UpdateCanUninstall()
        {
            CanUninstallSelected = InstalledSkins.Any(s => s.IsSelected);
            Application.Current.Dispatcher.Invoke(() => {
                UninstallSelectedCommand.NotifyCanExecuteChanged();
                UninstallAllCommand.NotifyCanExecuteChanged();
            });
        }

        public async Task OnNavigatedToAsync()
        {
            IsLoadingSkinsList = true;
            await Task.Delay(200);
            await LoadInstalledSkinsAsync();
        }

        public Task OnNavigatedFromAsync()
        {
            foreach (var skinDisplay in InstalledSkins)
            {
                skinDisplay.SelectionChanged -= OnSkinSelectionChanged;
            }
            InstalledSkins.Clear();
            IsLoadingSkinsList = true;
            return Task.CompletedTask;
        }

        public void OnNavigatedTo(object? _) { }

        private void OnSkinSelectionChanged(object? sender, System.EventArgs e)
        {
            UpdateCanUninstall();
        }

        [RelayCommand]
        private async Task RefreshCommand()
        {
            IsLoadingSkinsList = true;
            await Task.Delay(200);
            await LoadInstalledSkinsAsync();
        }

        private async Task LoadInstalledSkinsAsync()
        {
            try
            {
                foreach (var skinDisplay in InstalledSkins)
                {
                    skinDisplay.SelectionChanged -= OnSkinSelectionChanged;
                }
                InstalledSkins.Clear();

                await _userPreferencesService.LoadPreferencesAsync();
                var skinsFromPrefs = _userPreferencesService.GetInstalledSkins();
                var champSummaries = await CdragonDataService.GetChampionSummariesAsync();
                var championNameMap = champSummaries?.ToDictionary(c => c.Id, c => c.Name) ?? [];

                var displaySkins = skinsFromPrefs
                    .OrderBy(s => s.SkinName)
                    .ThenBy(s => s.ChromaName)
                    .Select(skinInfo =>
                    {
                        var displaySkin = new InstalledSkinInfoDisplay(skinInfo)
                        {
                            ChampionName = championNameMap.GetValueOrDefault(skinInfo.ChampionId, $"Champ ID: {skinInfo.ChampionId}")
                        };
                        displaySkin.SelectionChanged += OnSkinSelectionChanged;
                        return displaySkin;
                    });

                foreach (var skin in displaySkins)
                {
                    InstalledSkins.Add(skin);
                }
            }
            finally
            {
                IsLoadingSkinsList = false;
                UpdateCanUninstall();
            }
        }

        [RelayCommand(CanExecute = nameof(CanUninstallSelected))]
        private async Task UninstallSelected()
        {
            var selectedSkinsInfo = InstalledSkins.Where(s => s.IsSelected).Select(s => s.SkinInfo).ToList();
            if (!selectedSkinsInfo.Any()) return;

            var result = await ShowConfirmationDialogAsync($"Are you sure you want to uninstall {selectedSkinsInfo.Count} selected skin(s)?");

            if (result == Wpf.Ui.Controls.MessageBoxResult.Primary)
            {
                await _modToolsService.QueueUninstallSkins(selectedSkinsInfo, _snackbarService);
                await RefreshCommand();
            }
        }

        [RelayCommand(CanExecute = nameof(HasInstalledSkins))]
        private async Task UninstallAll()
        {
            var allSkinsInfo = InstalledSkins.Select(s => s.SkinInfo).ToList();
            if (!allSkinsInfo.Any()) return;

            var result = await ShowConfirmationDialogAsync("Are you sure you want to uninstall ALL installed skins?");

            if (result == Wpf.Ui.Controls.MessageBoxResult.Primary)
            {
                await _modToolsService.QueueUninstallSkins(allSkinsInfo, _snackbarService);
                await RefreshCommand();
            }
        }

        private static async Task<Wpf.Ui.Controls.MessageBoxResult> ShowConfirmationDialogAsync(string content)
        {
            var messageBox = new Wpf.Ui.Controls.MessageBox
            {
                Title = "Confirm Uninstall",
                Content = content + "\nThis operation will stop the mod overlay and rebuild the game configuration.",
                PrimaryButtonText = "Uninstall",
                CloseButtonText = "Cancel",
                PrimaryButtonAppearance = ControlAppearance.Danger
            };
            return await messageBox.ShowDialogAsync();
        }
    }
}

//-==================== END OF FILE: ViewModels\Pages\InstalledSkinsViewModel.cs ====================-//

//-==================== START OF FILE: ViewModels\Pages\ProfileViewModel.cs ====================-//

﻿// ViewModels/Pages/ProfileViewModel.cs
using skinhunter.Services;
using System.Security.Claims;
using System.Threading.Tasks;
using Wpf.Ui.Abstractions.Controls;

namespace skinhunter.ViewModels.Pages
{
    public partial class ProfileViewModel : ViewModelBase, INavigationAware
    {
        private readonly UserPreferencesService _userPreferencesService;

        [ObservableProperty]
        private string? _userName;

        [ObservableProperty]
        private string? _userAvatarFallback;

        [ObservableProperty]
        private string? _licenseStatus;

        [ObservableProperty]
        private bool? _isBuyer;

        public ProfileViewModel(UserPreferencesService userPreferencesService)
        {
            _userPreferencesService = userPreferencesService;
        }

        public Task OnNavigatedToAsync()
        {
            IsLoading = true;
            var profile = _userPreferencesService.CurrentProfile;

            if (profile != null)
            {
                UserName = profile.Login ?? profile.Id.ToString();
                UserAvatarFallback = !string.IsNullOrEmpty(UserName) && UserName != "N/A" ? UserName[0].ToString().ToUpper() : "?";
                IsBuyer = profile.IsBuyer;
                LicenseStatus = profile.IsBuyer ? "Buyer" : "Standard User";
            }
            else
            {
                UserName = "Not Authenticated";
                UserAvatarFallback = "!";
                IsBuyer = null;
                LicenseStatus = "N/A";
            }
            FileLoggerService.Log($"[ProfileVM] Loaded. UserName from Profile Service: {UserName}");
            IsLoading = false;
            return Task.CompletedTask;
        }

        public Task OnNavigatedFromAsync()
        {
            return Task.CompletedTask;
        }

        public void OnNavigatedTo(object? parameter)
        {
        }
    }
}

//-==================== END OF FILE: ViewModels\Pages\ProfileViewModel.cs ====================-//

//-==================== START OF FILE: ViewModels\Pages\SettingsViewModel.cs ====================-//

﻿// ViewModels/Pages/SettingsViewModel.cs
using Wpf.Ui.Abstractions.Controls;
using Wpf.Ui.Appearance;
using System.Collections.ObjectModel;
using System.Windows.Media;
using System.IO;

namespace skinhunter.ViewModels.Pages
{
    public partial class SettingsViewModel : ObservableObject, INavigationAware
    {
        private readonly UserPreferencesService _userPreferencesService;
        private readonly string _modsPath;
        private bool _isInitialized = false;

        [ObservableProperty]
        private string _appVersion = string.Empty;

        [ObservableProperty]
        private bool _isDarkTheme;

        [ObservableProperty]
        private bool _syncOnStart;

        public ObservableCollection<Color> PredefinedAccentColors { get; }

        public SettingsViewModel(UserPreferencesService userPreferencesService)
        {
            _userPreferencesService = userPreferencesService;
            string appExePath = Path.GetDirectoryName(AppContext.BaseDirectory) ?? ".";
            string userDataDir = Path.Combine(appExePath, "UserData", "LoLModInstaller");
            _modsPath = Path.Combine(userDataDir, "installed");

            PredefinedAccentColors =
            [
                Color.FromRgb(0, 120, 215),
                Color.FromRgb(231, 76, 60),
                Color.FromRgb(46, 204, 113),
                Color.FromRgb(155, 89, 182),
                Color.FromRgb(241, 196, 15),
                Color.FromRgb(26, 188, 156),
                Color.FromRgb(230, 126, 34),
                Color.FromRgb(255, 105, 180)
            ];
        }

        [RelayCommand]
        private void ChangeTheme()
        {
            var newTheme = IsDarkTheme ? ApplicationTheme.Dark : ApplicationTheme.Light;
            ApplicationThemeManager.Apply(newTheme);
        }

        [RelayCommand]
        private void ChangeAccentColor(Color color)
        {
            ApplicationThemeManager.Apply(
                ApplicationThemeManager.GetAppTheme(),
                WindowBackdropType.Mica,
                true
            );
            ApplicationAccentColorManager.Apply(color, ApplicationThemeManager.GetAppTheme());
        }

        [RelayCommand]
        private void OpenModsFolder()
        {
            try
            {
                Directory.CreateDirectory(_modsPath);
                Process.Start("explorer.exe", _modsPath);
            }
            catch (Exception ex)
            {
                FileLoggerService.Log($"[SettingsVM] Failed to open mods folder: {ex.Message}");
            }
        }

        public async Task OnNavigatedToAsync()
        {
            if (!_isInitialized)
                await InitializeViewModel();
        }

        public Task OnNavigatedFromAsync()
        {
            return SaveSettings();
        }

        public void OnNavigatedTo(object? parameter) { }

        private async Task InitializeViewModel()
        {
            await Application.Current.Dispatcher.InvokeAsync(() =>
            {
                IsDarkTheme = ApplicationThemeManager.GetAppTheme() == ApplicationTheme.Dark;
            });
            AppVersion = $"skinhunter - {GetAssemblyVersion()}";
            SyncOnStart = _userPreferencesService.GetSyncOnStart();
            _isInitialized = true;
        }

        private async Task SaveSettings()
        {
            if (!_isInitialized) return;

            var currentPrefs = new UserPreferences
            {
                Theme = IsDarkTheme ? "dark" : "light",
                SyncOnStart = this.SyncOnStart,
                InstalledSkins = _userPreferencesService.GetInstalledSkins()
            };
            await _userPreferencesService.SavePreferencesAsync(currentPrefs);
        }

        private string GetAssemblyVersion()
        {
            return System.Reflection.Assembly.GetExecutingAssembly().GetName().Version?.ToString() ?? String.Empty;
        }
    }
}

//-==================== END OF FILE: ViewModels\Pages\SettingsViewModel.cs ====================-//

//-==================== START OF FILE: ViewModels\ViewModelBase.cs ====================-//

﻿
namespace skinhunter.ViewModels
{
    public abstract partial class ViewModelBase : ObservableObject
    {
        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(IsNotLoading))]
        private bool _isLoading;

        public bool IsNotLoading => !IsLoading;
    }
}

//-==================== END OF FILE: ViewModels\ViewModelBase.cs ====================-//

//-==================== START OF FILE: ViewModels\Windows\MainWindowViewModel.cs ====================-//

﻿using skinhunter.Services;
using skinhunter.ViewModels.Dialogs;
using skinhunter.Views.Pages;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using Wpf.Ui.Controls;

namespace skinhunter.ViewModels.Windows
{
    public partial class MainWindowViewModel : ViewModelBase
    {
        private readonly ICustomNavigationService _customNavigationService;
        private readonly IServiceProvider _serviceProvider;
        public OverlayToggleButtonViewModel OverlayViewModel { get; }

        [ObservableProperty]
        private string _applicationTitle = "skinhunter";

        [ObservableProperty]
        private ObservableCollection<object> _menuItemsSource = new();

        [ObservableProperty]
        private ObservableCollection<object> _footerMenuItemsSource = new();

        [ObservableProperty]
        private object? _dialogViewModel;

        [ObservableProperty]
        private OmnisearchViewModel? _omnisearchDialogViewModel;

        [ObservableProperty]
        private bool _isGloballyLoading;

        [ObservableProperty]
        private string? _globalLoadingMessage;

        [ObservableProperty]
        private bool _isGlobalSuccessOverlayVisible;

        [ObservableProperty]
        private string? _globalSuccessMessage;

        [ObservableProperty]
        private bool _isGlobalErrorOverlayVisible;

        [ObservableProperty]
        private string? _globalErrorMessage;

        [ObservableProperty]
        private ViewModelBase? _currentPageViewModel;

        [ObservableProperty]
        private bool _isBackButtonVisible;

        [ObservableProperty]
        private string? _currentPageTitle;

        partial void OnCurrentPageViewModelChanged(ViewModelBase? value)
        {
            IsBackButtonVisible = value is ChampionDetailPageViewModel;
        }

        public MainWindowViewModel(ICustomNavigationService customNavigationService, IServiceProvider serviceProvider, OverlayToggleButtonViewModel overlayViewModel)
        {
            _customNavigationService = customNavigationService;
            _serviceProvider = serviceProvider;
            OverlayViewModel = overlayViewModel;
            InitializeMenu();
        }

        private void InitializeMenu()
        {
            MenuItemsSource.Add(new NavigationViewItem()
            {
                Content = "Home",
                Icon = new SymbolIcon { Symbol = SymbolRegular.Home24 },
                TargetPageType = typeof(ChampionGridPage)
            });

            MenuItemsSource.Add(new NavigationViewItem()
            {
                Content = "Installed",
                Icon = new SymbolIcon { Symbol = SymbolRegular.Save24 },
                TargetPageType = typeof(InstalledSkinsPage)
            });

            MenuItemsSource.Add(new NavigationViewItem()
            {
                Content = "Profile",
                Icon = new SymbolIcon { Symbol = SymbolRegular.Person24 },
                TargetPageType = typeof(ProfilePage)
            });

            FooterMenuItemsSource.Add(new NavigationViewItem()
            {
                Content = "Settings",
                Icon = new SymbolIcon { Symbol = SymbolRegular.Settings24 },
                TargetPageType = typeof(SettingsPage)
            });
        }

        [RelayCommand]
        private void GoBack()
        {
            _customNavigationService.GoBack();
        }

        public async Task ShowGlobalSuccess(string message)
        {
            GlobalSuccessMessage = message;
            IsGlobalSuccessOverlayVisible = true;
            await Task.Delay(2000);
            IsGlobalSuccessOverlayVisible = false;
        }

        public async Task ShowGlobalError(string message)
        {
            GlobalErrorMessage = message;
            IsGlobalErrorOverlayVisible = true;
            await Task.Delay(3000);
            IsGlobalErrorOverlayVisible = false;
        }

        [RelayCommand]
        private async Task OpenOmnisearch()
        {
            if (OmnisearchDialogViewModel == null)
            {
                var omnisearchVM = _serviceProvider.GetRequiredService<OmnisearchViewModel>();
                OmnisearchDialogViewModel = omnisearchVM;
                await omnisearchVM.EnsureDataLoadedAsync();
            }
        }
    }
}

//-==================== END OF FILE: ViewModels\Windows\MainWindowViewModel.cs ====================-//

//-==================== START OF FILE: Views\Components\ChampionGridPageHeader.xaml ====================-//

<UserControl x:Class="skinhunter.Views.Components.ChampionGridPageHeader"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
             xmlns:vmPages="clr-namespace:skinhunter.ViewModels.Pages"
             mc:Ignorable="d" 
             d:DataContext="{d:DesignInstance Type=vmPages:ChampionGridPageViewModel, IsDesignTimeCreatable=False}">
    <Grid VerticalAlignment="Center">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>

        <ui:TextBox
            Grid.Column="0"
            MinWidth="220"
            PlaceholderText="Search Champions..."
            Icon="Search24"
            Text="{Binding SearchText, UpdateSourceTrigger=PropertyChanged, Delay=300}"
            VerticalContentAlignment="Center"/>

        <ComboBox
            Grid.Column="1"
            MinWidth="120"
            Margin="8,0,0,0"
            ItemsSource="{Binding AllRoles}"
            SelectedItem="{Binding SelectedRole}"
            VerticalContentAlignment="Center"/>
    </Grid>
</UserControl>

//-==================== END OF FILE: Views\Components\ChampionGridPageHeader.xaml ====================-//

//-==================== START OF FILE: Views\Components\ChampionGridPageHeader.xaml.cs ====================-//

﻿namespace skinhunter.Views.Components
{
    public partial class ChampionGridPageHeader : System.Windows.Controls.UserControl
    {
        public ChampionGridPageHeader()
        {
            InitializeComponent();
        }
    }
}

//-==================== END OF FILE: Views\Components\ChampionGridPageHeader.xaml.cs ====================-//

//-==================== START OF FILE: Views\Components\InstalledSkinsPageHeader.xaml ====================-//

<UserControl x:Class="skinhunter.Views.Components.InstalledSkinsPageHeader"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
             xmlns:vmPages="clr-namespace:skinhunter.ViewModels.Pages"
             mc:Ignorable="d" 
             d:DataContext="{d:DesignInstance Type=vmPages:InstalledSkinsViewModel, IsDesignTimeCreatable=False}">
    <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
        <ui:Button
            Content="Uninstall Selected"
            Command="{Binding UninstallSelectedCommand}"
            Icon="Delete24"
            Appearance="Secondary"
            Margin="0,0,8,0"/>
        <ui:Button
            Content="Uninstall All"
            Command="{Binding UninstallAllCommand}"
            Icon="DeleteDismiss24"
            Appearance="Secondary"
            Margin="0,0,8,0"/>
        <ui:Button
            Content="Refresh List"
            Command="{Binding RefreshCommand}"
            Icon="ArrowClockwise24"
            Appearance="Secondary"/>
    </StackPanel>
</UserControl>

//-==================== END OF FILE: Views\Components\InstalledSkinsPageHeader.xaml ====================-//

//-==================== START OF FILE: Views\Components\InstalledSkinsPageHeader.xaml.cs ====================-//

﻿namespace skinhunter.Views.Components
{
    public partial class InstalledSkinsPageHeader : System.Windows.Controls.UserControl
    {
        public InstalledSkinsPageHeader()
        {
            InitializeComponent();
        }
    }
}

//-==================== END OF FILE: Views\Components\InstalledSkinsPageHeader.xaml.cs ====================-//

//-==================== START OF FILE: Views\Dialogs\OmnisearchDialog.xaml ====================-//

<UserControl x:Class="skinhunter.Views.Dialogs.OmnisearchDialog"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
             xmlns:vm="clr-namespace:skinhunter.ViewModels.Dialogs"
             xmlns:m="clr-namespace:skinhunter.Models"
             xmlns:converters="clr-namespace:skinhunter.Converters"
             mc:Ignorable="d" 
             d:DataContext="{d:DesignInstance Type=vm:OmnisearchViewModel, IsDesignTimeCreatable=False}"
             Width="560" MaxHeight="600" MinHeight="150"
             d:DesignHeight="600" d:DesignWidth="560">
    <UserControl.Resources>
        <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <converters:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter"/>
        <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>
        <Style x:Key="ButtonTransparentStyle" TargetType="Button">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" CornerRadius="4" x:Name="Bd">
                            <ContentPresenter/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Bd" Property="Background" Value="{DynamicResource ControlFillColorSecondaryBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <Border Background="{DynamicResource ApplicationBackgroundBrush}" CornerRadius="8" BorderBrush="{DynamicResource CardStrokeColorDefaultBrush}" BorderThickness="1">
        <Grid>
            <Grid Visibility="{Binding IsLoading, Converter={StaticResource InverseBooleanToVisibilityConverter}, FallbackValue=Collapsed}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <DockPanel Grid.Row="0" Margin="20,15,15,10" LastChildFill="True">
                    <ui:Button DockPanel.Dock="Right" Command="{Binding CloseOmnisearchDialogCommand}" Appearance="Transparent" ToolTipService.ToolTip="Close" Width="32" Height="32">
                        <ui:Button.Icon>
                            <ui:SymbolIcon Symbol="Dismiss24"/>
                        </ui:Button.Icon>
                    </ui:Button>
                    <TextBlock Text="Search" FontSize="20" FontWeight="Medium" VerticalAlignment="Center" Foreground="{DynamicResource TextFillColorPrimaryBrush}"/>
                </DockPanel>

                <Border Grid.Row="1" Background="{DynamicResource ApplicationBackgroundBrush}" Padding="15,12" Margin="20,5,20,15" CornerRadius="6">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <ui:TextBox Grid.Column="0" PlaceholderText="Search..." IconPlacement="Left"
                                 Text="{Binding Query, UpdateSourceTrigger=PropertyChanged, Delay=400}"
                                 Height="40" VerticalContentAlignment="Center" FontSize="15" Padding="35,0,5,0"
                                 BorderThickness="0.5" BorderBrush="{DynamicResource CardStrokeColorDefaultBrush}">
                            <ui:TextBox.Icon>
                                <ui:SymbolIcon Symbol="Search24"/>
                            </ui:TextBox.Icon>
                        </ui:TextBox>

                        <Popup Placement="Bottom" PlacementTarget="{Binding ElementName=FilterButton}" IsOpen="{Binding IsFilterPopupOpen, Mode=TwoWay}" AllowsTransparency="True" StaysOpen="False" VerticalOffset="5" HorizontalOffset="-10">
                            <Border Background="{DynamicResource LayerFillColorDefaultBrush}" BorderBrush="{DynamicResource CardStrokeColorDefaultBrush}" BorderThickness="1" Padding="12" CornerRadius="4" Margin="0,5,0,0">
                                <StackPanel>
                                    <CheckBox IsChecked="{Binding ShowChampionsFilter}" Content="Champions" Foreground="{DynamicResource TextFillColorPrimaryBrush}" Margin="0,0,0,8"/>
                                    <CheckBox IsChecked="{Binding ShowSkinsFilter}" Content="Skins" Foreground="{DynamicResource TextFillColorPrimaryBrush}"/>
                                </StackPanel>
                            </Border>
                        </Popup>

                        <ui:Button x:Name="FilterButton" Grid.Column="1" Appearance="Transparent" Margin="8,0,0,0" Width="40" Height="40"
                                Command="{Binding ToggleFilterPopupCommand}" ToolTipService.ToolTip="Filters">
                            <ui:Button.Icon>
                                <ui:SymbolIcon Symbol="Filter24"/>
                            </ui:Button.Icon>
                        </ui:Button>
                    </Grid>
                </Border>

                <Grid Grid.Row="2" Margin="20,0,20,20" MinHeight="100">
                    <ui:ProgressRing IsIndeterminate="True" 
                                 Visibility="{Binding IsLoadingSearchResults, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}"
                                 Width="30" Height="30" VerticalAlignment="Center" HorizontalAlignment="Center"/>

                    <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" 
                                  Visibility="{Binding IsLoadingSearchResults, Converter={StaticResource InverseBooleanToVisibilityConverter}, FallbackValue=Visible}">
                        <ItemsControl ItemsSource="{Binding SearchResultsView}">
                            <ItemsControl.GroupStyle>
                                <GroupStyle>
                                    <GroupStyle.HeaderTemplate>
                                        <DataTemplate>
                                            <TextBlock Text="{Binding Name}" Foreground="{DynamicResource TextFillColorSecondaryBrush}" FontSize="12" FontWeight="Medium" Margin="0,8,0,3" Opacity="0.8"/>
                                        </DataTemplate>
                                    </GroupStyle.HeaderTemplate>
                                </GroupStyle>
                            </ItemsControl.GroupStyle>
                            <ItemsControl.ItemTemplate>
                                <DataTemplate DataType="{x:Type m:SearchResultItem}">
                                    <Button Command="{Binding DataContext.SelectResultCommand, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}"
                                            CommandParameter="{Binding}"
                                            Style="{StaticResource ButtonTransparentStyle}" Margin="0,2">
                                        <Border Padding="10,8">
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="*"/>
                                                </Grid.ColumnDefinitions>
                                                <Border Grid.Column="0" Width="48" Height="48" CornerRadius="3" Margin="0,0,15,0" Background="{DynamicResource ControlFillColorSecondaryBrush}">
                                                    <Grid>
                                                        <Border Background="{DynamicResource ControlFillColorTertiaryBrush}" Visibility="{Binding ImageSource, Converter={StaticResource NullToVisibilityConverter}, ConverterParameter=True, FallbackValue=Visible}"/>
                                                        <Image Source="{Binding ImageSource}" Stretch="Uniform" RenderOptions.BitmapScalingMode="Fant"/>
                                                    </Grid>
                                                </Border>
                                                <StackPanel Grid.Column="1" VerticalAlignment="Center">
                                                    <TextBlock Text="{Binding Name}" Foreground="{DynamicResource TextFillColorPrimaryBrush}" FontSize="14" FontWeight="Normal" TextTrimming="CharacterEllipsis"/>
                                                    <TextBlock Text="{Binding DisplayType}" Foreground="{DynamicResource TextFillColorSecondaryBrush}" FontSize="11"/>
                                                </StackPanel>
                                            </Grid>
                                        </Border>
                                    </Button>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </ScrollViewer>
                </Grid>
            </Grid>
            <ui:ProgressRing IsIndeterminate="True" HorizontalAlignment="Center" VerticalAlignment="Center"
                              Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}" />
        </Grid>
    </Border>
</UserControl>

//-==================== END OF FILE: Views\Dialogs\OmnisearchDialog.xaml ====================-//

//-==================== START OF FILE: Views\Dialogs\OmnisearchDialog.xaml.cs ====================-//

﻿using skinhunter.ViewModels.Dialogs;

namespace skinhunter.Views.Dialogs
{
    public partial class OmnisearchDialog : System.Windows.Controls.UserControl
    {
        public OmnisearchViewModel? ViewModel => DataContext as OmnisearchViewModel;
        public OmnisearchDialog()
        {
            InitializeComponent();
        }
    }
}

//-==================== END OF FILE: Views\Dialogs\OmnisearchDialog.xaml.cs ====================-//

//-==================== START OF FILE: Views\Dialogs\SkinDetailDialog.xaml ====================-//

<UserControl x:Class="skinhunter.Views.Dialogs.SkinDetailDialog"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
             xmlns:vm="clr-namespace:skinhunter.ViewModels.Dialogs"
             xmlns:m="clr-namespace:skinhunter.Models"
             xmlns:converters="clr-namespace:skinhunter.Converters"
             mc:Ignorable="d"
             d:DataContext="{d:DesignInstance Type=vm:SkinDetailViewModel, IsDesignTimeCreatable=False}"
             Width="850" MaxHeight="650" MinHeight="600" d:DesignWidth="850">
    <UserControl.Resources>
        <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <converters:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter"/>
        <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>
        <converters:ChromaToButtonTextConverter x:Key="ChromaToButtonTextConverter"/>
        <Style x:Key="CardBorderStyle" TargetType="Border">
            <Setter Property="Background" Value="{DynamicResource CardBackgroundFillColorDefaultBrush}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource CardStrokeColorDefaultBrush}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="CornerRadius" Value="4"/>
            <Setter Property="Padding" Value="5"/>
        </Style>
        <Style x:Key="RadioButtonCardStyle" TargetType="RadioButton">
            <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}"/>
            <Setter Property="Background" Value="{DynamicResource CardBackgroundFillColorDefaultBrush}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource CardStrokeColorDefaultBrush}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Margin" Value="4"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Width" Value="85"/>
            <Setter Property="Height" Value="85"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RadioButton">
                        <Border x:Name="border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="4">
                            <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource AccentFillColorDefaultBrush}"/>
                                <Setter TargetName="border" Property="BorderThickness" Value="2"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource ControlFillColorSecondaryBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <Border Background="{DynamicResource ApplicationBackgroundBrush}" CornerRadius="8" BorderBrush="{DynamicResource CardStrokeColorDefaultBrush}" BorderThickness="1">
        <Grid>
            <Grid Margin="20" Visibility="{Binding IsLoading, Converter={StaticResource InverseBooleanToVisibilityConverter}, FallbackValue=Collapsed}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <DockPanel Grid.Row="0" Grid.ColumnSpan="2" Margin="0,0,0,15" LastChildFill="False">
                    <ui:Button DockPanel.Dock="Right" Command="{Binding CloseDialogCommand}" Appearance="Transparent" ToolTipService.ToolTip="Close">
                        <ui:Button.Icon>
                            <ui:SymbolIcon Symbol="Dismiss24"/>
                        </ui:Button.Icon>
                    </ui:Button>
                    <StackPanel DockPanel.Dock="Left" Orientation="Horizontal">
                        <Image Source="{Binding SelectedSkin.RarityImageUrl}" Width="20" Height="20" Margin="0,0,8,0" VerticalAlignment="Center"
                               Visibility="{Binding SelectedSkin.RarityImageUrl, Converter={StaticResource NullToVisibilityConverter}}"/>
                        <TextBlock Text="{Binding SelectedSkin.Name}" Foreground="{DynamicResource TextFillColorPrimaryBrush}" FontSize="20" FontWeight="Bold" VerticalAlignment="Center"/>
                    </StackPanel>
                </DockPanel>

                <StackPanel Grid.Row="1" Grid.Column="0" Margin="0,0,25,0" MaxWidth="400">
                    <Border Style="{StaticResource CardBorderStyle}" Padding="0">
                        <Grid>
                            <Image Source="{Binding SelectedSkin.SplashImageUrl}" Height="240" Stretch="UniformToFill" VerticalAlignment="Top" />
                        </Grid>
                    </Border>
                    <ScrollViewer MaxHeight="150" VerticalScrollBarVisibility="Auto" Margin="0,15,0,0">
                        <TextBlock Text="{Binding SelectedSkin.Description, FallbackValue='This skin does not have a description.'}"
                                   Foreground="{DynamicResource TextFillColorSecondaryBrush}" FontSize="13" TextWrapping="Wrap"/>
                    </ScrollViewer>
                    <Border Background="#44FFFF00" BorderBrush="#FFFFCC00" BorderThickness="1" CornerRadius="3" Padding="8,5" Margin="0,15,0,0"
                            Visibility="{Binding SelectedSkin.IsLegacy, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <TextBlock Text="This skin may not work properly due to game updates" FontSize="11" Foreground="#FFFFEEAA" TextWrapping="Wrap"/>
                    </Border>
                </StackPanel>

                <DockPanel Grid.Row="1" Grid.Column="1">
                    <StackPanel DockPanel.Dock="Top">
                        <TextBlock Margin="0,0,0,10" Foreground="{DynamicResource TextFillColorSecondaryBrush}">
                            <Run Text="View skin on "/>
                            <Hyperlink NavigateUri="{Binding KhadaViewerUrl}" RequestNavigate="Hyperlink_RequestNavigate" Foreground="{DynamicResource AccentTextFillColorPrimaryBrush}">
                                <Run Text="Model viewer"/>
                            </Hyperlink>
                        </TextBlock>
                    </StackPanel>
                    <Separator DockPanel.Dock="Top" Margin="0,0,0,15" Background="{DynamicResource CardStrokeColorDefaultBrush}"/>

                    <Border DockPanel.Dock="Bottom" Margin="0,15,0,0" Background="{DynamicResource InfoBadgeBackground}" BorderBrush="{DynamicResource InfoBadgeBackground}" BorderThickness="1" Padding="8,5" CornerRadius="3">
                        <TextBlock FontSize="12" Foreground="{DynamicResource TextFillColorSecondaryBrush}">
                             <Run Text="This is going to consume a credit"/>
                             <Run Text="{Binding UserCredits, StringFormat='({0} credits left)'}" Foreground="LightGreen"/>
                        </TextBlock>
                    </Border>

                    <StackPanel Orientation="Vertical">
                        <TextBlock Text="Chromas" Foreground="{DynamicResource TextFillColorPrimaryBrush}" FontSize="16" FontWeight="SemiBold" Margin="0,0,0,8"/>
                        <TabControl Padding="0" Margin="0,0,0,0">
                            <TabItem Header="Circles">
                                <StackPanel Orientation="Vertical" VerticalAlignment="Center" HorizontalAlignment="Center">
                                    <TextBlock Text="Select a variation to download." Foreground="{DynamicResource TextFillColorSecondaryBrush}" FontSize="12" Margin="0,8,0,8" FontStyle="Italic"/>
                                    <ScrollViewer VerticalScrollBarVisibility="Auto" MaxHeight="260" Padding="5,0,30,0" HorizontalScrollBarVisibility="Disabled">
                                        <ItemsControl ItemsSource="{Binding AvailableChromas}">
                                            <ItemsControl.ItemsPanel>
                                                <ItemsPanelTemplate>
                                                    <WrapPanel Orientation="Horizontal" ItemWidth="95" ItemHeight="105"/>
                                                </ItemsPanelTemplate>
                                            </ItemsControl.ItemsPanel>
                                            <ItemsControl.ItemTemplate>
                                                <DataTemplate DataType="{x:Type m:Chroma}">
                                                    <RadioButton GroupName="ChromaSelectionCircles" Style="{StaticResource RadioButtonCardStyle}"
                                                                 IsChecked="{Binding IsSelected, Mode=TwoWay}"
                                                                 Command="{Binding DataContext.ToggleChromaSelectionCommand, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}"
                                                                 CommandParameter="{Binding}">
                                                        <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                                                            <Ellipse Width="50" Height="50" Stroke="{DynamicResource CardStrokeColorDefaultBrush}" StrokeThickness="1" Fill="{Binding ColorBrush}" Margin="0,5,0,5"/>
                                                            <TextBlock Text="{Binding Name}" HorizontalAlignment="Center" FontSize="11" TextTrimming="CharacterEllipsis" Margin="0,0,0,5" MaxWidth="75" TextAlignment="Center" TextWrapping="Wrap"/>
                                                        </StackPanel>
                                                    </RadioButton>
                                                </DataTemplate>
                                            </ItemsControl.ItemTemplate>
                                        </ItemsControl>
                                    </ScrollViewer>
                                </StackPanel>
                            </TabItem>
                            <TabItem Header="Images">
                                <StackPanel Orientation="Vertical" VerticalAlignment="Center" HorizontalAlignment="Center">
                                    <TextBlock Text="Select a variation to download." Foreground="{DynamicResource TextFillColorSecondaryBrush}" FontSize="12" Margin="0,8,0,8" FontStyle="Italic"/>
                                    <ScrollViewer VerticalScrollBarVisibility="Auto" MaxHeight="260" Padding="5,0,30,0" HorizontalScrollBarVisibility="Disabled">
                                        <ItemsControl ItemsSource="{Binding AvailableChromas}">
                                            <ItemsControl.ItemsPanel>
                                                <ItemsPanelTemplate>
                                                    <WrapPanel Orientation="Horizontal" ItemWidth="95" ItemHeight="105"/>
                                                </ItemsPanelTemplate>
                                            </ItemsControl.ItemsPanel>
                                            <ItemsControl.ItemTemplate>
                                                <DataTemplate DataType="{x:Type m:Chroma}">
                                                    <RadioButton GroupName="ChromaSelectionImages" Style="{StaticResource RadioButtonCardStyle}"
                                                                 IsChecked="{Binding IsSelected, Mode=TwoWay}"
                                                                 Command="{Binding DataContext.ToggleChromaSelectionCommand, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}"
                                                                 CommandParameter="{Binding}">
                                                        <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                                                            <Image Source="{Binding ImageUrl}" Width="60" Height="60" Stretch="Uniform" Margin="0,5,0,5" RenderOptions.BitmapScalingMode="HighQuality"/>
                                                            <TextBlock Text="{Binding Name}" HorizontalAlignment="Center" FontSize="11" TextTrimming="CharacterEllipsis" Margin="0,0,0,5" MaxWidth="75" TextAlignment="Center" TextWrapping="Wrap"/>
                                                        </StackPanel>
                                                    </RadioButton>
                                                </DataTemplate>
                                            </ItemsControl.ItemTemplate>
                                        </ItemsControl>
                                    </ScrollViewer>
                                </StackPanel>
                            </TabItem>
                        </TabControl>
                    </StackPanel>
                </DockPanel>

                <Grid Grid.Row="2" Grid.ColumnSpan="2" Margin="0,20,0,0">
                    <ui:Button Content="Close" HorizontalAlignment="Left" Width="90" Appearance="Secondary"
                            Command="{Binding CloseDialogCommand}"/>
                    <ui:Button Content="{Binding SelectedChroma, Converter={StaticResource ChromaToButtonTextConverter}, FallbackValue='Download Skin'}"
                             Appearance="Primary" HorizontalAlignment="Right" Width="150"
                             Command="{Binding DownloadSkinCommand}"
                             IsEnabled="{Binding CanDownload}">
                        <ui:Button.Icon>
                            <ui:SymbolIcon Symbol="ArrowDownload24" Foreground="{DynamicResource TextOnAccentFillColorPrimaryBrush}"/>
                        </ui:Button.Icon>
                    </ui:Button>
                </Grid>
            </Grid>
            <ui:ProgressRing IsIndeterminate="True" HorizontalAlignment="Center" VerticalAlignment="Center"
                              Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}" />
        </Grid>
    </Border>
</UserControl>

//-==================== END OF FILE: Views\Dialogs\SkinDetailDialog.xaml ====================-//

//-==================== START OF FILE: Views\Dialogs\SkinDetailDialog.xaml.cs ====================-//

﻿using System.Windows.Navigation;
using System.Diagnostics;

namespace skinhunter.Views.Dialogs
{
    public partial class SkinDetailDialog : System.Windows.Controls.UserControl
    {
        public SkinDetailDialog()
        {
            InitializeComponent();
        }

        private async void Hyperlink_RequestNavigate(object sender, RequestNavigateEventArgs e)
        {
            try
            {
                Process.Start(new ProcessStartInfo(e.Uri.AbsoluteUri) { UseShellExecute = true });
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Failed to open hyperlink: {ex.Message}");
                var messageBox = new Wpf.Ui.Controls.MessageBox
                {
                    Title = "Error",
                    Content = $"Could not open link: {e.Uri.AbsoluteUri}",
                    CloseButtonText = "OK"
                };
                await messageBox.ShowDialogAsync();
            }
            e.Handled = true;
        }
    }
}

//-==================== END OF FILE: Views\Dialogs\SkinDetailDialog.xaml.cs ====================-//

//-==================== START OF FILE: Views\Pages\AuthenticationRequiredPage.xaml ====================-//

<Page
    x:Class="skinhunter.Views.Pages.AuthenticationRequiredPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    xmlns:vm="clr-namespace:skinhunter.ViewModels.Pages"
    mc:Ignorable="d"
    d:DataContext="{d:DesignInstance Type=vm:AuthenticationRequiredPageViewModel, IsDesignTimeCreatable=False}"
    ui:Design.Background="{DynamicResource ApplicationBackgroundBrush}"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}">
    <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
        <StackPanel Width="400" HorizontalAlignment="Center" TextBlock.TextAlignment="Center">
            <ui:SymbolIcon Symbol="ErrorCircle24" FontSize="48" Foreground="#FFDC362E" Margin="0,0,0,20"/>
            <TextBlock Text="{Binding ViewModel.Message}" FontSize="20" FontWeight="SemiBold" Margin="0,0,0,10" TextWrapping="Wrap" Foreground="{DynamicResource TextFillColorPrimaryBrush}"/>
            <TextBlock Text="{Binding ViewModel.Instruction}" FontSize="14" Foreground="{DynamicResource TextFillColorSecondaryBrush}" Margin="0,0,0,30" TextWrapping="Wrap"/>
            <ui:Button Content="Exit Application"
                       Command="{Binding ViewModel.ExitApplicationCommand}"
                       Appearance="Primary"
                       HorizontalAlignment="Center"
                       Width="150"/>
        </StackPanel>
    </Grid>
</Page>

//-==================== END OF FILE: Views\Pages\AuthenticationRequiredPage.xaml ====================-//

//-==================== START OF FILE: Views\Pages\AuthenticationRequiredPage.xaml.cs ====================-//

﻿using skinhunter.ViewModels.Pages;

namespace skinhunter.Views.Pages
{
    public partial class AuthenticationRequiredPage : INavigableView<AuthenticationRequiredPageViewModel>
    {
        public AuthenticationRequiredPageViewModel ViewModel { get; }

        public AuthenticationRequiredPage(AuthenticationRequiredPageViewModel viewModel)
        {
            ViewModel = viewModel;
            DataContext = this;
            InitializeComponent();
        }
    }
}

//-==================== END OF FILE: Views\Pages\AuthenticationRequiredPage.xaml.cs ====================-//

//-==================== START OF FILE: Views\Pages\ChampionDetailPage.xaml ====================-//

<Page
    x:Class="skinhunter.Views.Pages.ChampionDetailPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    xmlns:vm="clr-namespace:skinhunter.ViewModels.Pages"
    xmlns:m="clr-namespace:skinhunter.Models"
    xmlns:converters="clr-namespace:skinhunter.Converters"
    mc:Ignorable="d"
    x:Name="ChampionDetailPageSelf" 
    d:DataContext="{d:DesignInstance Type=vm:ChampionDetailPageViewModel, IsDesignTimeCreatable=False}"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}">
    <Page.Resources>
        <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <converters:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter"/>
        <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>

        <Storyboard x:Key="FadeInContentStoryboard">
            <DoubleAnimation
                Storyboard.TargetProperty="Opacity"
                From="0.0" To="1.0" Duration="0:0:0.5" />
        </Storyboard>
    </Page.Resources>
    <Grid Margin="28,12,28,20" DataContext="{Binding ViewModel, ElementName=ChampionDetailPageSelf}">
        <Grid x:Name="PageContentGrid" Opacity="0">
            <Grid.Style>
                <Style TargetType="Grid">
                    <Setter Property="Visibility" Value="Collapsed" />
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsLoading, FallbackValue=True}" Value="False">
                            <Setter Property="Visibility" Value="Visible"/>
                            <Setter Property="Opacity" Value="0"/>
                            <DataTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource FadeInContentStoryboard}"/>
                            </DataTrigger.EnterActions>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <Border Grid.Row="0" Padding="20" Background="{DynamicResource ControlFillColorDefaultBrush}" CornerRadius="8" Margin="0,0,0,20" VerticalAlignment="Center" HorizontalAlignment="Center"
                    Visibility="{Binding Champion, Converter={StaticResource NullToVisibilityConverter}}">
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left">
                    <Border Width="120" Height="120" CornerRadius="4" Margin="0,0,25,0" Background="{DynamicResource ControlFillColorTertiaryBrush}" ClipToBounds="True">
                        <Image Source="{Binding Champion.ChampionImageSource}" Stretch="Uniform" RenderOptions.BitmapScalingMode="Fant"/>
                    </Border>
                    <StackPanel VerticalAlignment="Center" MaxWidth="600" HorizontalAlignment="Center">
                        <TextBlock Text="{Binding Champion.Name, FallbackValue='Champion Details'}" FontSize="24" FontWeight="SemiBold" VerticalAlignment="Center" Margin="0,0,0,0" Foreground="{DynamicResource TextFillColorPrimaryBrush}"/>
                        <TextBlock Text="{Binding Champion.Title}" Foreground="{DynamicResource TextFillColorSecondaryBrush}" FontSize="18" FontStyle="Italic" Margin="0,0,0,8" TextWrapping="Wrap"/>
                        <TextBlock Text="{Binding Champion.ShortBio}" Foreground="{DynamicResource TextFillColorTertiaryBrush}" FontSize="14" TextWrapping="WrapWithOverflow"/>
                    </StackPanel>
                </StackPanel>
            </Border>

            <ScrollViewer Grid.Row="1" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" Focusable="True">
                <ItemsControl ItemsSource="{Binding Skins}"
                              VirtualizingPanel.IsVirtualizing="True" VirtualizingPanel.VirtualizationMode="Recycling"
                              HorizontalAlignment="Stretch">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <WrapPanel Orientation="Horizontal" HorizontalAlignment="Center"/>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemTemplate>
                        <DataTemplate DataType="{x:Type m:Skin}">
                            <ui:CardAction
                                Padding="0" Margin="8" Width="210" Height="260"
                                HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch"
                                Background="Transparent" BorderThickness="1"
                                IsChevronVisible="False" Cursor="Hand"
                                BorderBrush="{DynamicResource CardStrokeColorDefaultBrush}"
                                Command="{Binding DataContext.SelectSkinCommand, ElementName=ChampionDetailPageSelf}"
                                CommandParameter="{Binding}">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="*"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <Border CornerRadius="5,5,0,0" Background="{DynamicResource ControlFillColorInputActiveBrush}">
                                        <Image Source="{Binding TileImageUrl}" Stretch="UniformToFill" VerticalAlignment="Top" RenderOptions.BitmapScalingMode="HighQuality"/>
                                    </Border>
                                    <Image Source="pack://application:,,,/Assets/legacy-icon.png" Width="24" Height="24" Opacity="0.8"
                                            HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,8,0,0"
                                            Visibility="{Binding IsLegacy, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                    <Image Source="pack://application:,,,/Assets/chroma-icon.png" Width="24" Height="24" Opacity="0.8"
                                            HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,8,10,0"
                                            Visibility="{Binding HasChromas, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                    <Border Grid.Row="1" Padding="10,8" Background="{DynamicResource CardBackgroundFillColorSecondaryBrush}" CornerRadius="0,0,5,5">
                                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                            <Image Source="{Binding RarityImageUrl}" Width="16" Height="16" Margin="0,0,8,0" VerticalAlignment="Center"
                                                   Visibility="{Binding RarityImageUrl, Converter={StaticResource NullToVisibilityConverter}}"/>
                                            <TextBlock Text="{Binding Name}" FontSize="13" FontWeight="Medium" VerticalAlignment="Center" TextTrimming="CharacterEllipsis" TextAlignment="Center" MaxWidth="170"/>
                                        </StackPanel>
                                    </Border>
                                </Grid>
                            </ui:CardAction>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </ScrollViewer>
        </Grid>
        <ui:ProgressRing IsIndeterminate="True" HorizontalAlignment="Center" VerticalAlignment="Center"
                         Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}" />
    </Grid>
</Page>

//-==================== END OF FILE: Views\Pages\ChampionDetailPage.xaml ====================-//

//-==================== START OF FILE: Views\Pages\ChampionDetailPage.xaml.cs ====================-//

﻿using skinhunter.ViewModels.Pages;
using Wpf.Ui.Abstractions.Controls;

namespace skinhunter.Views.Pages
{
    public partial class ChampionDetailPage : INavigableView<ChampionDetailPageViewModel>
    {
        public ChampionDetailPageViewModel ViewModel { get; }

        public ChampionDetailPage(ChampionDetailPageViewModel viewModel)
        {
            ViewModel = viewModel;
            DataContext = ViewModel;
            InitializeComponent();
        }
    }
}

//-==================== END OF FILE: Views\Pages\ChampionDetailPage.xaml.cs ====================-//

//-==================== START OF FILE: Views\Pages\ChampionGridPage.xaml ====================-//

<Page
    x:Class="skinhunter.Views.Pages.ChampionGridPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    xmlns:vm="clr-namespace:skinhunter.ViewModels.Pages"
    xmlns:m="clr-namespace:skinhunter.Models"
    mc:Ignorable="d"
    d:DataContext="{d:DesignInstance Type=vm:ChampionGridPageViewModel, IsDesignTimeCreatable=False}"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    ScrollViewer.CanContentScroll="True">

    <Grid>
        <ItemsControl x:Name="SkeletonGrid" HorizontalAlignment="Stretch" VerticalAlignment="Top" Margin="28,12,28,20">
            <ItemsControl.Style>
                <Style TargetType="ItemsControl">
                    <Setter Property="Visibility" Value="Collapsed" />
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsLoading}" Value="True">
                            <Setter Property="Visibility" Value="Visible" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </ItemsControl.Style>
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <WrapPanel Orientation="Horizontal" HorizontalAlignment="Center"/>
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <DataTemplate.Resources>
                        <Storyboard x:Key="ShimmerStoryboard" RepeatBehavior="Forever">
                            <DoubleAnimation Storyboard.TargetName="ShimmerTranslate" Storyboard.TargetProperty="X" From="-100" To="200" Duration="0:0:1.5" />
                        </Storyboard>
                    </DataTemplate.Resources>
                    <Border Margin="8" Width="100" Height="120" Background="{DynamicResource ControlFillColorSecondaryBrush}" CornerRadius="6" ClipToBounds="True">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="80"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Rectangle Grid.Row="0" Fill="{DynamicResource ControlFillColorTertiaryBrush}" Margin="5"/>
                            <Rectangle Grid.Row="1" Fill="{DynamicResource ControlFillColorTertiaryBrush}" Height="12" Width="60" Margin="0,5,0,23"/>
                            <Rectangle Fill="{DynamicResource SystemAccentColorSecondaryBrush}" Opacity="0.1">
                                <Rectangle.RenderTransform>
                                    <TranslateTransform x:Name="ShimmerTranslate" />
                                </Rectangle.RenderTransform>
                            </Rectangle>
                        </Grid>
                        <Border.Triggers>
                            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                                <BeginStoryboard Storyboard="{StaticResource ShimmerStoryboard}"/>
                            </EventTrigger>
                        </Border.Triggers>
                    </Border>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
            <ItemsControl.ItemsSource>
                <x:Array Type="sys:Object" xmlns:sys="clr-namespace:System;assembly=mscorlib">
                    <sys:Object/>
                    <sys:Object/>
                    <sys:Object/>
                    <sys:Object/>
                    <sys:Object/>
                    <sys:Object/>
                    <sys:Object/>
                    <sys:Object/>
                    <sys:Object/>
                    <sys:Object/>
                    <sys:Object/>
                    <sys:Object/>
                    <sys:Object/>
                    <sys:Object/>
                    <sys:Object/>
                    <sys:Object/>
                    <sys:Object/>
                    <sys:Object/>
                    <sys:Object/>
                    <sys:Object/>
                    <sys:Object/>
                    <sys:Object/>
                    <sys:Object/>
                    <sys:Object/>
                    <sys:Object/>
                    <sys:Object/>
                    <sys:Object/>
                    <sys:Object/>
                    <sys:Object/>
                    <sys:Object/>
                </x:Array>
            </ItemsControl.ItemsSource>
        </ItemsControl>

        <ScrollViewer x:Name="ChampionsScrollViewer" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" Focusable="True">
            <ScrollViewer.Style>
                <Style TargetType="ScrollViewer">
                    <Setter Property="Opacity" Value="0"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsLoading}" Value="False">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.4" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </ScrollViewer.Style>
            <ItemsControl ItemsSource="{Binding ChampionsView}"
                          VirtualizingPanel.IsVirtualizing="True" VirtualizingPanel.VirtualizationMode="Recycling"
                          HorizontalAlignment="Stretch" VerticalAlignment="Top" Margin="28,12,28,20">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <WrapPanel Orientation="Horizontal" HorizontalAlignment="Center"/>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
                <ItemsControl.ItemTemplate>
                    <DataTemplate DataType="{x:Type m:ChampionSummary}">
                        <ui:CardAction
                                Padding="0" Margin="8" Width="100" Height="120"
                                HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch"
                                 BorderThickness="1"
                                IsChevronVisible="False"
                                Cursor="Hand"
                                BorderBrush="{DynamicResource ControlStrokeColorDefaultBrush}"
                                Command="{Binding DataContext.SelectChampionCommand, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                CommandParameter="{Binding}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="80"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Border CornerRadius="5,5,0,0">
                                    <Image Source="{Binding ChampionImageSource}" Stretch="Uniform" Margin="5"
                                               RenderOptions.BitmapScalingMode="Fant"/>
                                </Border>
                                <Border Grid.Row="1" Padding="8,5" MinHeight="40"  CornerRadius="0,0,5,5">
                                    <TextBlock Text="{Binding Name}" HorizontalAlignment="Center" VerticalAlignment="Center"
                                                FontSize="12"
                                               TextTrimming="CharacterEllipsis" TextAlignment="Center" TextWrapping="Wrap"/>
                                </Border>
                            </Grid>
                        </ui:CardAction>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </ScrollViewer>
    </Grid>
</Page>

//-==================== END OF FILE: Views\Pages\ChampionGridPage.xaml ====================-//

//-==================== START OF FILE: Views\Pages\ChampionGridPage.xaml.cs ====================-//

﻿using skinhunter.ViewModels.Pages;
using Wpf.Ui.Abstractions.Controls;

namespace skinhunter.Views.Pages
{
    public partial class ChampionGridPage : INavigableView<ChampionGridPageViewModel>
    {
        public ChampionGridPageViewModel ViewModel { get; }

        public ChampionGridPage(ChampionGridPageViewModel viewModel)
        {
            ViewModel = viewModel;
            DataContext = ViewModel;
            InitializeComponent();
        }
    }
}

//-==================== END OF FILE: Views\Pages\ChampionGridPage.xaml.cs ====================-//

//-==================== START OF FILE: Views\Pages\DashboardPage.xaml ====================-//

﻿<Page
    x:Class="skinhunter.Views.Pages.DashboardPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:skinhunter.Views.Pages"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    Title="DashboardPage"
    d:DataContext="{d:DesignInstance local:DashboardPage,
                                     IsDesignTimeCreatable=False}"
    d:DesignHeight="450"
    d:DesignWidth="800"
    ui:Design.Background="{DynamicResource ApplicationBackgroundBrush}"
    ui:Design.Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    mc:Ignorable="d">

    <Grid VerticalAlignment="Top">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>

        <ui:Button
            Grid.Column="0"
            Command="{Binding ViewModel.CounterIncrementCommand, Mode=OneWay}"
            Content="Click me!"
            Icon="Fluent24" />
        <TextBlock
            Grid.Column="1"
            Margin="12,0,0,0"
            VerticalAlignment="Center"
            Text="{Binding ViewModel.Counter, Mode=OneWay}" />
    </Grid>
</Page>


//-==================== END OF FILE: Views\Pages\DashboardPage.xaml ====================-//

//-==================== START OF FILE: Views\Pages\DashboardPage.xaml.cs ====================-//

﻿using skinhunter.ViewModels.Pages;
using Wpf.Ui.Abstractions.Controls;

namespace skinhunter.Views.Pages
{
    public partial class DashboardPage : INavigableView<DashboardViewModel>
    {
        public DashboardViewModel ViewModel { get; }

        public DashboardPage(DashboardViewModel viewModel)
        {
            ViewModel = viewModel;
            DataContext = this;

            InitializeComponent();
        }
    }
}


//-==================== END OF FILE: Views\Pages\DashboardPage.xaml.cs ====================-//

//-==================== START OF FILE: Views\Pages\DataPage.xaml ====================-//

<Page
    x:Class="skinhunter.Views.Pages.DataPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:skinhunter.Views.Pages"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:models="clr-namespace:skinhunter.Models"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    Title="DataPage"
    d:DataContext="{d:DesignInstance local:DataPage,
                                     IsDesignTimeCreatable=False}"
    d:DesignHeight="450"
    d:DesignWidth="800"
    ui:Design.Background="{DynamicResource ApplicationBackgroundBrush}"
    ui:Design.Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    ScrollViewer.CanContentScroll="False"
    mc:Ignorable="d">

    <Grid>
        <ui:VirtualizingItemsControl
            Foreground="{DynamicResource TextFillColorSecondaryBrush}"
            ItemsSource="{Binding ViewModel.Colors, Mode=OneWay}"
            VirtualizingPanel.CacheLengthUnit="Item">
            <ItemsControl.ItemTemplate>
                <DataTemplate DataType="{x:Type models:DataColor}">
                    <ui:Button
                        Width="80"
                        Height="80"
                        Margin="2"
                        Padding="0"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        Appearance="Secondary"
                        Background="{Binding Color, Mode=OneWay}"
                        FontSize="25"
                        Icon="Fluent24" />
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ui:VirtualizingItemsControl>
    </Grid>
</Page>


//-==================== END OF FILE: Views\Pages\DataPage.xaml ====================-//

//-==================== START OF FILE: Views\Pages\DataPage.xaml.cs ====================-//

﻿using skinhunter.ViewModels.Pages;
using Wpf.Ui.Abstractions.Controls;

namespace skinhunter.Views.Pages
{
    public partial class DataPage : INavigableView<DataViewModel>
    {
        public DataViewModel ViewModel { get; }

        public DataPage(DataViewModel viewModel)
        {
            ViewModel = viewModel;
            DataContext = this;

            InitializeComponent();
        }
    }
}


//-==================== END OF FILE: Views\Pages\DataPage.xaml.cs ====================-//

//-==================== START OF FILE: Views\Pages\InstalledSkinsPage.xaml ====================-//

<Page
    x:Class="skinhunter.Views.Pages.InstalledSkinsPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    xmlns:vm="clr-namespace:skinhunter.ViewModels.Pages"
    xmlns:m="clr-namespace:skinhunter.Models"
    xmlns:converters="clr-namespace:skinhunter.Converters"
    mc:Ignorable="d"
    d:DataContext="{d:DesignInstance Type=vm:InstalledSkinsViewModel, IsDesignTimeCreatable=False}"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    ScrollViewer.CanContentScroll="True">
    <Page.Resources>
        <ResourceDictionary>
            <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
            <converters:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter"/>
        </ResourceDictionary>
    </Page.Resources>

    <Grid Margin="28,12,28,20">
        <ItemsControl x:Name="SkeletonList">
            <ItemsControl.Style>
                <Style TargetType="ItemsControl">
                    <Setter Property="Visibility" Value="Collapsed" />
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsLoadingSkinsList}" Value="True">
                            <Setter Property="Visibility" Value="Visible" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </ItemsControl.Style>
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <Border BorderBrush="{DynamicResource ControlElevationBorderBrush}" BorderThickness="0,0,0,1" Margin="0,0,0,8" Padding="12" ClipToBounds="True">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Rectangle Grid.Column="0" Width="48" Height="48" RadiusX="4" RadiusY="4" Margin="0,0,15,0" Fill="{DynamicResource ControlFillColorSecondaryBrush}"/>
                            <StackPanel Grid.Column="1" VerticalAlignment="Center">
                                <Rectangle Height="12" Width="200" Fill="{DynamicResource ControlFillColorSecondaryBrush}" Margin="0,0,0,8" HorizontalAlignment="Left"/>
                                <Rectangle Height="10" Width="120" Fill="{DynamicResource ControlFillColorSecondaryBrush}" HorizontalAlignment="Left"/>
                            </StackPanel>
                        </Grid>
                    </Border>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
            <ItemsControl.ItemsSource>
                <x:Array Type="sys:Object" xmlns:sys="clr-namespace:System;assembly=mscorlib">
                    <sys:Object/>
                    <sys:Object/>
                    <sys:Object/>
                    <sys:Object/>
                    <sys:Object/>
                </x:Array>
            </ItemsControl.ItemsSource>
        </ItemsControl>

        <TextBlock Text="No skins currently installed." FontSize="16" Foreground="{DynamicResource TextFillColorSecondaryBrush}"
                   HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,50,0,0">
            <TextBlock.Style>
                <Style TargetType="TextBlock">
                    <Setter Property="Visibility" Value="Collapsed"/>
                    <Style.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding HasInstalledSkins}" Value="False"/>
                                <Condition Binding="{Binding IsLoadingSkinsList}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" Value="Visible"/>
                        </MultiDataTrigger>
                    </Style.Triggers>
                </Style>
            </TextBlock.Style>
        </TextBlock>

        <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled">
            <ScrollViewer.Style>
                <Style TargetType="ScrollViewer">
                    <Setter Property="Opacity" Value="0"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsLoadingSkinsList}" Value="False">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.4" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </ScrollViewer.Style>
            <ItemsControl ItemsSource="{Binding InstalledSkins}" Visibility="{Binding HasInstalledSkins, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <StackPanel Orientation="Vertical"/>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
                <ItemsControl.ItemTemplate>
                    <DataTemplate DataType="{x:Type m:InstalledSkinInfoDisplay}">
                        <Border BorderBrush="{DynamicResource ControlElevationBorderBrush}" BorderThickness="0,0,0,1" Margin="0,0,0,8" Padding="12">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>

                                <Border Grid.Column="0" Width="48" Height="48" CornerRadius="4" Margin="0,0,15,0">
                                    <Image Source="{Binding ImageUrl}" Stretch="UniformToFill" RenderOptions.BitmapScalingMode="Fant"/>
                                </Border>

                                <StackPanel Grid.Column="1" VerticalAlignment="Center">
                                    <TextBlock Text="{Binding DisplayName}" FontWeight="Medium" TextTrimming="CharacterEllipsis"/>
                                    <TextBlock Text="{Binding ChampionName}" FontSize="12" Foreground="{DynamicResource TextFillColorSecondaryBrush}" TextTrimming="CharacterEllipsis"/>
                                </StackPanel>

                                <CheckBox Grid.Column="2" IsChecked="{Binding IsSelected, Mode=TwoWay}" VerticalAlignment="Center"/>
                            </Grid>
                        </Border>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </ScrollViewer>
    </Grid>
</Page>

//-==================== END OF FILE: Views\Pages\InstalledSkinsPage.xaml ====================-//

//-==================== START OF FILE: Views\Pages\InstalledSkinsPage.xaml.cs ====================-//

﻿// Views/Pages/InstalledSkinsPage.xaml.cs
using skinhunter.ViewModels.Pages;
using Wpf.Ui.Abstractions.Controls;

namespace skinhunter.Views.Pages
{
    public partial class InstalledSkinsPage : INavigableView<InstalledSkinsViewModel>
    {
        public InstalledSkinsViewModel ViewModel { get; }

        public InstalledSkinsPage(InstalledSkinsViewModel viewModel)
        {
            ViewModel = viewModel;
            DataContext = ViewModel;
            InitializeComponent();
        }
    }
}

//-==================== END OF FILE: Views\Pages\InstalledSkinsPage.xaml.cs ====================-//

//-==================== START OF FILE: Views\Pages\ProfilePage.xaml ====================-//

<!-- Views/Pages/ProfilePage.xaml -->
<Page
    x:Class="skinhunter.Views.Pages.ProfilePage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    xmlns:vm="clr-namespace:skinhunter.ViewModels.Pages"
    mc:Ignorable="d"
    d:DataContext="{d:DesignInstance Type=vm:ProfileViewModel, IsDesignTimeCreatable=False}"
    DataContext="{Binding ViewModel, RelativeSource={RelativeSource Self}}"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    ScrollViewer.CanContentScroll="True">
    <Grid Margin="28,12,28,20">
        <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center" MinWidth="350">
            <TextBlock Text="User Profile" FontSize="24" FontWeight="SemiBold" Margin="0,0,0,20" HorizontalAlignment="Center"/>

            <Border Width="100" Height="100" CornerRadius="50" Background="{DynamicResource AccentFillColorDefaultBrush}" Margin="0,0,0,20" HorizontalAlignment="Center">
                <TextBlock Text="{Binding UserAvatarFallback}" FontSize="48" FontWeight="Bold"
                           HorizontalAlignment="Center" VerticalAlignment="Center"
                           Foreground="{DynamicResource TextOnAccentFillColorPrimaryBrush}"/>
            </Border>

            <ui:Card Padding="20">
                <StackPanel>
                    <Grid Margin="0,0,0,15">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Grid.Column="0" Text="Username:" FontSize="16" FontWeight="Medium" VerticalAlignment="Center" Margin="0,0,15,0"/>
                        <TextBlock Grid.Column="1" Text="{Binding UserName}" FontSize="16" VerticalAlignment="Center" TextTrimming="CharacterEllipsis" Foreground="{DynamicResource SystemAccentColorPrimaryBrush}" FontWeight="SemiBold"/>
                    </Grid>
                    <Separator Margin="0,0,0,15"/>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Grid.Column="0" Text="License:" FontSize="16" FontWeight="Medium" VerticalAlignment="Center" Margin="0,0,15,0"/>
                        <TextBlock Grid.Column="1" Text="{Binding LicenseStatus}" FontSize="16" VerticalAlignment="Center" TextTrimming="CharacterEllipsis">
                            <TextBlock.Style>
                                <Style TargetType="TextBlock">
                                    <Setter Property="Foreground" Value="{DynamicResource TextFillColorSecondaryBrush}"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsBuyer}" Value="True">
                                            <Setter Property="Foreground" Value="LightGreen"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </Grid>
                </StackPanel>
            </ui:Card>
        </StackPanel>
    </Grid>
</Page>

//-==================== END OF FILE: Views\Pages\ProfilePage.xaml ====================-//

//-==================== START OF FILE: Views\Pages\ProfilePage.xaml.cs ====================-//

﻿// Views/Pages/ProfilePage.xaml.cs
using skinhunter.ViewModels.Pages;
using Wpf.Ui.Abstractions.Controls;

namespace skinhunter.Views.Pages
{
    public partial class ProfilePage : INavigableView<ProfileViewModel>
    {
        public ProfileViewModel ViewModel { get; }

        public ProfilePage(ProfileViewModel viewModel)
        {
            ViewModel = viewModel;
            DataContext = this;
            InitializeComponent();
        }
    }
}

//-==================== END OF FILE: Views\Pages\ProfilePage.xaml.cs ====================-//

//-==================== START OF FILE: Views\Pages\SettingsPage.xaml ====================-//

﻿<!-- Views/Pages/SettingsPage.xaml -->
<Page
    x:Class="skinhunter.Views.Pages.SettingsPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    xmlns:vm="clr-namespace:skinhunter.ViewModels.Pages"
    mc:Ignorable="d"
    d:DataContext="{d:DesignInstance Type=vm:SettingsViewModel, IsDesignTimeCreatable=False}"
    DataContext="{Binding ViewModel, RelativeSource={RelativeSource Self}}"
    ui:Design.Background="{DynamicResource ApplicationBackgroundBrush}"
    ui:Design.Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}">

    <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled">
        <StackPanel Margin="28,20,28,20">
            <TextBlock Text="Settings" FontSize="24" FontWeight="SemiBold" Margin="0,0,0,24"/>

            <TextBlock Text="Mods" FontWeight="Medium" FontSize="18" Margin="0,0,0,12"/>
            <ui:CardAction Command="{Binding OpenModsFolderCommand}" IsChevronVisible="True">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <ui:SymbolIcon Grid.Column="0" Symbol="Folder24" FontSize="20" Margin="0,0,12,0" VerticalAlignment="Center"/>
                    <StackPanel Grid.Column="1">
                        <TextBlock Text="Open Mods Folder" FontWeight="Medium"/>
                        <TextBlock Text="Manage custom skin files here." FontSize="12" Foreground="{DynamicResource TextFillColorSecondaryBrush}"/>
                    </StackPanel>
                </Grid>
            </ui:CardAction>

            <TextBlock Text="General" FontWeight="Medium" FontSize="18" Margin="0,24,0,12"/>
            <ui:Card Padding="16,12">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <StackPanel Grid.Column="0" VerticalAlignment="Center">
                        <TextBlock Text="Sync Skins on Startup" FontWeight="Medium"/>
                        <TextBlock Text="Automatically sync and build installed skins when the app starts." FontSize="12" Foreground="{DynamicResource TextFillColorSecondaryBrush}" TextWrapping="Wrap" MaxWidth="500"/>
                    </StackPanel>
                    <ui:ToggleSwitch Grid.Column="1" IsChecked="{Binding SyncOnStart, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                </Grid>
            </ui:Card>

            <TextBlock Text="Appearance" FontWeight="Medium" FontSize="18" Margin="0,24,0,12"/>
            <ui:Card Padding="16,12">
                <StackPanel>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <StackPanel Grid.Column="0" VerticalAlignment="Center">
                            <TextBlock Text="Application Theme" FontWeight="Medium"/>
                            <TextBlock Text="Choose between light and dark mode." FontSize="12" Foreground="{DynamicResource TextFillColorSecondaryBrush}"/>
                        </StackPanel>
                        <ui:ToggleSwitch Grid.Column="1"
                                         OffContent="Light" OnContent="Dark"
                                         IsChecked="{Binding IsDarkTheme, Mode=OneWayToSource}"
                                         Command="{Binding ChangeThemeCommand}"/>
                    </Grid>

                    <Separator Margin="0,15" />

                    <StackPanel>
                        <TextBlock Text="Accent Color" FontWeight="Medium" Margin="0,0,0,4"/>
                        <TextBlock Text="Personalize the application's highlight color." FontSize="12" Foreground="{DynamicResource TextFillColorSecondaryBrush}" Margin="0,0,0,12"/>
                        <ItemsControl ItemsSource="{Binding PredefinedAccentColors}">
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <WrapPanel Orientation="Horizontal"/>
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <RadioButton GroupName="AccentColor"
                                                 Command="{Binding DataContext.ChangeAccentColorCommand, RelativeSource={RelativeSource AncestorType=Page}}"
                                                 CommandParameter="{Binding}">
                                        <RadioButton.Template>
                                            <ControlTemplate TargetType="RadioButton">
                                                <Border x:Name="border" Width="32" Height="32" CornerRadius="16" Margin="4"
                                                        BorderBrush="{DynamicResource ControlStrokeColorDefaultBrush}" BorderThickness="1">
                                                    <Border.Background>
                                                        <SolidColorBrush Color="{Binding}"/>
                                                    </Border.Background>
                                                    <ui:SymbolIcon x:Name="check" Symbol="Checkmark24" Foreground="White" FontSize="16" HorizontalAlignment="Center" VerticalAlignment="Center"
                                                                   Visibility="Collapsed"/>
                                                </Border>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsChecked" Value="True">
                                                        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource SystemAccentColorPrimaryBrush}"/>
                                                        <Setter TargetName="border" Property="BorderThickness" Value="2"/>
                                                        <Setter TargetName="check" Property="Visibility" Value="Visible" />
                                                    </Trigger>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource ControlStrokeColorDefaultBrush}"/>
                                                        <Setter TargetName="border" Property="BorderThickness" Value="2"/>
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </RadioButton.Template>
                                    </RadioButton>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </StackPanel>
                </StackPanel>
            </ui:Card>

            <TextBlock Margin="0,24,0,0" FontSize="20" FontWeight="Medium" Text="About" />
            <TextBlock Margin="0,12,0,0" Text="{Binding AppVersion, Mode=OneWay}" Foreground="{DynamicResource TextFillColorSecondaryBrush}"/>
        </StackPanel>
    </ScrollViewer>
</Page>

//-==================== END OF FILE: Views\Pages\SettingsPage.xaml ====================-//

//-==================== START OF FILE: Views\Pages\SettingsPage.xaml.cs ====================-//

﻿using skinhunter.ViewModels.Pages;
using Wpf.Ui.Abstractions.Controls;
using Wpf.Ui.Appearance;

namespace skinhunter.Views.Pages
{
    public partial class SettingsPage : INavigableView<SettingsViewModel>
    {
        public SettingsViewModel ViewModel { get; }

        public SettingsPage(SettingsViewModel viewModel)
        {
            ViewModel = viewModel;
            DataContext = ViewModel;
            InitializeComponent();
        }
    }
}

//-==================== END OF FILE: Views\Pages\SettingsPage.xaml.cs ====================-//

//-==================== START OF FILE: Views\Windows\MainWindow.xaml ====================-//

﻿<ui:FluentWindow
    x:Class="skinhunter.Views.Windows.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:local="clr-namespace:skinhunter.Views.Windows"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    xmlns:vmWindows="clr-namespace:skinhunter.ViewModels.Windows"
    xmlns:vmPages="clr-namespace:skinhunter.ViewModels.Pages"
    xmlns:vmDialogs="clr-namespace:skinhunter.ViewModels.Dialogs"
    xmlns:viewsDialogs="clr-namespace:skinhunter.Views.Dialogs"
    xmlns:viewsComponents="clr-namespace:skinhunter.Views.Components"
    xmlns:converters="clr-namespace:skinhunter.Converters"
    Title="{Binding ApplicationTitle, Mode=OneWay}"
    Icon="pack://application:,,,/Assets/icon.ico"
    Width="1280" Height="720" MinHeight="600" MinWidth="1000"
    d:DataContext="{d:DesignInstance Type=vmWindows:MainWindowViewModel, IsDesignTimeCreatable=False}"
    ExtendsContentIntoTitleBar="True"
    Foreground="{DynamicResource TextFillColorPrimaryBrush}"
    WindowBackdropType="Mica" WindowCornerPreference="Round" WindowStartupLocation="CenterScreen"
    mc:Ignorable="d">

    <Grid>
        <DockPanel Margin="0,42,0,0">
            <Border DockPanel.Dock="Top" Background="{DynamicResource ApplicationBackgroundBrush}" BorderBrush="{DynamicResource ControlElevationBorderBrush}" BorderThickness="0,0,0,1">
                <Grid Margin="28,0,28,0" VerticalAlignment="Center" Height="50">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                    <ui:Button Grid.Column="0" Command="{Binding GoBackCommand}" Appearance="Transparent" VerticalAlignment="Center" Margin="0,0,12,0"
                               Visibility="{Binding IsBackButtonVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <ui:SymbolIcon Symbol="ArrowLeft24" />
                    </ui:Button>

                    <TextBlock Grid.Column="1" Text="{Binding CurrentPageTitle, FallbackValue=Page}" FontSize="18" FontWeight="Medium" VerticalAlignment="Center" Margin="0,0,24,0"/>

                    <ContentControl Grid.Column="2" Content="{Binding CurrentPageViewModel}" VerticalAlignment="Center">
                        <ContentControl.Resources>
                            <DataTemplate DataType="{x:Type vmPages:ChampionGridPageViewModel}">
                                <viewsComponents:ChampionGridPageHeader/>
                            </DataTemplate>
                            <DataTemplate DataType="{x:Type vmPages:InstalledSkinsViewModel}">
                                <viewsComponents:InstalledSkinsPageHeader/>
                            </DataTemplate>
                        </ContentControl.Resources>
                    </ContentControl>

                    <StackPanel Grid.Column="3" Orientation="Horizontal" VerticalAlignment="Center" DataContext="{Binding OverlayViewModel}">
                        <Border Background="{DynamicResource ControlFillColorDefaultBrush}"
                                BorderBrush="{DynamicResource ControlStrokeColorDefaultBrush}"
                                BorderThickness="1"
                                CornerRadius="4"
                                Padding="8,6"
                                Margin="0,0,8,0"
                                VerticalAlignment="Center"
                                Opacity="{Binding StatusTextOpacity}"
                                Visibility="{Binding StatusText, Converter={StaticResource NullOrEmptyToVisibilityConverter}}">
                            <StackPanel Orientation="Horizontal">
                                <ui:SymbolIcon Symbol="Warning24" Foreground="OrangeRed" Margin="0,0,6,0"
                                             Visibility="{Binding IsStatusError, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                <TextBlock Foreground="{DynamicResource TextFillColorSecondaryBrush}" VerticalAlignment="Center" Text="{Binding StatusText, FallbackValue=''}"/>
                            </StackPanel>
                        </Border>
                        <ui:Button
                            Content="{Binding Content}"
                            Command="{Binding ToggleOverlayCommand}"
                            IsEnabled="{Binding CanExecuteToggleOverlay}"
                            Icon="{Binding Icon, Converter={StaticResource SymbolToIconConverter}}"
                            Appearance="Secondary"
                            VerticalContentAlignment="Center"/>
                    </StackPanel>
                </Grid>
            </Border>

            <ui:NavigationView
                x:Name="RootNavigation"
                MenuItemsSource="{Binding MenuItemsSource}"
                FooterMenuItemsSource="{Binding FooterMenuItemsSource}"
                PaneDisplayMode="LeftFluent"
                IsBackButtonVisible="Collapsed"
                IsPaneToggleVisible="False"
                HeaderVisibility="Collapsed">
            </ui:NavigationView>
        </DockPanel>

        <ui:TitleBar VerticalAlignment="Top" Title="{Binding ApplicationTitle}" CloseWindowByDoubleClickOnIcon="True">
            <ui:TitleBar.Icon>
                <ui:ImageIcon Source="pack://application:,,,/Assets/icon.ico" />
            </ui:TitleBar.Icon>
        </ui:TitleBar>

        <Grid Background="#A0000000" Visibility="{Binding DialogViewModel, Converter={StaticResource NullToVisibilityConverter}, FallbackValue=Collapsed}" Panel.ZIndex="10">
            <ContentControl Content="{Binding DialogViewModel}" HorizontalAlignment="Center" VerticalAlignment="Center">
                <ContentControl.Resources>
                    <DataTemplate DataType="{x:Type vmDialogs:SkinDetailViewModel}">
                        <viewsDialogs:SkinDetailDialog/>
                    </DataTemplate>
                </ContentControl.Resources>
            </ContentControl>
        </Grid>

        <Grid Background="#A0000000" Visibility="{Binding OmnisearchDialogViewModel, Converter={StaticResource NullToVisibilityConverter}, FallbackValue=Collapsed}" Panel.ZIndex="10">
            <ContentControl Content="{Binding OmnisearchDialogViewModel}" HorizontalAlignment="Center" VerticalAlignment="Center">
                <ContentControl.Resources>
                    <DataTemplate DataType="{x:Type vmDialogs:OmnisearchViewModel}">
                        <viewsDialogs:OmnisearchDialog/>
                    </DataTemplate>
                </ContentControl.Resources>
            </ContentControl>
        </Grid>

        <Grid Background="{DynamicResource ApplicationBackgroundBrush}" Opacity="0.95" Visibility="{Binding IsGloballyLoading, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}" Panel.ZIndex="11">
            <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                <ui:ProgressRing Width="60" Height="60" IsIndeterminate="True"/>
                <TextBlock Text="{Binding GlobalLoadingMessage}" FontSize="16" Foreground="{DynamicResource TextFillColorPrimaryBrush}" Margin="0,20,0,0" TextAlignment="Center"/>
            </StackPanel>
        </Grid>

        <ui:SnackbarPresenter x:Name="SnackbarPresenter" Panel.ZIndex="99"/>

    </Grid>
</ui:FluentWindow>

//-==================== END OF FILE: Views\Windows\MainWindow.xaml ====================-//

//-==================== START OF FILE: Views\Windows\MainWindow.xaml.cs ====================-//

﻿using skinhunter.ViewModels.Windows;
using Microsoft.Extensions.DependencyInjection;
using skinhunter.Services;
using skinhunter.Views.Pages;
using Wpf.Ui.Controls;
using System;
using System.Windows;
using Wpf.Ui.Abstractions;
using Wpf.Ui.Abstractions.Controls;
using System.Linq;
using Wpf.Ui.Animations;

namespace skinhunter.Views.Windows
{
    public partial class MainWindow : INavigationWindow
    {
        public MainWindowViewModel ViewModel { get; }

        public MainWindow(
            MainWindowViewModel viewModel,
            IServiceProvider serviceProvider,
            INavigationService navigationService,
            ISnackbarService snackbarService,
            INavigationViewPageProvider pageProvider)
        {
            ViewModel = viewModel;
            DataContext = ViewModel;

            SystemThemeWatcher.Watch(this);

            InitializeComponent();

            navigationService.SetNavigationControl(RootNavigation);
            snackbarService.SetSnackbarPresenter(SnackbarPresenter);
            SetPageService(pageProvider);
            SetServiceProvider(serviceProvider);

            RootNavigation.Navigated += OnNavigated;

            var authTokenManager = serviceProvider.GetRequiredService<AuthTokenManager>();
            this.Loaded += (s, e) => {
                if (!authTokenManager.IsAuthenticated)
                {
                    navigationService.Navigate(typeof(AuthenticationRequiredPage));
                }
                else
                {
                    navigationService.Navigate(typeof(ChampionGridPage));
                }
            };
        }

        private void OnNavigated(object sender, NavigatedEventArgs e)
        {
            if (e.Page is FrameworkElement { DataContext: ViewModelBase viewModel } page)
            {
                ViewModel.CurrentPageViewModel = viewModel;

                var navigationView = sender as INavigationView;
                var selectedItem = navigationView?.MenuItems.OfType<INavigationViewItem>().FirstOrDefault(i => i.TargetPageType == page.GetType())
                                ?? navigationView?.FooterMenuItems.OfType<INavigationViewItem>().FirstOrDefault(i => i.TargetPageType == page.GetType());

                if (selectedItem != null)
                {
                    ViewModel.CurrentPageTitle = selectedItem.Content as string;
                }
                else if (page.GetType() != typeof(ChampionDetailPage))
                {
                    ViewModel.CurrentPageTitle = "Page";
                }
            }
            TransitionAnimationProvider.ApplyTransition(e.Page, Transition.FadeInWithSlide, 300);
        }

        public INavigationView GetNavigation() => RootNavigation;
        public bool Navigate(Type pageType) => RootNavigation.Navigate(pageType);
        public void SetPageService(INavigationViewPageProvider pageProvider) => RootNavigation.SetPageProviderService(pageProvider);
        public void SetServiceProvider(IServiceProvider serviceProvider) => RootNavigation.SetServiceProvider(serviceProvider);
        public void ShowWindow() => Show();
        public void CloseWindow() => Close();

        protected override void OnClosed(EventArgs e)
        {
            base.OnClosed(e);
            Application.Current.Shutdown();
        }
    }
}

//-==================== END OF FILE: Views\Windows\MainWindow.xaml.cs ====================-//

